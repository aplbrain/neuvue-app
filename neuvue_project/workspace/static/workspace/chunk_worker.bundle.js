/******/ (function(modules) { // webpackBootstrap
/******/ 	self["webpackChunk"] = function webpackChunkCallback(chunkIds, moreModules) {
/******/ 		for(var moduleId in moreModules) {
/******/ 			modules[moduleId] = moreModules[moduleId];
/******/ 		}
/******/ 		while(chunkIds.length)
/******/ 			installedChunks[chunkIds.pop()] = 1;
/******/ 	};
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded chunks
/******/ 	// "1" means "already loaded"
/******/ 	var installedChunks = {
/******/ 		"chunk_worker": 1
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var promises = [];
/******/ 		promises.push(Promise.resolve().then(function() {
/******/ 			// "1" is the signal for "already loaded"
/******/ 			if(!installedChunks[chunkId]) {
/******/ 				importScripts(__webpack_require__.p + "" + ({"draco":"draco"}[chunkId]||chunkId) + ".bundle.js");
/******/ 			}
/******/ 		}));
/******/ 		return Promise.all(promises);
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/common.js":
/*!********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/gl-matrix/esm/common.js ***!
  \********************************************************************************************************/
/*! exports provided: EPSILON, ARRAY_TYPE, RANDOM, setMatrixArrayType, toRadian, equals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EPSILON", function() { return EPSILON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ARRAY_TYPE", function() { return ARRAY_TYPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RANDOM", function() { return RANDOM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setMatrixArrayType", function() { return setMatrixArrayType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toRadian", function() { return toRadian; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/**
 * Common utilities
 * @module glMatrix
 */
// Configuration Constants
var EPSILON = 0.000001;
var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
var RANDOM = Math.random;
/**
 * Sets the type of array used when creating new vectors and matrices
 *
 * @param {Type} type Array type, such as Float32Array or Array
 */

function setMatrixArrayType(type) {
  ARRAY_TYPE = type;
}
var degree = Math.PI / 180;
/**
 * Convert Degree To Radian
 *
 * @param {Number} a Angle in Degrees
 */

function toRadian(a) {
  return a * degree;
}
/**
 * Tests whether or not the arguments have approximately the same value, within an absolute
 * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less
 * than or equal to 1.0, and a relative tolerance is used for larger values)
 *
 * @param {Number} a The first number to test.
 * @param {Number} b The second number to test.
 * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
 */

function equals(a, b) {
  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
}

/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/index.js":
/*!*******************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/gl-matrix/esm/index.js ***!
  \*******************************************************************************************************/
/*! exports provided: glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/common.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "glMatrix", function() { return _common_js__WEBPACK_IMPORTED_MODULE_0__; });
/* harmony import */ var _mat2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mat2.js */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/mat2.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "mat2", function() { return _mat2_js__WEBPACK_IMPORTED_MODULE_1__; });
/* harmony import */ var _mat2d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mat2d.js */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/mat2d.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "mat2d", function() { return _mat2d_js__WEBPACK_IMPORTED_MODULE_2__; });
/* harmony import */ var _mat3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mat3.js */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/mat3.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "mat3", function() { return _mat3_js__WEBPACK_IMPORTED_MODULE_3__; });
/* harmony import */ var _mat4_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mat4.js */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/mat4.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "mat4", function() { return _mat4_js__WEBPACK_IMPORTED_MODULE_4__; });
/* harmony import */ var _quat_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./quat.js */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/quat.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "quat", function() { return _quat_js__WEBPACK_IMPORTED_MODULE_5__; });
/* harmony import */ var _quat2_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./quat2.js */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/quat2.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "quat2", function() { return _quat2_js__WEBPACK_IMPORTED_MODULE_6__; });
/* harmony import */ var _vec2_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./vec2.js */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/vec2.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "vec2", function() { return _vec2_js__WEBPACK_IMPORTED_MODULE_7__; });
/* harmony import */ var _vec3_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./vec3.js */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/vec3.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "vec3", function() { return _vec3_js__WEBPACK_IMPORTED_MODULE_8__; });
/* harmony import */ var _vec4_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./vec4.js */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/vec4.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "vec4", function() { return _vec4_js__WEBPACK_IMPORTED_MODULE_9__; });












/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/mat2.js":
/*!******************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/gl-matrix/esm/mat2.js ***!
  \******************************************************************************************************/
/*! exports provided: create, clone, copy, identity, fromValues, set, transpose, invert, adjoint, determinant, multiply, rotate, scale, fromRotation, fromScaling, str, frob, LDU, add, subtract, exactEquals, equals, multiplyScalar, multiplyScalarAndAdd, mul, sub */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return identity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transpose", function() { return transpose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invert", function() { return invert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "adjoint", function() { return adjoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "determinant", function() { return determinant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotation", function() { return fromRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromScaling", function() { return fromScaling; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "frob", function() { return frob; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LDU", function() { return LDU; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtract", function() { return subtract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyScalar", function() { return multiplyScalar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyScalarAndAdd", function() { return multiplyScalarAndAdd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/common.js");

/**
 * 2x2 Matrix
 * @module mat2
 */

/**
 * Creates a new identity mat2
 *
 * @returns {mat2} a new 2x2 matrix
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](4);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    out[1] = 0;
    out[2] = 0;
  }

  out[0] = 1;
  out[3] = 1;
  return out;
}
/**
 * Creates a new mat2 initialized with values from an existing matrix
 *
 * @param {mat2} a matrix to clone
 * @returns {mat2} a new 2x2 matrix
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Copy the values from one mat2 to another
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Set a mat2 to the identity matrix
 *
 * @param {mat2} out the receiving matrix
 * @returns {mat2} out
 */

function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}
/**
 * Create a new mat2 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out A new 2x2 matrix
 */

function fromValues(m00, m01, m10, m11) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](4);
  out[0] = m00;
  out[1] = m01;
  out[2] = m10;
  out[3] = m11;
  return out;
}
/**
 * Set the components of a mat2 to the given values
 *
 * @param {mat2} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out
 */

function set(out, m00, m01, m10, m11) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m10;
  out[3] = m11;
  return out;
}
/**
 * Transpose the values of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */

function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache
  // some values
  if (out === a) {
    var a1 = a[1];
    out[1] = a[2];
    out[2] = a1;
  } else {
    out[0] = a[0];
    out[1] = a[2];
    out[2] = a[1];
    out[3] = a[3];
  }

  return out;
}
/**
 * Inverts a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */

function invert(out, a) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3]; // Calculate the determinant

  var det = a0 * a3 - a2 * a1;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = a3 * det;
  out[1] = -a1 * det;
  out[2] = -a2 * det;
  out[3] = a0 * det;
  return out;
}
/**
 * Calculates the adjugate of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */

function adjoint(out, a) {
  // Caching this value is nessecary if out == a
  var a0 = a[0];
  out[0] = a[3];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a0;
  return out;
}
/**
 * Calculates the determinant of a mat2
 *
 * @param {mat2} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant(a) {
  return a[0] * a[3] - a[2] * a[1];
}
/**
 * Multiplies two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */

function multiply(out, a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  out[0] = a0 * b0 + a2 * b1;
  out[1] = a1 * b0 + a3 * b1;
  out[2] = a0 * b2 + a2 * b3;
  out[3] = a1 * b2 + a3 * b3;
  return out;
}
/**
 * Rotates a mat2 by the given angle
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */

function rotate(out, a, rad) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = a0 * c + a2 * s;
  out[1] = a1 * c + a3 * s;
  out[2] = a0 * -s + a2 * c;
  out[3] = a1 * -s + a3 * c;
  return out;
}
/**
 * Scales the mat2 by the dimensions in the given vec2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2} out
 **/

function scale(out, a, v) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var v0 = v[0],
      v1 = v[1];
  out[0] = a0 * v0;
  out[1] = a1 * v0;
  out[2] = a2 * v1;
  out[3] = a3 * v1;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.rotate(dest, dest, rad);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */

function fromRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = -s;
  out[3] = c;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.scale(dest, dest, vec);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = v[1];
  return out;
}
/**
 * Returns a string representation of a mat2
 *
 * @param {mat2} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str(a) {
  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
}
/**
 * Returns Frobenius norm of a mat2
 *
 * @param {mat2} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob(a) {
  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2));
}
/**
 * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
 * @param {mat2} L the lower triangular matrix
 * @param {mat2} D the diagonal matrix
 * @param {mat2} U the upper triangular matrix
 * @param {mat2} a the input matrix to factorize
 */

function LDU(L, D, U, a) {
  L[2] = a[2] / a[0];
  U[0] = a[0];
  U[1] = a[1];
  U[3] = a[3] - L[2] * U[1];
  return [L, D, U];
}
/**
 * Adds two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat2} a The first matrix.
 * @param {mat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat2} a The first matrix.
 * @param {mat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a3), Math.abs(b3));
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2} out
 */

function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}
/**
 * Adds two mat2's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2} out the receiving vector
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2} out
 */

function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  return out;
}
/**
 * Alias for {@link mat2.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link mat2.subtract}
 * @function
 */

var sub = subtract;

/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/mat2d.js":
/*!*******************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/gl-matrix/esm/mat2d.js ***!
  \*******************************************************************************************************/
/*! exports provided: create, clone, copy, identity, fromValues, set, invert, determinant, multiply, rotate, scale, translate, fromRotation, fromScaling, fromTranslation, str, frob, add, subtract, multiplyScalar, multiplyScalarAndAdd, exactEquals, equals, mul, sub */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return identity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invert", function() { return invert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "determinant", function() { return determinant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translate", function() { return translate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotation", function() { return fromRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromScaling", function() { return fromScaling; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromTranslation", function() { return fromTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "frob", function() { return frob; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtract", function() { return subtract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyScalar", function() { return multiplyScalar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyScalarAndAdd", function() { return multiplyScalarAndAdd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/common.js");

/**
 * 2x3 Matrix
 * @module mat2d
 *
 * @description
 * A mat2d contains six elements defined as:
 * <pre>
 * [a, c, tx,
 *  b, d, ty]
 * </pre>
 * This is a short form for the 3x3 matrix:
 * <pre>
 * [a, c, tx,
 *  b, d, ty,
 *  0, 0, 1]
 * </pre>
 * The last row is ignored so the array is shorter and operations are faster.
 */

/**
 * Creates a new identity mat2d
 *
 * @returns {mat2d} a new 2x3 matrix
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](6);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[4] = 0;
    out[5] = 0;
  }

  out[0] = 1;
  out[3] = 1;
  return out;
}
/**
 * Creates a new mat2d initialized with values from an existing matrix
 *
 * @param {mat2d} a matrix to clone
 * @returns {mat2d} a new 2x3 matrix
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](6);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  return out;
}
/**
 * Copy the values from one mat2d to another
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  return out;
}
/**
 * Set a mat2d to the identity matrix
 *
 * @param {mat2d} out the receiving matrix
 * @returns {mat2d} out
 */

function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = 0;
  out[5] = 0;
  return out;
}
/**
 * Create a new mat2d with the given values
 *
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} A new mat2d
 */

function fromValues(a, b, c, d, tx, ty) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](6);
  out[0] = a;
  out[1] = b;
  out[2] = c;
  out[3] = d;
  out[4] = tx;
  out[5] = ty;
  return out;
}
/**
 * Set the components of a mat2d to the given values
 *
 * @param {mat2d} out the receiving matrix
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} out
 */

function set(out, a, b, c, d, tx, ty) {
  out[0] = a;
  out[1] = b;
  out[2] = c;
  out[3] = d;
  out[4] = tx;
  out[5] = ty;
  return out;
}
/**
 * Inverts a mat2d
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */

function invert(out, a) {
  var aa = a[0],
      ab = a[1],
      ac = a[2],
      ad = a[3];
  var atx = a[4],
      aty = a[5];
  var det = aa * ad - ab * ac;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = ad * det;
  out[1] = -ab * det;
  out[2] = -ac * det;
  out[3] = aa * det;
  out[4] = (ac * aty - ad * atx) * det;
  out[5] = (ab * atx - aa * aty) * det;
  return out;
}
/**
 * Calculates the determinant of a mat2d
 *
 * @param {mat2d} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant(a) {
  return a[0] * a[3] - a[1] * a[2];
}
/**
 * Multiplies two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */

function multiply(out, a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5];
  out[0] = a0 * b0 + a2 * b1;
  out[1] = a1 * b0 + a3 * b1;
  out[2] = a0 * b2 + a2 * b3;
  out[3] = a1 * b2 + a3 * b3;
  out[4] = a0 * b4 + a2 * b5 + a4;
  out[5] = a1 * b4 + a3 * b5 + a5;
  return out;
}
/**
 * Rotates a mat2d by the given angle
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */

function rotate(out, a, rad) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = a0 * c + a2 * s;
  out[1] = a1 * c + a3 * s;
  out[2] = a0 * -s + a2 * c;
  out[3] = a1 * -s + a3 * c;
  out[4] = a4;
  out[5] = a5;
  return out;
}
/**
 * Scales the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2d} out
 **/

function scale(out, a, v) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var v0 = v[0],
      v1 = v[1];
  out[0] = a0 * v0;
  out[1] = a1 * v0;
  out[2] = a2 * v1;
  out[3] = a3 * v1;
  out[4] = a4;
  out[5] = a5;
  return out;
}
/**
 * Translates the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to translate the matrix by
 * @returns {mat2d} out
 **/

function translate(out, a, v) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var v0 = v[0],
      v1 = v[1];
  out[0] = a0;
  out[1] = a1;
  out[2] = a2;
  out[3] = a3;
  out[4] = a0 * v0 + a2 * v1 + a4;
  out[5] = a1 * v0 + a3 * v1 + a5;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.rotate(dest, dest, rad);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */

function fromRotation(out, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = -s;
  out[3] = c;
  out[4] = 0;
  out[5] = 0;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.scale(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2d} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = v[1];
  out[4] = 0;
  out[5] = 0;
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.translate(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat2d} out
 */

function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = v[0];
  out[5] = v[1];
  return out;
}
/**
 * Returns a string representation of a mat2d
 *
 * @param {mat2d} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str(a) {
  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';
}
/**
 * Returns Frobenius norm of a mat2d
 *
 * @param {mat2d} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob(a) {
  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1);
}
/**
 * Adds two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2d} out
 */

function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  return out;
}
/**
 * Adds two mat2d's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2d} out the receiving vector
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2d} out
 */

function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat2d} a The first matrix.
 * @param {mat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat2d} a The first matrix.
 * @param {mat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a5), Math.abs(b5));
}
/**
 * Alias for {@link mat2d.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link mat2d.subtract}
 * @function
 */

var sub = subtract;

/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/mat3.js":
/*!******************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/gl-matrix/esm/mat3.js ***!
  \******************************************************************************************************/
/*! exports provided: create, fromMat4, clone, copy, fromValues, set, identity, transpose, invert, adjoint, determinant, multiply, translate, rotate, scale, fromTranslation, fromRotation, fromScaling, fromMat2d, fromQuat, normalFromMat4, projection, str, frob, add, subtract, multiplyScalar, multiplyScalarAndAdd, exactEquals, equals, mul, sub */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromMat4", function() { return fromMat4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return identity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transpose", function() { return transpose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invert", function() { return invert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "adjoint", function() { return adjoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "determinant", function() { return determinant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translate", function() { return translate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromTranslation", function() { return fromTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotation", function() { return fromRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromScaling", function() { return fromScaling; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromMat2d", function() { return fromMat2d; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromQuat", function() { return fromQuat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalFromMat4", function() { return normalFromMat4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "projection", function() { return projection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "frob", function() { return frob; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtract", function() { return subtract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyScalar", function() { return multiplyScalar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyScalarAndAdd", function() { return multiplyScalarAndAdd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/common.js");

/**
 * 3x3 Matrix
 * @module mat3
 */

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](9);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
  }

  out[0] = 1;
  out[4] = 1;
  out[8] = 1;
  return out;
}
/**
 * Copies the upper-left 3x3 values into the given mat3.
 *
 * @param {mat3} out the receiving 3x3 matrix
 * @param {mat4} a   the source 4x4 matrix
 * @returns {mat3} out
 */

function fromMat4(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[4];
  out[4] = a[5];
  out[5] = a[6];
  out[6] = a[8];
  out[7] = a[9];
  out[8] = a[10];
  return out;
}
/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {mat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](9);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Create a new mat3 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} A new mat3
 */

function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](9);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
/**
 * Set the components of a mat3 to the given values
 *
 * @param {mat3} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} out
 */

function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */

function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */

function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    var a01 = a[1],
        a02 = a[2],
        a12 = a[5];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a01;
    out[5] = a[7];
    out[6] = a02;
    out[7] = a12;
  } else {
    out[0] = a[0];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a[1];
    out[4] = a[4];
    out[5] = a[7];
    out[6] = a[2];
    out[7] = a[5];
    out[8] = a[8];
  }

  return out;
}
/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */

function invert(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  var b01 = a22 * a11 - a12 * a21;
  var b11 = -a22 * a10 + a12 * a20;
  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant

  var det = a00 * b01 + a01 * b11 + a02 * b21;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = b01 * det;
  out[1] = (-a22 * a01 + a02 * a21) * det;
  out[2] = (a12 * a01 - a02 * a11) * det;
  out[3] = b11 * det;
  out[4] = (a22 * a00 - a02 * a20) * det;
  out[5] = (-a12 * a00 + a02 * a10) * det;
  out[6] = b21 * det;
  out[7] = (-a21 * a00 + a01 * a20) * det;
  out[8] = (a11 * a00 - a01 * a10) * det;
  return out;
}
/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */

function adjoint(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  out[0] = a11 * a22 - a12 * a21;
  out[1] = a02 * a21 - a01 * a22;
  out[2] = a01 * a12 - a02 * a11;
  out[3] = a12 * a20 - a10 * a22;
  out[4] = a00 * a22 - a02 * a20;
  out[5] = a02 * a10 - a00 * a12;
  out[6] = a10 * a21 - a11 * a20;
  out[7] = a01 * a20 - a00 * a21;
  out[8] = a00 * a11 - a01 * a10;
  return out;
}
/**
 * Calculates the determinant of a mat3
 *
 * @param {mat3} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant(a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
}
/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */

function multiply(out, a, b) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  var b00 = b[0],
      b01 = b[1],
      b02 = b[2];
  var b10 = b[3],
      b11 = b[4],
      b12 = b[5];
  var b20 = b[6],
      b21 = b[7],
      b22 = b[8];
  out[0] = b00 * a00 + b01 * a10 + b02 * a20;
  out[1] = b00 * a01 + b01 * a11 + b02 * a21;
  out[2] = b00 * a02 + b01 * a12 + b02 * a22;
  out[3] = b10 * a00 + b11 * a10 + b12 * a20;
  out[4] = b10 * a01 + b11 * a11 + b12 * a21;
  out[5] = b10 * a02 + b11 * a12 + b12 * a22;
  out[6] = b20 * a00 + b21 * a10 + b22 * a20;
  out[7] = b20 * a01 + b21 * a11 + b22 * a21;
  out[8] = b20 * a02 + b21 * a12 + b22 * a22;
  return out;
}
/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to translate
 * @param {vec2} v vector to translate by
 * @returns {mat3} out
 */

function translate(out, a, v) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a10 = a[3],
      a11 = a[4],
      a12 = a[5],
      a20 = a[6],
      a21 = a[7],
      a22 = a[8],
      x = v[0],
      y = v[1];
  out[0] = a00;
  out[1] = a01;
  out[2] = a02;
  out[3] = a10;
  out[4] = a11;
  out[5] = a12;
  out[6] = x * a00 + y * a10 + a20;
  out[7] = x * a01 + y * a11 + a21;
  out[8] = x * a02 + y * a12 + a22;
  return out;
}
/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */

function rotate(out, a, rad) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a10 = a[3],
      a11 = a[4],
      a12 = a[5],
      a20 = a[6],
      a21 = a[7],
      a22 = a[8],
      s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c * a00 + s * a10;
  out[1] = c * a01 + s * a11;
  out[2] = c * a02 + s * a12;
  out[3] = c * a10 - s * a00;
  out[4] = c * a11 - s * a01;
  out[5] = c * a12 - s * a02;
  out[6] = a20;
  out[7] = a21;
  out[8] = a22;
  return out;
}
;
/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/

function scale(out, a, v) {
  var x = v[0],
      y = v[1];
  out[0] = x * a[0];
  out[1] = x * a[1];
  out[2] = x * a[2];
  out[3] = y * a[3];
  out[4] = y * a[4];
  out[5] = y * a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.translate(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat3} out
 */

function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = v[0];
  out[7] = v[1];
  out[8] = 1;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.rotate(dest, dest, rad);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */

function fromRotation(out, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = -s;
  out[4] = c;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.scale(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat3} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = v[1];
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat2d} a the matrix to copy
 * @returns {mat3} out
 **/

function fromMat2d(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = 0;
  out[3] = a[2];
  out[4] = a[3];
  out[5] = 0;
  out[6] = a[4];
  out[7] = a[5];
  out[8] = 1;
  return out;
}
/**
* Calculates a 3x3 matrix from the given quaternion
*
* @param {mat3} out mat3 receiving operation result
* @param {quat} q Quaternion to create matrix from
*
* @returns {mat3} out
*/

function fromQuat(out, q) {
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[3] = yx - wz;
  out[6] = zx + wy;
  out[1] = yx + wz;
  out[4] = 1 - xx - zz;
  out[7] = zy - wx;
  out[2] = zx - wy;
  out[5] = zy + wx;
  out[8] = 1 - xx - yy;
  return out;
}
/**
* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
*
* @param {mat3} out mat3 receiving operation result
* @param {mat4} a Mat4 to derive the normal matrix from
*
* @returns {mat3} out
*/

function normalFromMat4(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  return out;
}
/**
 * Generates a 2D projection matrix with the given bounds
 *
 * @param {mat3} out mat3 frustum matrix will be written into
 * @param {number} width Width of your gl context
 * @param {number} height Height of gl context
 * @returns {mat3} out
 */

function projection(out, width, height) {
  out[0] = 2 / width;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = -2 / height;
  out[5] = 0;
  out[6] = -1;
  out[7] = 1;
  out[8] = 1;
  return out;
}
/**
 * Returns a string representation of a mat3
 *
 * @param {mat3} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str(a) {
  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';
}
/**
 * Returns Frobenius norm of a mat3
 *
 * @param {mat3} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob(a) {
  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));
}
/**
 * Adds two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat3} out
 */

function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  return out;
}
/**
 * Adds two mat3's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat3} out the receiving vector
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat3} out
 */

function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  out[6] = a[6] + b[6] * scale;
  out[7] = a[7] + b[7] * scale;
  out[8] = a[8] + b[8] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat3} a The first matrix.
 * @param {mat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat3} a The first matrix.
 * @param {mat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7],
      a8 = a[8];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7],
      b8 = b[8];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a8), Math.abs(b8));
}
/**
 * Alias for {@link mat3.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link mat3.subtract}
 * @function
 */

var sub = subtract;

/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/mat4.js":
/*!******************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/gl-matrix/esm/mat4.js ***!
  \******************************************************************************************************/
/*! exports provided: create, clone, copy, fromValues, set, identity, transpose, invert, adjoint, determinant, multiply, translate, scale, rotate, rotateX, rotateY, rotateZ, fromTranslation, fromScaling, fromRotation, fromXRotation, fromYRotation, fromZRotation, fromRotationTranslation, fromQuat2, getTranslation, getScaling, getRotation, fromRotationTranslationScale, fromRotationTranslationScaleOrigin, fromQuat, frustum, perspective, perspectiveFromFieldOfView, ortho, lookAt, targetTo, str, frob, add, subtract, multiplyScalar, multiplyScalarAndAdd, exactEquals, equals, mul, sub */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return identity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transpose", function() { return transpose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invert", function() { return invert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "adjoint", function() { return adjoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "determinant", function() { return determinant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translate", function() { return translate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateX", function() { return rotateX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateY", function() { return rotateY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateZ", function() { return rotateZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromTranslation", function() { return fromTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromScaling", function() { return fromScaling; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotation", function() { return fromRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromXRotation", function() { return fromXRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromYRotation", function() { return fromYRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromZRotation", function() { return fromZRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotationTranslation", function() { return fromRotationTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromQuat2", function() { return fromQuat2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTranslation", function() { return getTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getScaling", function() { return getScaling; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRotation", function() { return getRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotationTranslationScale", function() { return fromRotationTranslationScale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotationTranslationScaleOrigin", function() { return fromRotationTranslationScaleOrigin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromQuat", function() { return fromQuat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "frustum", function() { return frustum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "perspective", function() { return perspective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "perspectiveFromFieldOfView", function() { return perspectiveFromFieldOfView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ortho", function() { return ortho; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lookAt", function() { return lookAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "targetTo", function() { return targetTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "frob", function() { return frob; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtract", function() { return subtract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyScalar", function() { return multiplyScalar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyScalarAndAdd", function() { return multiplyScalarAndAdd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/common.js");

/**
 * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.
 * @module mat4
 */

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](16);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
  }

  out[0] = 1;
  out[5] = 1;
  out[10] = 1;
  out[15] = 1;
  return out;
}
/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](16);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Create a new mat4 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} A new mat4
 */

function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](16);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
/**
 * Set the components of a mat4 to the given values
 *
 * @param {mat4} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} out
 */

function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */

function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */

function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    var a01 = a[1],
        a02 = a[2],
        a03 = a[3];
    var a12 = a[6],
        a13 = a[7];
    var a23 = a[11];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a01;
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a02;
    out[9] = a12;
    out[11] = a[14];
    out[12] = a03;
    out[13] = a13;
    out[14] = a23;
  } else {
    out[0] = a[0];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a[1];
    out[5] = a[5];
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a[2];
    out[9] = a[6];
    out[10] = a[10];
    out[11] = a[14];
    out[12] = a[3];
    out[13] = a[7];
    out[14] = a[11];
    out[15] = a[15];
  }

  return out;
}
/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */

function invert(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
  return out;
}
/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */

function adjoint(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
  return out;
}
/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant(a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
}
/**
 * Multiplies two mat4s
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */

function multiply(out, a, b) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15]; // Cache only the current line of the second matrix

  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[4];
  b1 = b[5];
  b2 = b[6];
  b3 = b[7];
  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[8];
  b1 = b[9];
  b2 = b[10];
  b3 = b[11];
  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[12];
  b1 = b[13];
  b2 = b[14];
  b3 = b[15];
  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  return out;
}
/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */

function translate(out, a, v) {
  var x = v[0],
      y = v[1],
      z = v[2];
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;

  if (a === out) {
    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
  } else {
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a03;
    out[4] = a10;
    out[5] = a11;
    out[6] = a12;
    out[7] = a13;
    out[8] = a20;
    out[9] = a21;
    out[10] = a22;
    out[11] = a23;
    out[12] = a00 * x + a10 * y + a20 * z + a[12];
    out[13] = a01 * x + a11 * y + a21 * z + a[13];
    out[14] = a02 * x + a12 * y + a22 * z + a[14];
    out[15] = a03 * x + a13 * y + a23 * z + a[15];
  }

  return out;
}
/**
 * Scales the mat4 by the dimensions in the given vec3 not using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/

function scale(out, a, v) {
  var x = v[0],
      y = v[1],
      z = v[2];
  out[0] = a[0] * x;
  out[1] = a[1] * x;
  out[2] = a[2] * x;
  out[3] = a[3] * x;
  out[4] = a[4] * y;
  out[5] = a[5] * y;
  out[6] = a[6] * y;
  out[7] = a[7] * y;
  out[8] = a[8] * z;
  out[9] = a[9] * z;
  out[10] = a[10] * z;
  out[11] = a[11] * z;
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Rotates a mat4 by the given angle around the given axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */

function rotate(out, a, rad, axis) {
  var x = axis[0],
      y = axis[1],
      z = axis[2];
  var len = Math.sqrt(x * x + y * y + z * z);
  var s, c, t;
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;
  var b00, b01, b02;
  var b10, b11, b12;
  var b20, b21, b22;

  if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"]) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;
  a00 = a[0];
  a01 = a[1];
  a02 = a[2];
  a03 = a[3];
  a10 = a[4];
  a11 = a[5];
  a12 = a[6];
  a13 = a[7];
  a20 = a[8];
  a21 = a[9];
  a22 = a[10];
  a23 = a[11]; // Construct the elements of the rotation matrix

  b00 = x * x * t + c;
  b01 = y * x * t + z * s;
  b02 = z * x * t - y * s;
  b10 = x * y * t - z * s;
  b11 = y * y * t + c;
  b12 = z * y * t + x * s;
  b20 = x * z * t + y * s;
  b21 = y * z * t - x * s;
  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication

  out[0] = a00 * b00 + a10 * b01 + a20 * b02;
  out[1] = a01 * b00 + a11 * b01 + a21 * b02;
  out[2] = a02 * b00 + a12 * b01 + a22 * b02;
  out[3] = a03 * b00 + a13 * b01 + a23 * b02;
  out[4] = a00 * b10 + a10 * b11 + a20 * b12;
  out[5] = a01 * b10 + a11 * b11 + a21 * b12;
  out[6] = a02 * b10 + a12 * b11 + a22 * b12;
  out[7] = a03 * b10 + a13 * b11 + a23 * b12;
  out[8] = a00 * b20 + a10 * b21 + a20 * b22;
  out[9] = a01 * b20 + a11 * b21 + a21 * b22;
  out[10] = a02 * b20 + a12 * b21 + a22 * b22;
  out[11] = a03 * b20 + a13 * b21 + a23 * b22;

  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }

  return out;
}
/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateX(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[4] = a10 * c + a20 * s;
  out[5] = a11 * c + a21 * s;
  out[6] = a12 * c + a22 * s;
  out[7] = a13 * c + a23 * s;
  out[8] = a20 * c - a10 * s;
  out[9] = a21 * c - a11 * s;
  out[10] = a22 * c - a12 * s;
  out[11] = a23 * c - a13 * s;
  return out;
}
/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateY(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[0] = a00 * c - a20 * s;
  out[1] = a01 * c - a21 * s;
  out[2] = a02 * c - a22 * s;
  out[3] = a03 * c - a23 * s;
  out[8] = a00 * s + a20 * c;
  out[9] = a01 * s + a21 * c;
  out[10] = a02 * s + a22 * c;
  out[11] = a03 * s + a23 * c;
  return out;
}
/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateZ(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[0] = a00 * c + a10 * s;
  out[1] = a01 * c + a11 * s;
  out[2] = a02 * c + a12 * s;
  out[3] = a03 * c + a13 * s;
  out[4] = a10 * c - a00 * s;
  out[5] = a11 * c - a01 * s;
  out[6] = a12 * c - a02 * s;
  out[7] = a13 * c - a03 * s;
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */

function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.scale(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Scaling vector
 * @returns {mat4} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = v[1];
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = v[2];
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotate(dest, dest, rad, axis);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */

function fromRotation(out, rad, axis) {
  var x = axis[0],
      y = axis[1],
      z = axis[2];
  var len = Math.sqrt(x * x + y * y + z * z);
  var s, c, t;

  if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"]) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c; // Perform rotation-specific matrix multiplication

  out[0] = x * x * t + c;
  out[1] = y * x * t + z * s;
  out[2] = z * x * t - y * s;
  out[3] = 0;
  out[4] = x * y * t - z * s;
  out[5] = y * y * t + c;
  out[6] = z * y * t + x * s;
  out[7] = 0;
  out[8] = x * z * t + y * s;
  out[9] = y * z * t - x * s;
  out[10] = z * z * t + c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateX(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromXRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = c;
  out[6] = s;
  out[7] = 0;
  out[8] = 0;
  out[9] = -s;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateY(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromYRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = c;
  out[1] = 0;
  out[2] = -s;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = s;
  out[9] = 0;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateZ(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromZRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = 0;
  out[4] = -s;
  out[5] = c;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */

function fromRotationTranslation(out, q, v) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - (yy + zz);
  out[1] = xy + wz;
  out[2] = xz - wy;
  out[3] = 0;
  out[4] = xy - wz;
  out[5] = 1 - (xx + zz);
  out[6] = yz + wx;
  out[7] = 0;
  out[8] = xz + wy;
  out[9] = yz - wx;
  out[10] = 1 - (xx + yy);
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a new mat4 from a dual quat.
 *
 * @param {mat4} out Matrix
 * @param {quat2} a Dual Quaternion
 * @returns {mat4} mat4 receiving operation result
 */

function fromQuat2(out, a) {
  var translation = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](3);
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7];
  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense

  if (magnitude > 0) {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
  } else {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
  }

  fromRotationTranslation(out, a, translation);
  return out;
}
/**
 * Returns the translation vector component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslation,
 *  the returned vector will be the same as the translation vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive translation component
 * @param  {mat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */

function getTranslation(out, mat) {
  out[0] = mat[12];
  out[1] = mat[13];
  out[2] = mat[14];
  return out;
}
/**
 * Returns the scaling factor component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslationScale
 *  with a normalized Quaternion paramter, the returned vector will be
 *  the same as the scaling vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive scaling factor component
 * @param  {mat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */

function getScaling(out, mat) {
  var m11 = mat[0];
  var m12 = mat[1];
  var m13 = mat[2];
  var m21 = mat[4];
  var m22 = mat[5];
  var m23 = mat[6];
  var m31 = mat[8];
  var m32 = mat[9];
  var m33 = mat[10];
  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);
  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);
  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);
  return out;
}
/**
 * Returns a quaternion representing the rotational component
 *  of a transformation matrix. If a matrix is built with
 *  fromRotationTranslation, the returned quaternion will be the
 *  same as the quaternion originally supplied.
 * @param {quat} out Quaternion to receive the rotation component
 * @param {mat4} mat Matrix to be decomposed (input)
 * @return {quat} out
 */

function getRotation(out, mat) {
  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
  var trace = mat[0] + mat[5] + mat[10];
  var S = 0;

  if (trace > 0) {
    S = Math.sqrt(trace + 1.0) * 2;
    out[3] = 0.25 * S;
    out[0] = (mat[6] - mat[9]) / S;
    out[1] = (mat[8] - mat[2]) / S;
    out[2] = (mat[1] - mat[4]) / S;
  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {
    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;
    out[3] = (mat[6] - mat[9]) / S;
    out[0] = 0.25 * S;
    out[1] = (mat[1] + mat[4]) / S;
    out[2] = (mat[8] + mat[2]) / S;
  } else if (mat[5] > mat[10]) {
    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;
    out[3] = (mat[8] - mat[2]) / S;
    out[0] = (mat[1] + mat[4]) / S;
    out[1] = 0.25 * S;
    out[2] = (mat[6] + mat[9]) / S;
  } else {
    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;
    out[3] = (mat[1] - mat[4]) / S;
    out[0] = (mat[8] + mat[2]) / S;
    out[1] = (mat[6] + mat[9]) / S;
    out[2] = 0.25 * S;
  }

  return out;
}
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @returns {mat4} out
 */

function fromRotationTranslationScale(out, q, v, s) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     mat4.translate(dest, origin);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *     mat4.translate(dest, negativeOrigin);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @param {vec3} o The origin vector around which to scale and rotate
 * @returns {mat4} out
 */

function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  var ox = o[0];
  var oy = o[1];
  var oz = o[2];
  var out0 = (1 - (yy + zz)) * sx;
  var out1 = (xy + wz) * sx;
  var out2 = (xz - wy) * sx;
  var out4 = (xy - wz) * sy;
  var out5 = (1 - (xx + zz)) * sy;
  var out6 = (yz + wx) * sy;
  var out8 = (xz + wy) * sz;
  var out9 = (yz - wx) * sz;
  var out10 = (1 - (xx + yy)) * sz;
  out[0] = out0;
  out[1] = out1;
  out[2] = out2;
  out[3] = 0;
  out[4] = out4;
  out[5] = out5;
  out[6] = out6;
  out[7] = 0;
  out[8] = out8;
  out[9] = out9;
  out[10] = out10;
  out[11] = 0;
  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
  out[15] = 1;
  return out;
}
/**
 * Calculates a 4x4 matrix from the given quaternion
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat} q Quaternion to create matrix from
 *
 * @returns {mat4} out
 */

function fromQuat(out, q) {
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[1] = yx + wz;
  out[2] = zx - wy;
  out[3] = 0;
  out[4] = yx - wz;
  out[5] = 1 - xx - zz;
  out[6] = zy + wx;
  out[7] = 0;
  out[8] = zx + wy;
  out[9] = zy - wx;
  out[10] = 1 - xx - yy;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */

function frustum(out, left, right, bottom, top, near, far) {
  var rl = 1 / (right - left);
  var tb = 1 / (top - bottom);
  var nf = 1 / (near - far);
  out[0] = near * 2 * rl;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = near * 2 * tb;
  out[6] = 0;
  out[7] = 0;
  out[8] = (right + left) * rl;
  out[9] = (top + bottom) * tb;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = far * near * 2 * nf;
  out[15] = 0;
  return out;
}
/**
 * Generates a perspective projection matrix with the given bounds.
 * Passing null/undefined/no value for far will generate infinite projection matrix.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum, can be null or Infinity
 * @returns {mat4} out
 */

function perspective(out, fovy, aspect, near, far) {
  var f = 1.0 / Math.tan(fovy / 2),
      nf;
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;

  if (far != null && far !== Infinity) {
    nf = 1 / (near - far);
    out[10] = (far + near) * nf;
    out[14] = 2 * far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -2 * near;
  }

  return out;
}
/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function perspectiveFromFieldOfView(out, fov, near, far) {
  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);
  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);
  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);
  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);
  var xScale = 2.0 / (leftTan + rightTan);
  var yScale = 2.0 / (upTan + downTan);
  out[0] = xScale;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  out[4] = 0.0;
  out[5] = yScale;
  out[6] = 0.0;
  out[7] = 0.0;
  out[8] = -((leftTan - rightTan) * xScale * 0.5);
  out[9] = (upTan - downTan) * yScale * 0.5;
  out[10] = far / (near - far);
  out[11] = -1.0;
  out[12] = 0.0;
  out[13] = 0.0;
  out[14] = far * near / (near - far);
  out[15] = 0.0;
  return out;
}
/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function ortho(out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right);
  var bt = 1 / (bottom - top);
  var nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 2 * nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = (far + near) * nf;
  out[15] = 1;
  return out;
}
/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis.
 * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */

function lookAt(out, eye, center, up) {
  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
  var eyex = eye[0];
  var eyey = eye[1];
  var eyez = eye[2];
  var upx = up[0];
  var upy = up[1];
  var upz = up[2];
  var centerx = center[0];
  var centery = center[1];
  var centerz = center[2];

  if (Math.abs(eyex - centerx) < _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] && Math.abs(eyey - centery) < _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] && Math.abs(eyez - centerz) < _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"]) {
    return identity(out);
  }

  z0 = eyex - centerx;
  z1 = eyey - centery;
  z2 = eyez - centerz;
  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
  z0 *= len;
  z1 *= len;
  z2 *= len;
  x0 = upy * z2 - upz * z1;
  x1 = upz * z0 - upx * z2;
  x2 = upx * z1 - upy * z0;
  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);

  if (!len) {
    x0 = 0;
    x1 = 0;
    x2 = 0;
  } else {
    len = 1 / len;
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  y0 = z1 * x2 - z2 * x1;
  y1 = z2 * x0 - z0 * x2;
  y2 = z0 * x1 - z1 * x0;
  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);

  if (!len) {
    y0 = 0;
    y1 = 0;
    y2 = 0;
  } else {
    len = 1 / len;
    y0 *= len;
    y1 *= len;
    y2 *= len;
  }

  out[0] = x0;
  out[1] = y0;
  out[2] = z0;
  out[3] = 0;
  out[4] = x1;
  out[5] = y1;
  out[6] = z1;
  out[7] = 0;
  out[8] = x2;
  out[9] = y2;
  out[10] = z2;
  out[11] = 0;
  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
  out[15] = 1;
  return out;
}
/**
 * Generates a matrix that makes something look at something else.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */

function targetTo(out, eye, target, up) {
  var eyex = eye[0],
      eyey = eye[1],
      eyez = eye[2],
      upx = up[0],
      upy = up[1],
      upz = up[2];
  var z0 = eyex - target[0],
      z1 = eyey - target[1],
      z2 = eyez - target[2];
  var len = z0 * z0 + z1 * z1 + z2 * z2;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
    z0 *= len;
    z1 *= len;
    z2 *= len;
  }

  var x0 = upy * z2 - upz * z1,
      x1 = upz * z0 - upx * z2,
      x2 = upx * z1 - upy * z0;
  len = x0 * x0 + x1 * x1 + x2 * x2;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  out[0] = x0;
  out[1] = x1;
  out[2] = x2;
  out[3] = 0;
  out[4] = z1 * x2 - z2 * x1;
  out[5] = z2 * x0 - z0 * x2;
  out[6] = z0 * x1 - z1 * x0;
  out[7] = 0;
  out[8] = z0;
  out[9] = z1;
  out[10] = z2;
  out[11] = 0;
  out[12] = eyex;
  out[13] = eyey;
  out[14] = eyez;
  out[15] = 1;
  return out;
}
;
/**
 * Returns a string representation of a mat4
 *
 * @param {mat4} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str(a) {
  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
}
/**
 * Returns Frobenius norm of a mat4
 *
 * @param {mat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob(a) {
  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));
}
/**
 * Adds two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  out[9] = a[9] + b[9];
  out[10] = a[10] + b[10];
  out[11] = a[11] + b[11];
  out[12] = a[12] + b[12];
  out[13] = a[13] + b[13];
  out[14] = a[14] + b[14];
  out[15] = a[15] + b[15];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  out[9] = a[9] - b[9];
  out[10] = a[10] - b[10];
  out[11] = a[11] - b[11];
  out[12] = a[12] - b[12];
  out[13] = a[13] - b[13];
  out[14] = a[14] - b[14];
  out[15] = a[15] - b[15];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat4} out
 */

function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  out[9] = a[9] * b;
  out[10] = a[10] * b;
  out[11] = a[11] * b;
  out[12] = a[12] * b;
  out[13] = a[13] * b;
  out[14] = a[14] * b;
  out[15] = a[15] * b;
  return out;
}
/**
 * Adds two mat4's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat4} out the receiving vector
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat4} out
 */

function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  out[6] = a[6] + b[6] * scale;
  out[7] = a[7] + b[7] * scale;
  out[8] = a[8] + b[8] * scale;
  out[9] = a[9] + b[9] * scale;
  out[10] = a[10] + b[10] * scale;
  out[11] = a[11] + b[11] * scale;
  out[12] = a[12] + b[12] * scale;
  out[13] = a[13] + b[13] * scale;
  out[14] = a[14] + b[14] * scale;
  out[15] = a[15] + b[15] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat4} a The first matrix.
 * @param {mat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat4} a The first matrix.
 * @param {mat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7];
  var a8 = a[8],
      a9 = a[9],
      a10 = a[10],
      a11 = a[11];
  var a12 = a[12],
      a13 = a[13],
      a14 = a[14],
      a15 = a[15];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  var b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7];
  var b8 = b[8],
      b9 = b[9],
      b10 = b[10],
      b11 = b[11];
  var b12 = b[12],
      b13 = b[13],
      b14 = b[14],
      b15 = b[15];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a15), Math.abs(b15));
}
/**
 * Alias for {@link mat4.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link mat4.subtract}
 * @function
 */

var sub = subtract;

/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/quat.js":
/*!******************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/gl-matrix/esm/quat.js ***!
  \******************************************************************************************************/
/*! exports provided: create, identity, setAxisAngle, getAxisAngle, multiply, rotateX, rotateY, rotateZ, calculateW, slerp, random, invert, conjugate, fromMat3, fromEuler, str, clone, fromValues, copy, set, add, mul, scale, dot, lerp, length, len, squaredLength, sqrLen, normalize, exactEquals, equals, rotationTo, sqlerp, setAxes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return identity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setAxisAngle", function() { return setAxisAngle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAxisAngle", function() { return getAxisAngle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateX", function() { return rotateX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateY", function() { return rotateY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateZ", function() { return rotateZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "calculateW", function() { return calculateW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "slerp", function() { return slerp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "random", function() { return random; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invert", function() { return invert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "conjugate", function() { return conjugate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromMat3", function() { return fromMat3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromEuler", function() { return fromEuler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return dot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lerp", function() { return lerp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "length", function() { return length; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "len", function() { return len; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredLength", function() { return squaredLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrLen", function() { return sqrLen; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalize", function() { return normalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotationTo", function() { return rotationTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqlerp", function() { return sqlerp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setAxes", function() { return setAxes; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/common.js");
/* harmony import */ var _mat3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mat3.js */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/mat3.js");
/* harmony import */ var _vec3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vec3.js */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/vec3.js");
/* harmony import */ var _vec4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vec4.js */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/vec4.js");




/**
 * Quaternion
 * @module quat
 */

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](4);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }

  out[3] = 1;
  return out;
}
/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */

function identity(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}
/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {vec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/

function setAxisAngle(out, axis, rad) {
  rad = rad * 0.5;
  var s = Math.sin(rad);
  out[0] = s * axis[0];
  out[1] = s * axis[1];
  out[2] = s * axis[2];
  out[3] = Math.cos(rad);
  return out;
}
/**
 * Gets the rotation axis and angle for a given
 *  quaternion. If a quaternion is created with
 *  setAxisAngle, this method will return the same
 *  values as providied in the original parameter list
 *  OR functionally equivalent values.
 * Example: The quaternion formed by axis [0, 0, 1] and
 *  angle -90 is the same as the quaternion formed by
 *  [0, 0, 1] and 270. This method favors the latter.
 * @param  {vec3} out_axis  Vector receiving the axis of rotation
 * @param  {quat} q     Quaternion to be decomposed
 * @return {Number}     Angle, in radians, of the rotation
 */

function getAxisAngle(out_axis, q) {
  var rad = Math.acos(q[3]) * 2.0;
  var s = Math.sin(rad / 2.0);

  if (s > _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"]) {
    out_axis[0] = q[0] / s;
    out_axis[1] = q[1] / s;
    out_axis[2] = q[2] / s;
  } else {
    // If s is zero, return any axis (no rotation - axis does not matter)
    out_axis[0] = 1;
    out_axis[1] = 0;
    out_axis[2] = 0;
  }

  return rad;
}
/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 */

function multiply(out, a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = b[0],
      by = b[1],
      bz = b[2],
      bw = b[3];
  out[0] = ax * bw + aw * bx + ay * bz - az * by;
  out[1] = ay * bw + aw * by + az * bx - ax * bz;
  out[2] = az * bw + aw * bz + ax * by - ay * bx;
  out[3] = aw * bw - ax * bx - ay * by - az * bz;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function rotateX(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = Math.sin(rad),
      bw = Math.cos(rad);
  out[0] = ax * bw + aw * bx;
  out[1] = ay * bw + az * bx;
  out[2] = az * bw - ay * bx;
  out[3] = aw * bw - ax * bx;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function rotateY(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var by = Math.sin(rad),
      bw = Math.cos(rad);
  out[0] = ax * bw - az * by;
  out[1] = ay * bw + aw * by;
  out[2] = az * bw + ax * by;
  out[3] = aw * bw - ay * by;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function rotateZ(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bz = Math.sin(rad),
      bw = Math.cos(rad);
  out[0] = ax * bw + ay * bz;
  out[1] = ay * bw - ax * bz;
  out[2] = az * bw + aw * bz;
  out[3] = aw * bw - az * bz;
  return out;
}
/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate W component of
 * @returns {quat} out
 */

function calculateW(out, a) {
  var x = a[0],
      y = a[1],
      z = a[2];
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
  return out;
}
/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */

function slerp(out, a, b, t) {
  // benchmarks:
  //    http://jsperf.com/quaternion-slerp-implementations
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = b[0],
      by = b[1],
      bz = b[2],
      bw = b[3];
  var omega, cosom, sinom, scale0, scale1; // calc cosine

  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)

  if (cosom < 0.0) {
    cosom = -cosom;
    bx = -bx;
    by = -by;
    bz = -bz;
    bw = -bw;
  } // calculate coefficients


  if (1.0 - cosom > _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"]) {
    // standard case (slerp)
    omega = Math.acos(cosom);
    sinom = Math.sin(omega);
    scale0 = Math.sin((1.0 - t) * omega) / sinom;
    scale1 = Math.sin(t * omega) / sinom;
  } else {
    // "from" and "to" quaternions are very close
    //  ... so we can do a linear interpolation
    scale0 = 1.0 - t;
    scale1 = t;
  } // calculate final values


  out[0] = scale0 * ax + scale1 * bx;
  out[1] = scale0 * ay + scale1 * by;
  out[2] = scale0 * az + scale1 * bz;
  out[3] = scale0 * aw + scale1 * bw;
  return out;
}
/**
 * Generates a random quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */

function random(out) {
  // Implementation of http://planning.cs.uiuc.edu/node198.html
  // TODO: Calling random 3 times is probably not the fastest solution
  var u1 = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]();
  var u2 = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]();
  var u3 = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]();
  var sqrt1MinusU1 = Math.sqrt(1 - u1);
  var sqrtU1 = Math.sqrt(u1);
  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);
  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);
  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);
  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);
  return out;
}
/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate inverse of
 * @returns {quat} out
 */

function invert(out, a) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

  out[0] = -a0 * invDot;
  out[1] = -a1 * invDot;
  out[2] = -a2 * invDot;
  out[3] = a3 * invDot;
  return out;
}
/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate conjugate of
 * @returns {quat} out
 */

function conjugate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a[3];
  return out;
}
/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {mat3} m rotation matrix
 * @returns {quat} out
 * @function
 */

function fromMat3(out, m) {
  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
  // article "Quaternion Calculus and Fast Animation".
  var fTrace = m[0] + m[4] + m[8];
  var fRoot;

  if (fTrace > 0.0) {
    // |w| > 1/2, may as well choose w > 1/2
    fRoot = Math.sqrt(fTrace + 1.0); // 2w

    out[3] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot; // 1/(4w)

    out[0] = (m[5] - m[7]) * fRoot;
    out[1] = (m[6] - m[2]) * fRoot;
    out[2] = (m[1] - m[3]) * fRoot;
  } else {
    // |w| <= 1/2
    var i = 0;
    if (m[4] > m[0]) i = 1;
    if (m[8] > m[i * 3 + i]) i = 2;
    var j = (i + 1) % 3;
    var k = (i + 2) % 3;
    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
    out[i] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
  }

  return out;
}
/**
 * Creates a quaternion from the given euler angle x, y, z.
 *
 * @param {quat} out the receiving quaternion
 * @param {x} Angle to rotate around X axis in degrees.
 * @param {y} Angle to rotate around Y axis in degrees.
 * @param {z} Angle to rotate around Z axis in degrees.
 * @returns {quat} out
 * @function
 */

function fromEuler(out, x, y, z) {
  var halfToRad = 0.5 * Math.PI / 180.0;
  x *= halfToRad;
  y *= halfToRad;
  z *= halfToRad;
  var sx = Math.sin(x);
  var cx = Math.cos(x);
  var sy = Math.sin(y);
  var cy = Math.cos(y);
  var sz = Math.sin(z);
  var cz = Math.cos(z);
  out[0] = sx * cy * cz - cx * sy * sz;
  out[1] = cx * sy * cz + sx * cy * sz;
  out[2] = cx * cy * sz - sx * sy * cz;
  out[3] = cx * cy * cz + sx * sy * sz;
  return out;
}
/**
 * Returns a string representation of a quatenion
 *
 * @param {quat} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function str(a) {
  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
}
/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {quat} a quaternion to clone
 * @returns {quat} a new quaternion
 * @function
 */

var clone = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["clone"];
/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */

var fromValues = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["fromValues"];
/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the source quaternion
 * @returns {quat} out
 * @function
 */

var copy = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["copy"];
/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */

var set = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["set"];
/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 * @function
 */

var add = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["add"];
/**
 * Alias for {@link quat.multiply}
 * @function
 */

var mul = multiply;
/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {quat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */

var scale = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["scale"];
/**
 * Calculates the dot product of two quat's
 *
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */

var dot = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["dot"];
/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 * @function
 */

var lerp = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["lerp"];
/**
 * Calculates the length of a quat
 *
 * @param {quat} a vector to calculate length of
 * @returns {Number} length of a
 */

var length = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["length"];
/**
 * Alias for {@link quat.length}
 * @function
 */

var len = length;
/**
 * Calculates the squared length of a quat
 *
 * @param {quat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */

var squaredLength = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["squaredLength"];
/**
 * Alias for {@link quat.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */

var normalize = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["normalize"];
/**
 * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {quat} a The first quaternion.
 * @param {quat} b The second quaternion.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

var exactEquals = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["exactEquals"];
/**
 * Returns whether or not the quaternions have approximately the same elements in the same position.
 *
 * @param {quat} a The first vector.
 * @param {quat} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

var equals = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["equals"];
/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {vec3} a the initial vector
 * @param {vec3} b the destination vector
 * @returns {quat} out
 */

var rotationTo = function () {
  var tmpvec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__["create"]();
  var xUnitVec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__["fromValues"](1, 0, 0);
  var yUnitVec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__["fromValues"](0, 1, 0);
  return function (out, a, b) {
    var dot = _vec3_js__WEBPACK_IMPORTED_MODULE_2__["dot"](a, b);

    if (dot < -0.999999) {
      _vec3_js__WEBPACK_IMPORTED_MODULE_2__["cross"](tmpvec3, xUnitVec3, a);
      if (_vec3_js__WEBPACK_IMPORTED_MODULE_2__["len"](tmpvec3) < 0.000001) _vec3_js__WEBPACK_IMPORTED_MODULE_2__["cross"](tmpvec3, yUnitVec3, a);
      _vec3_js__WEBPACK_IMPORTED_MODULE_2__["normalize"](tmpvec3, tmpvec3);
      setAxisAngle(out, tmpvec3, Math.PI);
      return out;
    } else if (dot > 0.999999) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    } else {
      _vec3_js__WEBPACK_IMPORTED_MODULE_2__["cross"](tmpvec3, a, b);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot;
      return normalize(out, out);
    }
  };
}();
/**
 * Performs a spherical linear interpolation with two control points
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {quat} c the third operand
 * @param {quat} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */

var sqlerp = function () {
  var temp1 = create();
  var temp2 = create();
  return function (out, a, b, c, d, t) {
    slerp(temp1, a, d, t);
    slerp(temp2, b, c, t);
    slerp(out, temp1, temp2, 2 * t * (1 - t));
    return out;
  };
}();
/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {vec3} view  the vector representing the viewing direction
 * @param {vec3} right the vector representing the local "right" direction
 * @param {vec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */

var setAxes = function () {
  var matr = _mat3_js__WEBPACK_IMPORTED_MODULE_1__["create"]();
  return function (out, view, right, up) {
    matr[0] = right[0];
    matr[3] = right[1];
    matr[6] = right[2];
    matr[1] = up[0];
    matr[4] = up[1];
    matr[7] = up[2];
    matr[2] = -view[0];
    matr[5] = -view[1];
    matr[8] = -view[2];
    return normalize(out, fromMat3(out, matr));
  };
}();

/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/quat2.js":
/*!*******************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/gl-matrix/esm/quat2.js ***!
  \*******************************************************************************************************/
/*! exports provided: create, clone, fromValues, fromRotationTranslationValues, fromRotationTranslation, fromTranslation, fromRotation, fromMat4, copy, identity, set, getReal, getDual, setReal, setDual, getTranslation, translate, rotateX, rotateY, rotateZ, rotateByQuatAppend, rotateByQuatPrepend, rotateAroundAxis, add, multiply, mul, scale, dot, lerp, invert, conjugate, length, len, squaredLength, sqrLen, normalize, str, exactEquals, equals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotationTranslationValues", function() { return fromRotationTranslationValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotationTranslation", function() { return fromRotationTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromTranslation", function() { return fromTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotation", function() { return fromRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromMat4", function() { return fromMat4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return identity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getReal", function() { return getReal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDual", function() { return getDual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setReal", function() { return setReal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setDual", function() { return setDual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTranslation", function() { return getTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translate", function() { return translate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateX", function() { return rotateX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateY", function() { return rotateY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateZ", function() { return rotateZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateByQuatAppend", function() { return rotateByQuatAppend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateByQuatPrepend", function() { return rotateByQuatPrepend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateAroundAxis", function() { return rotateAroundAxis; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return dot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lerp", function() { return lerp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invert", function() { return invert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "conjugate", function() { return conjugate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "length", function() { return length; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "len", function() { return len; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredLength", function() { return squaredLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrLen", function() { return sqrLen; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalize", function() { return normalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/common.js");
/* harmony import */ var _quat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./quat.js */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/quat.js");
/* harmony import */ var _mat4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mat4.js */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/mat4.js");



/**
 * Dual Quaternion<br>
 * Format: [real, dual]<br>
 * Quaternion format: XYZW<br>
 * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>
 * @module quat2
 */

/**
 * Creates a new identity dual quat
 *
 * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]
 */

function create() {
  var dq = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](8);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    dq[0] = 0;
    dq[1] = 0;
    dq[2] = 0;
    dq[4] = 0;
    dq[5] = 0;
    dq[6] = 0;
    dq[7] = 0;
  }

  dq[3] = 1;
  return dq;
}
/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {quat2} a dual quaternion to clone
 * @returns {quat2} new dual quaternion
 * @function
 */

function clone(a) {
  var dq = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](8);
  dq[0] = a[0];
  dq[1] = a[1];
  dq[2] = a[2];
  dq[3] = a[3];
  dq[4] = a[4];
  dq[5] = a[5];
  dq[6] = a[6];
  dq[7] = a[7];
  return dq;
}
/**
 * Creates a new dual quat initialized with the given values
 *
 * @param {Number} x1 X component
 * @param {Number} y1 Y component
 * @param {Number} z1 Z component
 * @param {Number} w1 W component
 * @param {Number} x2 X component
 * @param {Number} y2 Y component
 * @param {Number} z2 Z component
 * @param {Number} w2 W component
 * @returns {quat2} new dual quaternion
 * @function
 */

function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {
  var dq = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](8);
  dq[0] = x1;
  dq[1] = y1;
  dq[2] = z1;
  dq[3] = w1;
  dq[4] = x2;
  dq[5] = y2;
  dq[6] = z2;
  dq[7] = w2;
  return dq;
}
/**
 * Creates a new dual quat from the given values (quat and translation)
 *
 * @param {Number} x1 X component
 * @param {Number} y1 Y component
 * @param {Number} z1 Z component
 * @param {Number} w1 W component
 * @param {Number} x2 X component (translation)
 * @param {Number} y2 Y component (translation)
 * @param {Number} z2 Z component (translation)
 * @returns {quat2} new dual quaternion
 * @function
 */

function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {
  var dq = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](8);
  dq[0] = x1;
  dq[1] = y1;
  dq[2] = z1;
  dq[3] = w1;
  var ax = x2 * 0.5,
      ay = y2 * 0.5,
      az = z2 * 0.5;
  dq[4] = ax * w1 + ay * z1 - az * y1;
  dq[5] = ay * w1 + az * x1 - ax * z1;
  dq[6] = az * w1 + ax * y1 - ay * x1;
  dq[7] = -ax * x1 - ay * y1 - az * z1;
  return dq;
}
/**
 * Creates a dual quat from a quaternion and a translation
 *
 * @param {quat2} dual quaternion receiving operation result
 * @param {quat} q quaternion
 * @param {vec3} t tranlation vector
 * @returns {quat2} dual quaternion receiving operation result
 * @function
 */

function fromRotationTranslation(out, q, t) {
  var ax = t[0] * 0.5,
      ay = t[1] * 0.5,
      az = t[2] * 0.5,
      bx = q[0],
      by = q[1],
      bz = q[2],
      bw = q[3];
  out[0] = bx;
  out[1] = by;
  out[2] = bz;
  out[3] = bw;
  out[4] = ax * bw + ay * bz - az * by;
  out[5] = ay * bw + az * bx - ax * bz;
  out[6] = az * bw + ax * by - ay * bx;
  out[7] = -ax * bx - ay * by - az * bz;
  return out;
}
/**
 * Creates a dual quat from a translation
 *
 * @param {quat2} dual quaternion receiving operation result
 * @param {vec3} t translation vector
 * @returns {quat2} dual quaternion receiving operation result
 * @function
 */

function fromTranslation(out, t) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = t[0] * 0.5;
  out[5] = t[1] * 0.5;
  out[6] = t[2] * 0.5;
  out[7] = 0;
  return out;
}
/**
 * Creates a dual quat from a quaternion
 *
 * @param {quat2} dual quaternion receiving operation result
 * @param {quat} q the quaternion
 * @returns {quat2} dual quaternion receiving operation result
 * @function
 */

function fromRotation(out, q) {
  out[0] = q[0];
  out[1] = q[1];
  out[2] = q[2];
  out[3] = q[3];
  out[4] = 0;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  return out;
}
/**
 * Creates a new dual quat from a matrix (4x4)
 *
 * @param {quat2} out the dual quaternion
 * @param {mat4} a the matrix
 * @returns {quat2} dual quat receiving operation result
 * @function
 */

function fromMat4(out, a) {
  //TODO Optimize this
  var outer = _quat_js__WEBPACK_IMPORTED_MODULE_1__["create"]();
  _mat4_js__WEBPACK_IMPORTED_MODULE_2__["getRotation"](outer, a);
  var t = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](3);
  _mat4_js__WEBPACK_IMPORTED_MODULE_2__["getTranslation"](t, a);
  fromRotationTranslation(out, outer, t);
  return out;
}
/**
 * Copy the values from one dual quat to another
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the source dual quaternion
 * @returns {quat2} out
 * @function
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  return out;
}
/**
 * Set a dual quat to the identity dual quaternion
 *
 * @param {quat2} out the receiving quaternion
 * @returns {quat2} out
 */

function identity(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = 0;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  return out;
}
/**
 * Set the components of a dual quat to the given values
 *
 * @param {quat2} out the receiving quaternion
 * @param {Number} x1 X component
 * @param {Number} y1 Y component
 * @param {Number} z1 Z component
 * @param {Number} w1 W component
 * @param {Number} x2 X component
 * @param {Number} y2 Y component
 * @param {Number} z2 Z component
 * @param {Number} w2 W component
 * @returns {quat2} out
 * @function
 */

function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {
  out[0] = x1;
  out[1] = y1;
  out[2] = z1;
  out[3] = w1;
  out[4] = x2;
  out[5] = y2;
  out[6] = z2;
  out[7] = w2;
  return out;
}
/**
 * Gets the real part of a dual quat
 * @param  {quat} out real part
 * @param  {quat2} a Dual Quaternion
 * @return {quat} real part
 */

var getReal = _quat_js__WEBPACK_IMPORTED_MODULE_1__["copy"];
/**
 * Gets the dual part of a dual quat
 * @param  {quat} out dual part
 * @param  {quat2} a Dual Quaternion
 * @return {quat} dual part
 */

function getDual(out, a) {
  out[0] = a[4];
  out[1] = a[5];
  out[2] = a[6];
  out[3] = a[7];
  return out;
}
/**
 * Set the real component of a dual quat to the given quaternion
 *
 * @param {quat2} out the receiving quaternion
 * @param {quat} q a quaternion representing the real part
 * @returns {quat2} out
 * @function
 */

var setReal = _quat_js__WEBPACK_IMPORTED_MODULE_1__["copy"];
/**
 * Set the dual component of a dual quat to the given quaternion
 *
 * @param {quat2} out the receiving quaternion
 * @param {quat} q a quaternion representing the dual part
 * @returns {quat2} out
 * @function
 */

function setDual(out, q) {
  out[4] = q[0];
  out[5] = q[1];
  out[6] = q[2];
  out[7] = q[3];
  return out;
}
/**
 * Gets the translation of a normalized dual quat
 * @param  {vec3} out translation
 * @param  {quat2} a Dual Quaternion to be decomposed
 * @return {vec3} translation
 */

function getTranslation(out, a) {
  var ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3];
  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
  return out;
}
/**
 * Translates a dual quat by the given vector
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the dual quaternion to translate
 * @param {vec3} v vector to translate by
 * @returns {quat2} out
 */

function translate(out, a, v) {
  var ax1 = a[0],
      ay1 = a[1],
      az1 = a[2],
      aw1 = a[3],
      bx1 = v[0] * 0.5,
      by1 = v[1] * 0.5,
      bz1 = v[2] * 0.5,
      ax2 = a[4],
      ay2 = a[5],
      az2 = a[6],
      aw2 = a[7];
  out[0] = ax1;
  out[1] = ay1;
  out[2] = az1;
  out[3] = aw1;
  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;
  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;
  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;
  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;
  return out;
}
/**
 * Rotates a dual quat around the X axis
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the dual quaternion to rotate
 * @param {number} rad how far should the rotation be
 * @returns {quat2} out
 */

function rotateX(out, a, rad) {
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      ax1 = ax * bw + aw * bx + ay * bz - az * by,
      ay1 = ay * bw + aw * by + az * bx - ax * bz,
      az1 = az * bw + aw * bz + ax * by - ay * bx,
      aw1 = aw * bw - ax * bx - ay * by - az * bz;
  _quat_js__WEBPACK_IMPORTED_MODULE_1__["rotateX"](out, a, rad);
  bx = out[0];
  by = out[1];
  bz = out[2];
  bw = out[3];
  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  return out;
}
/**
 * Rotates a dual quat around the Y axis
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the dual quaternion to rotate
 * @param {number} rad how far should the rotation be
 * @returns {quat2} out
 */

function rotateY(out, a, rad) {
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      ax1 = ax * bw + aw * bx + ay * bz - az * by,
      ay1 = ay * bw + aw * by + az * bx - ax * bz,
      az1 = az * bw + aw * bz + ax * by - ay * bx,
      aw1 = aw * bw - ax * bx - ay * by - az * bz;
  _quat_js__WEBPACK_IMPORTED_MODULE_1__["rotateY"](out, a, rad);
  bx = out[0];
  by = out[1];
  bz = out[2];
  bw = out[3];
  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  return out;
}
/**
 * Rotates a dual quat around the Z axis
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the dual quaternion to rotate
 * @param {number} rad how far should the rotation be
 * @returns {quat2} out
 */

function rotateZ(out, a, rad) {
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      ax1 = ax * bw + aw * bx + ay * bz - az * by,
      ay1 = ay * bw + aw * by + az * bx - ax * bz,
      az1 = az * bw + aw * bz + ax * by - ay * bx,
      aw1 = aw * bw - ax * bx - ay * by - az * bz;
  _quat_js__WEBPACK_IMPORTED_MODULE_1__["rotateZ"](out, a, rad);
  bx = out[0];
  by = out[1];
  bz = out[2];
  bw = out[3];
  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  return out;
}
/**
 * Rotates a dual quat by a given quaternion (a * q)
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the dual quaternion to rotate
 * @param {quat} q quaternion to rotate by
 * @returns {quat2} out
 */

function rotateByQuatAppend(out, a, q) {
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3],
      ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  out[0] = ax * qw + aw * qx + ay * qz - az * qy;
  out[1] = ay * qw + aw * qy + az * qx - ax * qz;
  out[2] = az * qw + aw * qz + ax * qy - ay * qx;
  out[3] = aw * qw - ax * qx - ay * qy - az * qz;
  ax = a[4];
  ay = a[5];
  az = a[6];
  aw = a[7];
  out[4] = ax * qw + aw * qx + ay * qz - az * qy;
  out[5] = ay * qw + aw * qy + az * qx - ax * qz;
  out[6] = az * qw + aw * qz + ax * qy - ay * qx;
  out[7] = aw * qw - ax * qx - ay * qy - az * qz;
  return out;
}
/**
 * Rotates a dual quat by a given quaternion (q * a)
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat} q quaternion to rotate by
 * @param {quat2} a the dual quaternion to rotate
 * @returns {quat2} out
 */

function rotateByQuatPrepend(out, q, a) {
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3],
      bx = a[0],
      by = a[1],
      bz = a[2],
      bw = a[3];
  out[0] = qx * bw + qw * bx + qy * bz - qz * by;
  out[1] = qy * bw + qw * by + qz * bx - qx * bz;
  out[2] = qz * bw + qw * bz + qx * by - qy * bx;
  out[3] = qw * bw - qx * bx - qy * by - qz * bz;
  bx = a[4];
  by = a[5];
  bz = a[6];
  bw = a[7];
  out[4] = qx * bw + qw * bx + qy * bz - qz * by;
  out[5] = qy * bw + qw * by + qz * bx - qx * bz;
  out[6] = qz * bw + qw * bz + qx * by - qy * bx;
  out[7] = qw * bw - qx * bx - qy * by - qz * bz;
  return out;
}
/**
 * Rotates a dual quat around a given axis. Does the normalisation automatically
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the dual quaternion to rotate
 * @param {vec3} axis the axis to rotate around
 * @param {Number} rad how far the rotation should be
 * @returns {quat2} out
 */

function rotateAroundAxis(out, a, axis, rad) {
  //Special case for rad = 0
  if (Math.abs(rad) < _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"]) {
    return copy(out, a);
  }

  var axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);
  rad = rad * 0.5;
  var s = Math.sin(rad);
  var bx = s * axis[0] / axisLength;
  var by = s * axis[1] / axisLength;
  var bz = s * axis[2] / axisLength;
  var bw = Math.cos(rad);
  var ax1 = a[0],
      ay1 = a[1],
      az1 = a[2],
      aw1 = a[3];
  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  var ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7];
  out[4] = ax * bw + aw * bx + ay * bz - az * by;
  out[5] = ay * bw + aw * by + az * bx - ax * bz;
  out[6] = az * bw + aw * bz + ax * by - ay * bx;
  out[7] = aw * bw - ax * bx - ay * by - az * bz;
  return out;
}
/**
 * Adds two dual quat's
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the first operand
 * @param {quat2} b the second operand
 * @returns {quat2} out
 * @function
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  return out;
}
/**
 * Multiplies two dual quat's
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the first operand
 * @param {quat2} b the second operand
 * @returns {quat2} out
 */

function multiply(out, a, b) {
  var ax0 = a[0],
      ay0 = a[1],
      az0 = a[2],
      aw0 = a[3],
      bx1 = b[4],
      by1 = b[5],
      bz1 = b[6],
      bw1 = b[7],
      ax1 = a[4],
      ay1 = a[5],
      az1 = a[6],
      aw1 = a[7],
      bx0 = b[0],
      by0 = b[1],
      bz0 = b[2],
      bw0 = b[3];
  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;
  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;
  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;
  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;
  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;
  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;
  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;
  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;
  return out;
}
/**
 * Alias for {@link quat2.multiply}
 * @function
 */

var mul = multiply;
/**
 * Scales a dual quat by a scalar number
 *
 * @param {quat2} out the receiving dual quat
 * @param {quat2} a the dual quat to scale
 * @param {Number} b amount to scale the dual quat by
 * @returns {quat2} out
 * @function
 */

function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  return out;
}
/**
 * Calculates the dot product of two dual quat's (The dot product of the real parts)
 *
 * @param {quat2} a the first operand
 * @param {quat2} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */

var dot = _quat_js__WEBPACK_IMPORTED_MODULE_1__["dot"];
/**
 * Performs a linear interpolation between two dual quats's
 * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)
 *
 * @param {quat2} out the receiving dual quat
 * @param {quat2} a the first operand
 * @param {quat2} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat2} out
 */

function lerp(out, a, b, t) {
  var mt = 1 - t;
  if (dot(a, b) < 0) t = -t;
  out[0] = a[0] * mt + b[0] * t;
  out[1] = a[1] * mt + b[1] * t;
  out[2] = a[2] * mt + b[2] * t;
  out[3] = a[3] * mt + b[3] * t;
  out[4] = a[4] * mt + b[4] * t;
  out[5] = a[5] * mt + b[5] * t;
  out[6] = a[6] * mt + b[6] * t;
  out[7] = a[7] * mt + b[7] * t;
  return out;
}
/**
 * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a dual quat to calculate inverse of
 * @returns {quat2} out
 */

function invert(out, a) {
  var sqlen = squaredLength(a);
  out[0] = -a[0] / sqlen;
  out[1] = -a[1] / sqlen;
  out[2] = -a[2] / sqlen;
  out[3] = a[3] / sqlen;
  out[4] = -a[4] / sqlen;
  out[5] = -a[5] / sqlen;
  out[6] = -a[6] / sqlen;
  out[7] = a[7] / sqlen;
  return out;
}
/**
 * Calculates the conjugate of a dual quat
 * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.
 *
 * @param {quat2} out the receiving quaternion
 * @param {quat2} a quat to calculate conjugate of
 * @returns {quat2} out
 */

function conjugate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a[3];
  out[4] = -a[4];
  out[5] = -a[5];
  out[6] = -a[6];
  out[7] = a[7];
  return out;
}
/**
 * Calculates the length of a dual quat
 *
 * @param {quat2} a dual quat to calculate length of
 * @returns {Number} length of a
 * @function
 */

var length = _quat_js__WEBPACK_IMPORTED_MODULE_1__["length"];
/**
 * Alias for {@link quat2.length}
 * @function
 */

var len = length;
/**
 * Calculates the squared length of a dual quat
 *
 * @param {quat2} a dual quat to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */

var squaredLength = _quat_js__WEBPACK_IMPORTED_MODULE_1__["squaredLength"];
/**
 * Alias for {@link quat2.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Normalize a dual quat
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a dual quaternion to normalize
 * @returns {quat2} out
 * @function
 */

function normalize(out, a) {
  var magnitude = squaredLength(a);

  if (magnitude > 0) {
    magnitude = Math.sqrt(magnitude);
    var a0 = a[0] / magnitude;
    var a1 = a[1] / magnitude;
    var a2 = a[2] / magnitude;
    var a3 = a[3] / magnitude;
    var b0 = a[4];
    var b1 = a[5];
    var b2 = a[6];
    var b3 = a[7];
    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;
    out[0] = a0;
    out[1] = a1;
    out[2] = a2;
    out[3] = a3;
    out[4] = (b0 - a0 * a_dot_b) / magnitude;
    out[5] = (b1 - a1 * a_dot_b) / magnitude;
    out[6] = (b2 - a2 * a_dot_b) / magnitude;
    out[7] = (b3 - a3 * a_dot_b) / magnitude;
  }

  return out;
}
/**
 * Returns a string representation of a dual quatenion
 *
 * @param {quat2} a dual quaternion to represent as a string
 * @returns {String} string representation of the dual quat
 */

function str(a) {
  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';
}
/**
 * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {quat2} a the first dual quaternion.
 * @param {quat2} b the second dual quaternion.
 * @returns {Boolean} true if the dual quaternions are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];
}
/**
 * Returns whether or not the dual quaternions have approximately the same elements in the same position.
 *
 * @param {quat2} a the first dual quat.
 * @param {quat2} b the second dual quat.
 * @returns {Boolean} true if the dual quats are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a7), Math.abs(b7));
}

/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/vec2.js":
/*!******************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/gl-matrix/esm/vec2.js ***!
  \******************************************************************************************************/
/*! exports provided: create, clone, fromValues, copy, set, add, subtract, multiply, divide, ceil, floor, min, max, round, scale, scaleAndAdd, distance, squaredDistance, length, squaredLength, negate, inverse, normalize, dot, cross, lerp, random, transformMat2, transformMat2d, transformMat3, transformMat4, rotate, angle, zero, str, exactEquals, equals, len, sub, mul, div, dist, sqrDist, sqrLen, forEach */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtract", function() { return subtract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "divide", function() { return divide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ceil", function() { return ceil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "floor", function() { return floor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "min", function() { return min; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "max", function() { return max; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "round", function() { return round; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scaleAndAdd", function() { return scaleAndAdd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distance", function() { return distance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredDistance", function() { return squaredDistance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "length", function() { return length; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredLength", function() { return squaredLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "negate", function() { return negate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inverse", function() { return inverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalize", function() { return normalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return dot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cross", function() { return cross; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lerp", function() { return lerp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "random", function() { return random; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformMat2", function() { return transformMat2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformMat2d", function() { return transformMat2d; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformMat3", function() { return transformMat3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformMat4", function() { return transformMat4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "angle", function() { return angle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zero", function() { return zero; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "len", function() { return len; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "div", function() { return div; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dist", function() { return dist; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrDist", function() { return sqrDist; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrLen", function() { return sqrLen; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forEach", function() { return forEach; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/common.js");

/**
 * 2 Dimensional Vector
 * @module vec2
 */

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](2);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    out[0] = 0;
    out[1] = 0;
  }

  return out;
}
/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {vec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](2);
  out[0] = a[0];
  out[1] = a[1];
  return out;
}
/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */

function fromValues(x, y) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](2);
  out[0] = x;
  out[1] = y;
  return out;
}
/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the source vector
 * @returns {vec2} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  return out;
}
/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */

function set(out, x, y) {
  out[0] = x;
  out[1] = y;
  return out;
}
/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  return out;
}
/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */

function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  return out;
}
/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */

function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  return out;
}
/**
 * Math.ceil the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to ceil
 * @returns {vec2} out
 */

function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  return out;
}
/**
 * Math.floor the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to floor
 * @returns {vec2} out
 */

function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  return out;
}
/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */

function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  return out;
}
/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */

function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  return out;
}
/**
 * Math.round the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to round
 * @returns {vec2} out
 */

function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  return out;
}
/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */

function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  return out;
}
/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */

function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} distance between a and b
 */

function distance(a, b) {
  var x = b[0] - a[0],
      y = b[1] - a[1];
  return Math.sqrt(x * x + y * y);
}
/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} squared distance between a and b
 */

function squaredDistance(a, b) {
  var x = b[0] - a[0],
      y = b[1] - a[1];
  return x * x + y * y;
}
/**
 * Calculates the length of a vec2
 *
 * @param {vec2} a vector to calculate length of
 * @returns {Number} length of a
 */

function length(a) {
  var x = a[0],
      y = a[1];
  return Math.sqrt(x * x + y * y);
}
/**
 * Calculates the squared length of a vec2
 *
 * @param {vec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function squaredLength(a) {
  var x = a[0],
      y = a[1];
  return x * x + y * y;
}
/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to negate
 * @returns {vec2} out
 */

function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  return out;
}
/**
 * Returns the inverse of the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to invert
 * @returns {vec2} out
 */

function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  return out;
}
/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to normalize
 * @returns {vec2} out
 */

function normalize(out, a) {
  var x = a[0],
      y = a[1];
  var len = x * x + y * y;

  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
  }

  out[0] = a[0] * len;
  out[1] = a[1] * len;
  return out;
}
/**
 * Calculates the dot product of two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} dot product of a and b
 */

function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1];
}
/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec3} out
 */

function cross(out, a, b) {
  var z = a[0] * b[1] - a[1] * b[0];
  out[0] = out[1] = 0;
  out[2] = z;
  return out;
}
/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec2} out
 */

function lerp(out, a, b, t) {
  var ax = a[0],
      ay = a[1];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec2} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec2} out
 */

function random(out, scale) {
  scale = scale || 1.0;
  var r = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]() * 2.0 * Math.PI;
  out[0] = Math.cos(r) * scale;
  out[1] = Math.sin(r) * scale;
  return out;
}
/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat2(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[2] * y;
  out[1] = m[1] * x + m[3] * y;
  return out;
}
/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2d} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat2d(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[2] * y + m[4];
  out[1] = m[1] * x + m[3] * y + m[5];
  return out;
}
/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat3} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat3(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[3] * y + m[6];
  out[1] = m[1] * x + m[4] * y + m[7];
  return out;
}
/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat4(out, a, m) {
  var x = a[0];
  var y = a[1];
  out[0] = m[0] * x + m[4] * y + m[12];
  out[1] = m[1] * x + m[5] * y + m[13];
  return out;
}
/**
 * Rotate a 2D vector
 * @param {vec2} out The receiving vec2
 * @param {vec2} a The vec2 point to rotate
 * @param {vec2} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec2} out
 */

function rotate(out, a, b, c) {
  //Translate point to the origin
  var p0 = a[0] - b[0],
      p1 = a[1] - b[1],
      sinC = Math.sin(c),
      cosC = Math.cos(c); //perform rotation and translate to correct position

  out[0] = p0 * cosC - p1 * sinC + b[0];
  out[1] = p0 * sinC + p1 * cosC + b[1];
  return out;
}
/**
 * Get the angle between two 2D vectors
 * @param {vec2} a The first operand
 * @param {vec2} b The second operand
 * @returns {Number} The angle in radians
 */

function angle(a, b) {
  var x1 = a[0],
      y1 = a[1],
      x2 = b[0],
      y2 = b[1];
  var len1 = x1 * x1 + y1 * y1;

  if (len1 > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len1 = 1 / Math.sqrt(len1);
  }

  var len2 = x2 * x2 + y2 * y2;

  if (len2 > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len2 = 1 / Math.sqrt(len2);
  }

  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;

  if (cosine > 1.0) {
    return 0;
  } else if (cosine < -1.0) {
    return Math.PI;
  } else {
    return Math.acos(cosine);
  }
}
/**
 * Set the components of a vec2 to zero
 *
 * @param {vec2} out the receiving vector
 * @returns {vec2} out
 */

function zero(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {vec2} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function str(a) {
  return 'vec2(' + a[0] + ', ' + a[1] + ')';
}
/**
 * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
 *
 * @param {vec2} a The first vector.
 * @param {vec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec2} a The first vector.
 * @param {vec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1];
  var b0 = b[0],
      b1 = b[1];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1));
}
/**
 * Alias for {@link vec2.length}
 * @function
 */

var len = length;
/**
 * Alias for {@link vec2.subtract}
 * @function
 */

var sub = subtract;
/**
 * Alias for {@link vec2.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link vec2.divide}
 * @function
 */

var div = divide;
/**
 * Alias for {@link vec2.distance}
 * @function
 */

var dist = distance;
/**
 * Alias for {@link vec2.squaredDistance}
 * @function
 */

var sqrDist = squaredDistance;
/**
 * Alias for {@link vec2.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var forEach = function () {
  var vec = create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 2;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
    }

    return a;
  };
}();

/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/vec3.js":
/*!******************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/gl-matrix/esm/vec3.js ***!
  \******************************************************************************************************/
/*! exports provided: create, clone, length, fromValues, copy, set, add, subtract, multiply, divide, ceil, floor, min, max, round, scale, scaleAndAdd, distance, squaredDistance, squaredLength, negate, inverse, normalize, dot, cross, lerp, hermite, bezier, random, transformMat4, transformMat3, transformQuat, rotateX, rotateY, rotateZ, angle, zero, str, exactEquals, equals, sub, mul, div, dist, sqrDist, len, sqrLen, forEach */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "length", function() { return length; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtract", function() { return subtract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "divide", function() { return divide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ceil", function() { return ceil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "floor", function() { return floor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "min", function() { return min; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "max", function() { return max; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "round", function() { return round; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scaleAndAdd", function() { return scaleAndAdd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distance", function() { return distance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredDistance", function() { return squaredDistance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredLength", function() { return squaredLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "negate", function() { return negate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inverse", function() { return inverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalize", function() { return normalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return dot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cross", function() { return cross; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lerp", function() { return lerp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hermite", function() { return hermite; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bezier", function() { return bezier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "random", function() { return random; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformMat4", function() { return transformMat4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformMat3", function() { return transformMat3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformQuat", function() { return transformQuat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateX", function() { return rotateX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateY", function() { return rotateY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateZ", function() { return rotateZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "angle", function() { return angle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zero", function() { return zero; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "div", function() { return div; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dist", function() { return dist; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrDist", function() { return sqrDist; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "len", function() { return len; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrLen", function() { return sqrLen; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forEach", function() { return forEach; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/common.js");

/**
 * 3 Dimensional Vector
 * @module vec3
 */

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](3);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }

  return out;
}
/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {vec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](3);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
/**
 * Calculates the length of a vec3
 *
 * @param {vec3} a vector to calculate length of
 * @returns {Number} length of a
 */

function length(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return Math.sqrt(x * x + y * y + z * z);
}
/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */

function fromValues(x, y, z) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](3);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the source vector
 * @returns {vec3} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */

function set(out, x, y, z) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  return out;
}
/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */

function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  return out;
}
/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */

function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  return out;
}
/**
 * Math.ceil the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to ceil
 * @returns {vec3} out
 */

function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  return out;
}
/**
 * Math.floor the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to floor
 * @returns {vec3} out
 */

function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  return out;
}
/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */

function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  return out;
}
/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */

function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  return out;
}
/**
 * Math.round the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to round
 * @returns {vec3} out
 */

function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  return out;
}
/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */

function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  return out;
}
/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */

function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} distance between a and b
 */

function distance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return Math.sqrt(x * x + y * y + z * z);
}
/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} squared distance between a and b
 */

function squaredDistance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return x * x + y * y + z * z;
}
/**
 * Calculates the squared length of a vec3
 *
 * @param {vec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function squaredLength(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return x * x + y * y + z * z;
}
/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to negate
 * @returns {vec3} out
 */

function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  return out;
}
/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to invert
 * @returns {vec3} out
 */

function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  return out;
}
/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to normalize
 * @returns {vec3} out
 */

function normalize(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var len = x * x + y * y + z * z;

  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
  }

  out[0] = a[0] * len;
  out[1] = a[1] * len;
  out[2] = a[2] * len;
  return out;
}
/**
 * Calculates the dot product of two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} dot product of a and b
 */

function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */

function cross(out, a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2];
  var bx = b[0],
      by = b[1],
      bz = b[2];
  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
  return out;
}
/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function lerp(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  return out;
}
/**
 * Performs a hermite interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function hermite(out, a, b, c, d, t) {
  var factorTimes2 = t * t;
  var factor1 = factorTimes2 * (2 * t - 3) + 1;
  var factor2 = factorTimes2 * (t - 2) + t;
  var factor3 = factorTimes2 * (t - 1);
  var factor4 = factorTimes2 * (3 - 2 * t);
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
/**
 * Performs a bezier interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function bezier(out, a, b, c, d, t) {
  var inverseFactor = 1 - t;
  var inverseFactorTimesTwo = inverseFactor * inverseFactor;
  var factorTimes2 = t * t;
  var factor1 = inverseFactorTimesTwo * inverseFactor;
  var factor2 = 3 * t * inverseFactorTimesTwo;
  var factor3 = 3 * factorTimes2 * inverseFactor;
  var factor4 = factorTimes2 * t;
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */

function random(out, scale) {
  scale = scale || 1.0;
  var r = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]() * 2.0 * Math.PI;
  var z = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]() * 2.0 - 1.0;
  var zScale = Math.sqrt(1.0 - z * z) * scale;
  out[0] = Math.cos(r) * zScale;
  out[1] = Math.sin(r) * zScale;
  out[2] = z * scale;
  return out;
}
/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec3} out
 */

function transformMat4(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2];
  var w = m[3] * x + m[7] * y + m[11] * z + m[15];
  w = w || 1.0;
  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
  return out;
}
/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat3} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */

function transformMat3(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2];
  out[0] = x * m[0] + y * m[3] + z * m[6];
  out[1] = x * m[1] + y * m[4] + z * m[7];
  out[2] = x * m[2] + y * m[5] + z * m[8];
  return out;
}
/**
 * Transforms the vec3 with a quat
 * Can also be used for dual quaternions. (Multiply it with the real part)
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec3} out
 */

function transformQuat(out, a, q) {
  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3];
  var x = a[0],
      y = a[1],
      z = a[2]; // var qvec = [qx, qy, qz];
  // var uv = vec3.cross([], qvec, a);

  var uvx = qy * z - qz * y,
      uvy = qz * x - qx * z,
      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);

  var uuvx = qy * uvz - qz * uvy,
      uuvy = qz * uvx - qx * uvz,
      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);

  var w2 = qw * 2;
  uvx *= w2;
  uvy *= w2;
  uvz *= w2; // vec3.scale(uuv, uuv, 2);

  uuvx *= 2;
  uuvy *= 2;
  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));

  out[0] = x + uvx + uuvx;
  out[1] = y + uvy + uuvy;
  out[2] = z + uvz + uuvz;
  return out;
}
/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */

function rotateX(out, a, b, c) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[0];
  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);
  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */

function rotateY(out, a, b, c) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);
  r[1] = p[1];
  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */

function rotateZ(out, a, b, c) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);
  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);
  r[2] = p[2]; //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Get the angle between two 3D vectors
 * @param {vec3} a The first operand
 * @param {vec3} b The second operand
 * @returns {Number} The angle in radians
 */

function angle(a, b) {
  var tempA = fromValues(a[0], a[1], a[2]);
  var tempB = fromValues(b[0], b[1], b[2]);
  normalize(tempA, tempA);
  normalize(tempB, tempB);
  var cosine = dot(tempA, tempB);

  if (cosine > 1.0) {
    return 0;
  } else if (cosine < -1.0) {
    return Math.PI;
  } else {
    return Math.acos(cosine);
  }
}
/**
 * Set the components of a vec3 to zero
 *
 * @param {vec3} out the receiving vector
 * @returns {vec3} out
 */

function zero(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  out[2] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {vec3} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function str(a) {
  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
}
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {vec3} a The first vector.
 * @param {vec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec3} a The first vector.
 * @param {vec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2));
}
/**
 * Alias for {@link vec3.subtract}
 * @function
 */

var sub = subtract;
/**
 * Alias for {@link vec3.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link vec3.divide}
 * @function
 */

var div = divide;
/**
 * Alias for {@link vec3.distance}
 * @function
 */

var dist = distance;
/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */

var sqrDist = squaredDistance;
/**
 * Alias for {@link vec3.length}
 * @function
 */

var len = length;
/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var forEach = function () {
  var vec = create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 3;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
    }

    return a;
  };
}();

/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/vec4.js":
/*!******************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/gl-matrix/esm/vec4.js ***!
  \******************************************************************************************************/
/*! exports provided: create, clone, fromValues, copy, set, add, subtract, multiply, divide, ceil, floor, min, max, round, scale, scaleAndAdd, distance, squaredDistance, length, squaredLength, negate, inverse, normalize, dot, cross, lerp, random, transformMat4, transformQuat, zero, str, exactEquals, equals, sub, mul, div, dist, sqrDist, len, sqrLen, forEach */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtract", function() { return subtract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "divide", function() { return divide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ceil", function() { return ceil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "floor", function() { return floor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "min", function() { return min; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "max", function() { return max; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "round", function() { return round; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scaleAndAdd", function() { return scaleAndAdd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distance", function() { return distance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredDistance", function() { return squaredDistance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "length", function() { return length; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredLength", function() { return squaredLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "negate", function() { return negate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inverse", function() { return inverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalize", function() { return normalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return dot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cross", function() { return cross; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lerp", function() { return lerp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "random", function() { return random; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformMat4", function() { return transformMat4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformQuat", function() { return transformQuat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zero", function() { return zero; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "div", function() { return div; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dist", function() { return dist; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrDist", function() { return sqrDist; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "len", function() { return len; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrLen", function() { return sqrLen; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forEach", function() { return forEach; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/common.js");

/**
 * 4 Dimensional Vector
 * @module vec4
 */

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](4);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
  }

  return out;
}
/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {vec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */

function fromValues(x, y, z, w) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](4);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the source vector
 * @returns {vec4} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */

function set(out, x, y, z, w) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}
/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */

function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  out[3] = a[3] * b[3];
  return out;
}
/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */

function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  out[3] = a[3] / b[3];
  return out;
}
/**
 * Math.ceil the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to ceil
 * @returns {vec4} out
 */

function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  out[3] = Math.ceil(a[3]);
  return out;
}
/**
 * Math.floor the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to floor
 * @returns {vec4} out
 */

function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  out[3] = Math.floor(a[3]);
  return out;
}
/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */

function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  out[3] = Math.min(a[3], b[3]);
  return out;
}
/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */

function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  out[3] = Math.max(a[3], b[3]);
  return out;
}
/**
 * Math.round the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to round
 * @returns {vec4} out
 */

function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  out[3] = Math.round(a[3]);
  return out;
}
/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */

function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}
/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */

function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} distance between a and b
 */

function distance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  var w = b[3] - a[3];
  return Math.sqrt(x * x + y * y + z * z + w * w);
}
/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} squared distance between a and b
 */

function squaredDistance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  var w = b[3] - a[3];
  return x * x + y * y + z * z + w * w;
}
/**
 * Calculates the length of a vec4
 *
 * @param {vec4} a vector to calculate length of
 * @returns {Number} length of a
 */

function length(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return Math.sqrt(x * x + y * y + z * z + w * w);
}
/**
 * Calculates the squared length of a vec4
 *
 * @param {vec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function squaredLength(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return x * x + y * y + z * z + w * w;
}
/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to negate
 * @returns {vec4} out
 */

function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = -a[3];
  return out;
}
/**
 * Returns the inverse of the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to invert
 * @returns {vec4} out
 */

function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  out[3] = 1.0 / a[3];
  return out;
}
/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to normalize
 * @returns {vec4} out
 */

function normalize(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  var len = x * x + y * y + z * z + w * w;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
  }

  out[0] = x * len;
  out[1] = y * len;
  out[2] = z * len;
  out[3] = w * len;
  return out;
}
/**
 * Calculates the dot product of two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} dot product of a and b
 */

function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
}
/**
 * Returns the cross-product of three vectors in a 4-dimensional space
 *
 * @param {vec4} result the receiving vector
 * @param {vec4} U the first vector
 * @param {vec4} V the second vector
 * @param {vec4} W the third vector
 * @returns {vec4} result
 */

function cross(out, u, v, w) {
  var A = v[0] * w[1] - v[1] * w[0],
      B = v[0] * w[2] - v[2] * w[0],
      C = v[0] * w[3] - v[3] * w[0],
      D = v[1] * w[2] - v[2] * w[1],
      E = v[1] * w[3] - v[3] * w[1],
      F = v[2] * w[3] - v[3] * w[2];
  var G = u[0];
  var H = u[1];
  var I = u[2];
  var J = u[3];
  out[0] = H * F - I * E + J * D;
  out[1] = -(G * F) + I * C - J * B;
  out[2] = G * E - H * C + J * A;
  out[3] = -(G * D) + H * B - I * A;
  return out;
}
;
/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec4} out
 */

function lerp(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  var aw = a[3];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  out[3] = aw + t * (b[3] - aw);
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec4} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec4} out
 */

function random(out, scale) {
  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a
  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.
  // http://projecteuclid.org/euclid.aoms/1177692644;

  var v1, v2, v3, v4;
  var s1, s2;

  do {
    v1 = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]() * 2 - 1;
    v2 = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]() * 2 - 1;
    s1 = v1 * v1 + v2 * v2;
  } while (s1 >= 1);

  do {
    v3 = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]() * 2 - 1;
    v4 = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]() * 2 - 1;
    s2 = v3 * v3 + v4 * v4;
  } while (s2 >= 1);

  var d = Math.sqrt((1 - s1) / s2);
  out[0] = scale * v1;
  out[1] = scale * v2;
  out[2] = scale * v3 * d;
  out[3] = scale * v4 * d;
  return out;
}
/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec4} out
 */

function transformMat4(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
  return out;
}
/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec4} out
 */

function transformQuat(out, a, q) {
  var x = a[0],
      y = a[1],
      z = a[2];
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3]; // calculate quat * vec

  var ix = qw * x + qy * z - qz * y;
  var iy = qw * y + qz * x - qx * z;
  var iz = qw * z + qx * y - qy * x;
  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat

  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  out[3] = a[3];
  return out;
}
/**
 * Set the components of a vec4 to zero
 *
 * @param {vec4} out the receiving vector
 * @returns {vec4} out
 */

function zero(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {vec4} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function str(a) {
  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
}
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {vec4} a The first vector.
 * @param {vec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec4} a The first vector.
 * @param {vec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a3), Math.abs(b3));
}
/**
 * Alias for {@link vec4.subtract}
 * @function
 */

var sub = subtract;
/**
 * Alias for {@link vec4.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link vec4.divide}
 * @function
 */

var div = divide;
/**
 * Alias for {@link vec4.distance}
 * @function
 */

var dist = distance;
/**
 * Alias for {@link vec4.squaredDistance}
 * @function
 */

var sqrDist = squaredDistance;
/**
 * Alias for {@link vec4.length}
 * @function
 */

var len = length;
/**
 * Alias for {@link vec4.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var forEach = function () {
  var vec = create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 4;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      vec[3] = a[i + 3];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
      a[i + 3] = vec[3];
    }

    return a;
  };
}();

/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/lodash/_Symbol.js":
/*!**************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/lodash/_Symbol.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "../../../../../../neuroglancer/node_modules/lodash/_root.js");

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/lodash/_baseGetTag.js":
/*!******************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/lodash/_baseGetTag.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "../../../../../../neuroglancer/node_modules/lodash/_Symbol.js"),
    getRawTag = __webpack_require__(/*! ./_getRawTag */ "../../../../../../neuroglancer/node_modules/lodash/_getRawTag.js"),
    objectToString = __webpack_require__(/*! ./_objectToString */ "../../../../../../neuroglancer/node_modules/lodash/_objectToString.js");

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/lodash/_freeGlobal.js":
/*!******************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/lodash/_freeGlobal.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../neuvue-app/neuvue_project/workspace/static/ts/wrapper/node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/lodash/_getRawTag.js":
/*!*****************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/lodash/_getRawTag.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "../../../../../../neuroglancer/node_modules/lodash/_Symbol.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/lodash/_objectToString.js":
/*!**********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/lodash/_objectToString.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/lodash/_root.js":
/*!************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/lodash/_root.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "../../../../../../neuroglancer/node_modules/lodash/_freeGlobal.js");

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/lodash/debounce.js":
/*!***************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/lodash/debounce.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ "../../../../../../neuroglancer/node_modules/lodash/isObject.js"),
    now = __webpack_require__(/*! ./now */ "../../../../../../neuroglancer/node_modules/lodash/now.js"),
    toNumber = __webpack_require__(/*! ./toNumber */ "../../../../../../neuroglancer/node_modules/lodash/toNumber.js");

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        timeWaiting = wait - timeSinceLastCall;

    return maxing
      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
      : timeWaiting;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

module.exports = debounce;


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/lodash/isObject.js":
/*!***************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/lodash/isObject.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/lodash/isObjectLike.js":
/*!*******************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/lodash/isObjectLike.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/lodash/isSymbol.js":
/*!***************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/lodash/isSymbol.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "../../../../../../neuroglancer/node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "../../../../../../neuroglancer/node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/lodash/now.js":
/*!**********************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/lodash/now.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "../../../../../../neuroglancer/node_modules/lodash/_root.js");

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

module.exports = now;


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/lodash/toNumber.js":
/*!***************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/lodash/toNumber.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ "../../../../../../neuroglancer/node_modules/lodash/isObject.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "../../../../../../neuroglancer/node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/nifti-reader-js/src/nifti.js":
/*!*************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/nifti-reader-js/src/nifti.js ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*jslint browser: true, node: true */
/*global require, module */



/*** Imports ***/

/**
 * nifti
 * @type {*|{}}
 */
var nifti = nifti || {};
nifti.NIFTI1 = nifti.NIFTI1 || (( true) ? __webpack_require__(/*! ./nifti1.js */ "../../../../../../neuroglancer/node_modules/nifti-reader-js/src/nifti1.js") : undefined);
nifti.NIFTI2 = nifti.NIFTI2 || (( true) ? __webpack_require__(/*! ./nifti2.js */ "../../../../../../neuroglancer/node_modules/nifti-reader-js/src/nifti2.js") : undefined);
nifti.Utils = nifti.Utils || (( true) ? __webpack_require__(/*! ./utilities.js */ "../../../../../../neuroglancer/node_modules/nifti-reader-js/src/utilities.js") : undefined);

var pako = pako || (( true) ? __webpack_require__(/*! pako */ "../../../../../../neuroglancer/node_modules/pako/index.js") : undefined);



/*** Static Methods ***/

/**
 * Returns true if this data represents a NIFTI-1 header.
 * @param {ArrayBuffer} data
 * @returns {boolean}
 */
nifti.isNIFTI1 = function (data) {
    var buf, mag1, mag2, mag3;

    if (data.byteLength < nifti.NIFTI1.STANDARD_HEADER_SIZE) {
        return false;
    }

    buf = new DataView(data);

    if (buf)

    mag1 = buf.getUint8(nifti.NIFTI1.MAGIC_NUMBER_LOCATION);
    mag2 = buf.getUint8(nifti.NIFTI1.MAGIC_NUMBER_LOCATION + 1);
    mag3 = buf.getUint8(nifti.NIFTI1.MAGIC_NUMBER_LOCATION + 2);

    return !!((mag1 === nifti.NIFTI1.MAGIC_NUMBER[0]) && (mag2 === nifti.NIFTI1.MAGIC_NUMBER[1]) &&
        (mag3 === nifti.NIFTI1.MAGIC_NUMBER[2]));
};


/**
 * Returns true if this data represents a NIFTI-2 header.
 * @param {ArrayBuffer} data
 * @returns {boolean}
 */
nifti.isNIFTI2 = function (data) {
    var buf, mag1, mag2, mag3;

    if (data.byteLength < nifti.NIFTI1.STANDARD_HEADER_SIZE) {
        return false;
    }

    buf = new DataView(data);
    mag1 = buf.getUint8(nifti.NIFTI2.MAGIC_NUMBER_LOCATION);
    mag2 = buf.getUint8(nifti.NIFTI2.MAGIC_NUMBER_LOCATION + 1);
    mag3 = buf.getUint8(nifti.NIFTI2.MAGIC_NUMBER_LOCATION + 2);

    return !!((mag1 === nifti.NIFTI2.MAGIC_NUMBER[0]) && (mag2 === nifti.NIFTI2.MAGIC_NUMBER[1]) &&
    (mag3 === nifti.NIFTI2.MAGIC_NUMBER[2]));
};



/**
 * Returns true if this data represents a NIFTI header.
 * @param {ArrayBuffer} data
 * @returns {boolean}
 */
nifti.isNIFTI = function (data) {
    return (nifti.isNIFTI1(data) || nifti.isNIFTI2(data));
};



/**
 * Returns true if this data is GZIP compressed.
 * @param {ArrayBuffer} data
 * @returns {boolean}
 */
nifti.isCompressed = function (data) {
    var buf, magicCookie1, magicCookie2;

    if (data) {
        buf = new DataView(data);

        magicCookie1 = buf.getUint8(0);
        magicCookie2 = buf.getUint8(1);

        if (magicCookie1 === nifti.Utils.GUNZIP_MAGIC_COOKIE1) {
            return true;
        }

        if (magicCookie2 === nifti.Utils.GUNZIP_MAGIC_COOKIE2) {
            return true;
        }
    }

    return false;
};



/**
 * Returns decompressed data.
 * @param {ArrayBuffer} data
 * @returns {ArrayBuffer}
 */
nifti.decompress = function (data) {
    return pako.inflate(data).buffer;
};



/**
 * Reads and returns the header object.
 * @param {ArrayBuffer} data
 * @returns {nifti.NIFTI1|nifti.NIFTI2|null}
 */
nifti.readHeader = function (data) {
    var header = null;

    if (nifti.isCompressed(data)) {
        data = nifti.decompress(data);
    }

    if (nifti.isNIFTI1(data)) {
        header = new nifti.NIFTI1();
    } else if (nifti.isNIFTI2(data)) {
        header = new nifti.NIFTI2();
    }

    if (header) {
        header.readHeader(data);
    } else {
        console.error("That file does not appear to be NIFTI!");
    }

    return header;
};



/**
 * Returns true if this header contains an extension.
 * @param {nifti.NIFTI1|nifti.NIFTI2} header
 * @returns {boolean}
 */
nifti.hasExtension = function (header) {
    return (header.extensionFlag[0] != 0);
};



/**
 * Returns the image data.
 * @param {nifti.NIFTI1|nifti.NIFTI2} header
 * @param {ArrayBuffer} data
 * @returns {ArrayBuffer}
 */
nifti.readImage = function (header, data) {
    var imageOffset = header.vox_offset,
        timeDim = 1,
        statDim = 1;

    if (header.dims[4]) {
        timeDim = header.dims[4];
    }

    if (header.dims[5]) {
        statDim = header.dims[5];
    }

    var imageSize = header.dims[1] * header.dims[2] * header.dims[3] * timeDim * statDim * (header.numBitsPerVoxel / 8);
    return data.slice(imageOffset, imageOffset + imageSize);
};



/**
 * Returns the extension data (including extension header).
 * @param {nifti.NIFTI1|nifti.NIFTI2} header
 * @param {ArrayBuffer} data
 * @returns {ArrayBuffer}
 */
nifti.readExtension = function (header, data) {
    var loc = header.getExtensionLocation(),
        size = header.extensionSize;

    return data.slice(loc, loc + size);
};



/**
 * Returns the extension data.
 * @param {nifti.NIFTI1|nifti.NIFTI2} header
 * @param {ArrayBuffer} data
 * @returns {ArrayBuffer}
 */
nifti.readExtensionData = function (header, data) {
    var loc = header.getExtensionLocation(),
        size = header.extensionSize;

    return data.slice(loc + 8, loc + size - 8);
};


/*** Exports ***/

var moduleType = typeof module;
if ((moduleType !== 'undefined') && module.exports) {
    module.exports = nifti;
}


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/nifti-reader-js/src/nifti1.js":
/*!**************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/nifti-reader-js/src/nifti1.js ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*jslint browser: true, node: true */
/*global */



/*** Imports ***/

var nifti = nifti || {};
nifti.Utils = nifti.Utils || (( true) ? __webpack_require__(/*! ./utilities.js */ "../../../../../../neuroglancer/node_modules/nifti-reader-js/src/utilities.js") : undefined);



/*** Constructor ***/

/**
 * The NIFTI1 constructor.
 * @constructor
 * @property {boolean} littleEndian
 * @property {number} dim_info
 * @property {number[]} dims - image dimensions
 * @property {number} intent_p1
 * @property {number} intent_p2
 * @property {number} intent_p3
 * @property {number} intent_code
 * @property {number} datatypeCode
 * @property {number} numBitsPerVoxel
 * @property {number} slice_start
 * @property {number} slice_end
 * @property {number} slice_code
 * @property {number[]} pixDims - voxel dimensions
 * @property {number} vox_offset
 * @property {number} scl_slope
 * @property {number} scl_inter
 * @property {number} xyzt_units
 * @property {number} cal_max
 * @property {number} cal_min
 * @property {number} slice_duration
 * @property {number} toffset
 * @property {string} description
 * @property {string} aux_file
 * @property {string} intent_name
 * @property {number} qform_code
 * @property {number} sform_code
 * @property {number} quatern_b
 * @property {number} quatern_c
 * @property {number} quatern_d
 * @property {number} quatern_x
 * @property {number} quatern_y
 * @property {number} quatern_z
 * @property {Array.<Array.<number>>} affine
 * @property {string} magic
 * @property {boolean} isHDR - if hdr/img format
 * @property {number[]} extensionFlag
 * @property {number} extensionSize
 * @property {number} extensionCode
 * @type {Function}
 */
nifti.NIFTI1 = nifti.NIFTI1 || function () {
    this.littleEndian = false;
    this.dim_info = 0;
    this.dims = [];
    this.intent_p1 = 0;
    this.intent_p2 = 0;
    this.intent_p3 = 0;
    this.intent_code = 0;
    this.datatypeCode = 0;
    this.numBitsPerVoxel = 0;
    this.slice_start = 0;
    this.slice_end = 0;
    this.slice_code = 0;
    this.pixDims = [];
    this.vox_offset = 0;
    this.scl_slope = 1;
    this.scl_inter = 0;
    this.xyzt_units = 0;
    this.cal_max = 0;
    this.cal_min = 0;
    this.slice_duration = 0;
    this.toffset = 0;
    this.description = "";
    this.aux_file = "";
    this.intent_name = "";
    this.qform_code = 0;
    this.sform_code = 0;
    this.quatern_b = 0;
    this.quatern_c = 0;
    this.quatern_d = 0;
    this.qoffset_x = 0;
    this.qoffset_y = 0;
    this.qoffset_z = 0;
    this.affine = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
    this.magic = 0;
    this.isHDR = false;
    this.extensionFlag = [0, 0, 0, 0];
    this.extensionSize = 0;
    this.extensionCode = 0;
};



/*** Static Pseudo-constants ***/

// datatype codes
nifti.NIFTI1.TYPE_NONE            = 0;
nifti.NIFTI1.TYPE_BINARY          = 1;
nifti.NIFTI1.TYPE_UINT8           = 2;
nifti.NIFTI1.TYPE_INT16           = 4;
nifti.NIFTI1.TYPE_INT32           = 8;
nifti.NIFTI1.TYPE_FLOAT32        = 16;
nifti.NIFTI1.TYPE_COMPLEX64      = 32;
nifti.NIFTI1.TYPE_FLOAT64        = 64;
nifti.NIFTI1.TYPE_RGB24         = 128;
nifti.NIFTI1.TYPE_INT8          = 256;
nifti.NIFTI1.TYPE_UINT16        = 512;
nifti.NIFTI1.TYPE_UINT32        = 768;
nifti.NIFTI1.TYPE_INT64        = 1024;
nifti.NIFTI1.TYPE_UINT64       = 1280;
nifti.NIFTI1.TYPE_FLOAT128     = 1536;
nifti.NIFTI1.TYPE_COMPLEX128   = 1792;
nifti.NIFTI1.TYPE_COMPLEX256   = 2048;

// transform codes
nifti.NIFTI1.XFORM_UNKNOWN        = 0;
nifti.NIFTI1.XFORM_SCANNER_ANAT   = 1;
nifti.NIFTI1.XFORM_ALIGNED_ANAT   = 2;
nifti.NIFTI1.XFORM_TALAIRACH      = 3;
nifti.NIFTI1.XFORM_MNI_152        = 4;

// unit codes
nifti.NIFTI1.SPATIAL_UNITS_MASK = 0x07;
nifti.NIFTI1.TEMPORAL_UNITS_MASK = 0x38;
nifti.NIFTI1.UNITS_UNKNOWN        = 0;
nifti.NIFTI1.UNITS_METER          = 1;
nifti.NIFTI1.UNITS_MM             = 2;
nifti.NIFTI1.UNITS_MICRON         = 3;
nifti.NIFTI1.UNITS_SEC            = 8;
nifti.NIFTI1.UNITS_MSEC          = 16;
nifti.NIFTI1.UNITS_USEC          = 24;
nifti.NIFTI1.UNITS_HZ            = 32;
nifti.NIFTI1.UNITS_PPM           = 40;
nifti.NIFTI1.UNITS_RADS          = 48;

// nifti1 codes
nifti.NIFTI1.MAGIC_COOKIE = 348;
nifti.NIFTI1.STANDARD_HEADER_SIZE = 348;
nifti.NIFTI1.MAGIC_NUMBER_LOCATION = 344;
nifti.NIFTI1.MAGIC_NUMBER = [0x6E, 0x2B, 0x31];  // n+1 (.nii)
nifti.NIFTI1.MAGIC_NUMBER2 = [0x6E, 0x69, 0x31];  // ni1 (.hdr/.img)
nifti.NIFTI1.EXTENSION_HEADER_SIZE = 8;


/*** Prototype Methods ***/

/**
 * Reads the header data.
 * @param {ArrayBuffer} data
 */
nifti.NIFTI1.prototype.readHeader = function (data) {
    var rawData = new DataView(data),
        magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian),
        ctr,
        ctrOut,
        ctrIn,
        index;

    if (magicCookieVal !== nifti.NIFTI1.MAGIC_COOKIE) {  // try as little endian
        this.littleEndian = true;
        magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian);
    }

    if (magicCookieVal !== nifti.NIFTI1.MAGIC_COOKIE) {
        throw new Error("This does not appear to be a NIFTI file!");
    }

    this.dim_info = nifti.Utils.getByteAt(rawData, 39);

    for (ctr = 0; ctr < 8; ctr += 1) {
        index = 40 + (ctr * 2);
        this.dims[ctr] = nifti.Utils.getShortAt(rawData, index, this.littleEndian);
    }

    this.intent_p1 = nifti.Utils.getFloatAt(rawData, 56, this.littleEndian);
    this.intent_p2 = nifti.Utils.getFloatAt(rawData, 60, this.littleEndian);
    this.intent_p3 = nifti.Utils.getFloatAt(rawData, 64, this.littleEndian);
    this.intent_code = nifti.Utils.getShortAt(rawData, 68, this.littleEndian);

    this.datatypeCode = nifti.Utils.getShortAt(rawData, 70, this.littleEndian);
    this.numBitsPerVoxel = nifti.Utils.getShortAt(rawData, 72, this.littleEndian);

    this.slice_start = nifti.Utils.getShortAt(rawData, 74, this.littleEndian);

    for (ctr = 0; ctr < 8; ctr += 1) {
        index = 76 + (ctr * 4);
        this.pixDims[ctr] = nifti.Utils.getFloatAt(rawData, index, this.littleEndian);
    }

    this.vox_offset = nifti.Utils.getFloatAt(rawData, 108, this.littleEndian);

    this.scl_slope = nifti.Utils.getFloatAt(rawData, 112, this.littleEndian);
    this.scl_inter = nifti.Utils.getFloatAt(rawData, 116, this.littleEndian);

    this.slice_end = nifti.Utils.getShortAt(rawData, 120, this.littleEndian);
    this.slice_code = nifti.Utils.getByteAt(rawData, 122);

    this.xyzt_units = nifti.Utils.getByteAt(rawData, 123);

    this.cal_max = nifti.Utils.getFloatAt(rawData, 124, this.littleEndian);
    this.cal_min = nifti.Utils.getFloatAt(rawData, 128, this.littleEndian);

    this.slice_duration = nifti.Utils.getFloatAt(rawData, 132, this.littleEndian);
    this.toffset = nifti.Utils.getFloatAt(rawData, 136, this.littleEndian);

    this.description = nifti.Utils.getStringAt(rawData, 148, 228);
    this.aux_file = nifti.Utils.getStringAt(rawData, 228, 252);

    this.qform_code = nifti.Utils.getShortAt(rawData, 252, this.littleEndian);
    this.sform_code = nifti.Utils.getShortAt(rawData, 254, this.littleEndian);

    this.quatern_b = nifti.Utils.getFloatAt(rawData, 256, this.littleEndian);
    this.quatern_c = nifti.Utils.getFloatAt(rawData, 260, this.littleEndian);
    this.quatern_d = nifti.Utils.getFloatAt(rawData, 264, this.littleEndian);
    this.qoffset_x = nifti.Utils.getFloatAt(rawData, 268, this.littleEndian);
    this.qoffset_y = nifti.Utils.getFloatAt(rawData, 272, this.littleEndian);
    this.qoffset_z = nifti.Utils.getFloatAt(rawData, 276, this.littleEndian);

    for (ctrOut = 0; ctrOut < 3; ctrOut += 1) {
        for (ctrIn = 0; ctrIn < 4; ctrIn += 1) {
            index = 280 + (((ctrOut * 4) + ctrIn) * 4);
            this.affine[ctrOut][ctrIn] = nifti.Utils.getFloatAt(rawData, index, this.littleEndian);
        }
    }

    this.affine[3][0] = 0;
    this.affine[3][1] = 0;
    this.affine[3][2] = 0;
    this.affine[3][3] = 1;

    this.intent_name = nifti.Utils.getStringAt(rawData, 328, 344);
    this.magic = nifti.Utils.getStringAt(rawData, 344, 348);

    this.isHDR = (this.magic === nifti.NIFTI1.MAGIC_NUMBER2);

    if (rawData.byteLength > nifti.NIFTI1.MAGIC_COOKIE) {
        this.extensionFlag[0] = nifti.Utils.getByteAt(rawData, 348);
        this.extensionFlag[1] = nifti.Utils.getByteAt(rawData, 348 + 1);
        this.extensionFlag[2] = nifti.Utils.getByteAt(rawData, 348 + 2);
        this.extensionFlag[3] = nifti.Utils.getByteAt(rawData, 348 + 3);

        if (this.extensionFlag[0]) {
            this.extensionSize = this.getExtensionSize(rawData);
            this.extensionCode = this.getExtensionCode(rawData);
        }
    }
};


/**
 * Returns a formatted string of header fields.
 * @returns {string}
 */
nifti.NIFTI1.prototype.toFormattedString = function () {
    var fmt = nifti.Utils.formatNumber,
        string = "";

    string += ("Dim Info = " + this.dim_info + "\n");

    string += ("Image Dimensions (1-8): " +
        this.dims[0] + ", " +
        this.dims[1] + ", " +
        this.dims[2] + ", " +
        this.dims[3] + ", " +
        this.dims[4] + ", " +
        this.dims[5] + ", " +
        this.dims[6] + ", " +
        this.dims[7] + "\n");

    string += ("Intent Parameters (1-3): " +
        this.intent_p1 + ", " +
        this.intent_p2 + ", " +
        this.intent_p3) + "\n";

    string += ("Intent Code = " + this.intent_code + "\n");
    string += ("Datatype = " + this.datatypeCode +  " (" + this.getDatatypeCodeString(this.datatypeCode) + ")\n");
    string += ("Bits Per Voxel = " + this.numBitsPerVoxel + "\n");
    string += ("Slice Start = " + this.slice_start + "\n");
    string += ("Voxel Dimensions (1-8): " +
        fmt(this.pixDims[0]) + ", " +
        fmt(this.pixDims[1]) + ", " +
        fmt(this.pixDims[2]) + ", " +
        fmt(this.pixDims[3]) + ", " +
        fmt(this.pixDims[4]) + ", " +
        fmt(this.pixDims[5]) + ", " +
        fmt(this.pixDims[6]) + ", " +
        fmt(this.pixDims[7]) + "\n");

    string += ("Image Offset = " + this.vox_offset + "\n");
    string += ("Data Scale:  Slope = " + fmt(this.scl_slope) + "  Intercept = " + fmt(this.scl_inter) + "\n");
    string += ("Slice End = " + this.slice_end + "\n");
    string += ("Slice Code = " + this.slice_code + "\n");
    string += ("Units Code = " + this.xyzt_units + " (" + this.getUnitsCodeString(nifti.NIFTI1.SPATIAL_UNITS_MASK & this.xyzt_units) + ", " + this.getUnitsCodeString(nifti.NIFTI1.TEMPORAL_UNITS_MASK & this.xyzt_units) + ")\n");
    string += ("Display Range:  Max = " + fmt(this.cal_max) + "  Min = " + fmt(this.cal_min) + "\n");
    string += ("Slice Duration = " + this.slice_duration + "\n");
    string += ("Time Axis Shift = " + this.toffset + "\n");
    string += ("Description: \"" + this.description + "\"\n");
    string += ("Auxiliary File: \"" + this.aux_file + "\"\n");
    string += ("Q-Form Code = " + this.qform_code + " (" + this.getTransformCodeString(this.qform_code) + ")\n");
    string += ("S-Form Code = " + this.sform_code + " (" + this.getTransformCodeString(this.sform_code) + ")\n");
    string += ("Quaternion Parameters:  " +
        "b = " + fmt(this.quatern_b) + "  " +
        "c = " + fmt(this.quatern_c) + "  " +
        "d = " + fmt(this.quatern_d) + "\n");

    string += ("Quaternion Offsets:  " +
        "x = " + this.qoffset_x + "  " +
        "y = " + this.qoffset_y + "  " +
        "z = " + this.qoffset_z + "\n");

    string += ("S-Form Parameters X: " +
        fmt(this.affine[0][0]) + ", " +
        fmt(this.affine[0][1]) + ", " +
        fmt(this.affine[0][2]) + ", " +
        fmt(this.affine[0][3]) + "\n");

    string += ("S-Form Parameters Y: " +
        fmt(this.affine[1][0]) + ", " +
        fmt(this.affine[1][1]) + ", " +
        fmt(this.affine[1][2]) + ", " +
        fmt(this.affine[1][3]) + "\n");

    string += ("S-Form Parameters Z: " +
        fmt(this.affine[2][0]) + ", " +
        fmt(this.affine[2][1]) + ", " +
        fmt(this.affine[2][2]) + ", " +
        fmt(this.affine[2][3]) + "\n");

    string += ("Intent Name: \"" + this.intent_name + "\"\n");

    if (this.extensionFlag[0]) {
        string += ("Extension: Size = " + this.extensionSize + "  Code = " + this.extensionCode + "\n");

    }

    return string;
};


/**
 * Returns a human-readable string of datatype.
 * @param {number} code
 * @returns {string}
 */
nifti.NIFTI1.prototype.getDatatypeCodeString = function (code) {
    if (code === nifti.NIFTI1.TYPE_UINT8) {
        return "1-Byte Unsigned Integer";
    } else if (code === nifti.NIFTI1.TYPE_INT16) {
        return "2-Byte Signed Integer";
    } else if (code === nifti.NIFTI1.TYPE_INT32) {
        return "4-Byte Signed Integer";
    } else if (code === nifti.NIFTI1.TYPE_FLOAT32) {
        return "4-Byte Float";
    } else if (code === nifti.NIFTI1.TYPE_FLOAT64) {
        return "8-Byte Float";
    } else if (code === nifti.NIFTI1.TYPE_RGB24) {
        return "RGB";
    } else if (code === nifti.NIFTI1.TYPE_INT8) {
        return "1-Byte Signed Integer";
    } else if (code === nifti.NIFTI1.TYPE_UINT16) {
        return "2-Byte Unsigned Integer";
    } else if (code === nifti.NIFTI1.TYPE_UINT32) {
        return "4-Byte Unsigned Integer";
    } else if (code === nifti.NIFTI1.TYPE_INT64) {
        return "8-Byte Signed Integer";
    } else if (code === nifti.NIFTI1.TYPE_UINT64) {
        return "8-Byte Unsigned Integer";
    } else {
        return "Unknown";
    }
};


/**
 * Returns a human-readable string of transform type.
 * @param {number} code
 * @returns {string}
 */
nifti.NIFTI1.prototype.getTransformCodeString = function (code) {
    if (code === nifti.NIFTI1.XFORM_SCANNER_ANAT) {
        return "Scanner";
    } else if (code === nifti.NIFTI1.XFORM_ALIGNED_ANAT) {
        return "Aligned";
    } else if (code === nifti.NIFTI1.XFORM_TALAIRACH) {
        return "Talairach";
    } else if (code === nifti.NIFTI1.XFORM_MNI_152) {
        return "MNI";
    } else {
        return "Unknown";
    }
};


/**
 * Returns a human-readable string of spatial and temporal units.
 * @param {number} code
 * @returns {string}
 */
nifti.NIFTI1.prototype.getUnitsCodeString = function (code) {
    if (code === nifti.NIFTI1.UNITS_METER) {
        return "Meters";
    } else if (code === nifti.NIFTI1.UNITS_MM) {
        return "Millimeters";
    } else if (code === nifti.NIFTI1.UNITS_MICRON) {
        return "Microns";
    } else if (code === nifti.NIFTI1.UNITS_SEC) {
        return "Seconds";
    } else if (code === nifti.NIFTI1.UNITS_MSEC) {
        return "Milliseconds";
    } else if (code === nifti.NIFTI1.UNITS_USEC) {
        return "Microseconds";
    } else if (code === nifti.NIFTI1.UNITS_HZ) {
        return "Hz";
    } else if (code === nifti.NIFTI1.UNITS_PPM) {
        return "PPM";
    } else if (code === nifti.NIFTI1.UNITS_RADS) {
        return "Rads";
    } else {
        return "Unknown";
    }
};


/**
 * Returns the qform matrix.
 * @returns {Array.<Array.<number>>}
 */
nifti.NIFTI1.prototype.getQformMat = function () {
    return this.convertNiftiQFormToNiftiSForm(this.quatern_b, this.quatern_c, this.quatern_d, this.qoffset_x,
        this.qoffset_y, this.qoffset_z, this.pixDims[1], this.pixDims[2], this.pixDims[3], this.pixDims[0]);
};



/**
 * Converts qform to an affine.  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)
 * @param {number} qb
 * @param {number} qc
 * @param {number} qd
 * @param {number} qx
 * @param {number} qy
 * @param {number} qz
 * @param {number} dx
 * @param {number} dy
 * @param {number} dz
 * @param {number} qfac
 * @returns {Array.<Array.<number>>}
 */
nifti.NIFTI1.prototype.convertNiftiQFormToNiftiSForm = function (qb, qc, qd, qx, qy, qz, dx, dy, dz,
                                                qfac) {
    var R = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
        a,
        b = qb,
        c = qc,
        d = qd,
        xd,
        yd,
        zd;

    // last row is always [ 0 0 0 1 ]
    R[3][0] = R[3][1] = R[3][2] = 0.0;
    R[3][3] = 1.0;

    // compute a parameter from b,c,d
    a = 1.0 - (b * b + c * c + d * d);
    if (a < 0.0000001) {                   /* special case */

        a = 1.0 / Math.sqrt(b * b + c * c + d * d);
        b *= a;
        c *= a;
        d *= a;        /* normalize (b,c,d) vector */
        a = 0.0;                        /* a = 0 ==> 180 degree rotation */
    } else {

        a = Math.sqrt(a);                     /* angle = 2*arccos(a) */
    }

    // load rotation matrix, including scaling factors for voxel sizes
    xd = (dx > 0.0) ? dx : 1.0;       /* make sure are positive */
    yd = (dy > 0.0) ? dy : 1.0;
    zd = (dz > 0.0) ? dz : 1.0;

    if (qfac < 0.0) {
        zd = -zd;         /* left handedness? */
    }

    R[0][0] =       (a * a + b * b - c * c - d * d) * xd;
    R[0][1] = 2.0 * (b * c - a * d) * yd;
    R[0][2] = 2.0 * (b * d + a * c) * zd;
    R[1][0] = 2.0 * (b * c + a * d) * xd;
    R[1][1] =       (a * a + c * c - b * b - d * d) * yd;
    R[1][2] = 2.0 * (c * d - a * b) * zd;
    R[2][0] = 2.0 * (b * d - a * c) * xd;
    R[2][1] = 2.0 * (c * d + a * b) * yd;
    R[2][2] =       (a * a + d * d - c * c - b * b) * zd;

    // load offsets
    R[0][3] = qx;
    R[1][3] = qy;
    R[2][3] = qz;

    return R;
};



/**
 * Converts sform to an orientation string (e.g., XYZ+--).  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)
 * @param {Array.<Array.<number>>} R
 * @returns {string}
 */
nifti.NIFTI1.prototype.convertNiftiSFormToNEMA = function (R) {
    var xi, xj, xk, yi, yj, yk, zi, zj, zk, val, detQ, detP, i, j, k, p, q, r, ibest, jbest, kbest, pbest, qbest, rbest,
        M, vbest, Q, P, iChar, jChar, kChar, iSense, jSense, kSense;
    k = 0;

    Q = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];
    P = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];

    //if( icod == NULL || jcod == NULL || kcod == NULL ) return ; /* bad */

    //*icod = *jcod = *kcod = 0 ; /* this.errorMessage returns, if sh*t happens */

    /* load column vectors for each (i,j,k) direction from matrix */

    /*-- i axis --*/ /*-- j axis --*/ /*-- k axis --*/

    xi = R[0][0];
    xj = R[0][1];
    xk = R[0][2];

    yi = R[1][0];
    yj = R[1][1];
    yk = R[1][2];

    zi = R[2][0];
    zj = R[2][1];
    zk = R[2][2];

    /* normalize column vectors to get unit vectors along each ijk-axis */

    /* normalize i axis */
    val = Math.sqrt(xi * xi + yi * yi + zi * zi);
    if (val === 0.0) {  /* stupid input */
        return null;
    }

    xi /= val;
    yi /= val;
    zi /= val;

    /* normalize j axis */
    val = Math.sqrt(xj * xj + yj * yj + zj * zj);
    if (val === 0.0) {  /* stupid input */
        return null;
    }

    xj /= val;
    yj /= val;
    zj /= val;

    /* orthogonalize j axis to i axis, if needed */
    val = xi * xj + yi * yj + zi * zj;    /* dot product between i and j */
    if (Math.abs(val) > 1.E-4) {
        xj -= val * xi;
        yj -= val * yi;
        zj -= val * zi;
        val = Math.sqrt(xj * xj + yj * yj + zj * zj);  /* must renormalize */
        if (val === 0.0) {              /* j was parallel to i? */
            return null;
        }
        xj /= val;
        yj /= val;
        zj /= val;
    }

    /* normalize k axis; if it is zero, make it the cross product i x j */
    val = Math.sqrt(xk * xk + yk * yk + zk * zk);
    if (val === 0.0) {
        xk = yi * zj - zi * yj;
        yk = zi * xj - zj * xi;
        zk = xi * yj - yi * xj;
    } else {
        xk /= val;
        yk /= val;
        zk /= val;
    }

    /* orthogonalize k to i */
    val = xi * xk + yi * yk + zi * zk;    /* dot product between i and k */
    if (Math.abs(val) > 1.E-4) {
        xk -= val * xi;
        yk -= val * yi;
        zk -= val * zi;
        val = Math.sqrt(xk * xk + yk * yk + zk * zk);
        if (val === 0.0) {    /* bad */
            return null;
        }
        xk /= val;
        yk /= val;
        zk /= val;
    }

    /* orthogonalize k to j */
    val = xj * xk + yj * yk + zj * zk;    /* dot product between j and k */
    if (Math.abs(val) > 1.e-4) {
        xk -= val * xj;
        yk -= val * yj;
        zk -= val * zj;
        val = Math.sqrt(xk * xk + yk * yk + zk * zk);
        if (val === 0.0) {     /* bad */
            return null;
        }
        xk /= val;
        yk /= val;
        zk /= val;
    }

    Q[0][0] = xi;
    Q[0][1] = xj;
    Q[0][2] = xk;
    Q[1][0] = yi;
    Q[1][1] = yj;
    Q[1][2] = yk;
    Q[2][0] = zi;
    Q[2][1] = zj;
    Q[2][2] = zk;

    /* at this point, Q is the rotation matrix from the (i,j,k) to (x,y,z) axes */

    detQ = this.nifti_mat33_determ(Q);
    if (detQ === 0.0) { /* shouldn't happen unless user is a DUFIS */
        return null;
    }

    /* Build and test all possible +1/-1 coordinate permutation matrices P;
     then find the P such that the rotation matrix M=PQ is closest to the
     identity, in the sense of M having the smallest total rotation angle. */

    /* Despite the formidable looking 6 nested loops, there are
     only 3*3*3*2*2*2 = 216 passes, which will run very quickly. */

    vbest = -666.0;
    ibest = pbest = qbest = rbest = 1;
    jbest = 2;
    kbest = 3;

    for (i = 1; i <= 3; i += 1) {     /* i = column number to use for row #1 */
        for (j = 1; j <= 3; j += 1) {    /* j = column number to use for row #2 */
            if (i !== j) {
                for (k = 1; k <= 3; k += 1) {  /* k = column number to use for row #3 */
                    if (!(i === k || j === k)) {
                        P[0][0] = P[0][1] = P[0][2] = P[1][0] = P[1][1] = P[1][2] = P[2][0] = P[2][1] = P[2][2] = 0.0;
                        for (p = -1; p <= 1; p += 2) {    /* p,q,r are -1 or +1      */
                            for (q = -1; q <= 1; q += 2) {   /* and go into rows #1,2,3 */
                                for (r = -1; r <= 1; r += 2) {
                                    P[0][i - 1] = p;
                                    P[1][j - 1] = q;
                                    P[2][k - 1] = r;
                                    detP = this.nifti_mat33_determ(P);           /* sign of permutation */
                                    if ((detP * detQ) > 0.0) {
                                        M = this.nifti_mat33_mul(P, Q);

                                        /* angle of M rotation = 2.0*acos(0.5*sqrt(1.0+trace(M)))       */
                                        /* we want largest trace(M) == smallest angle == M nearest to I */

                                        val = M[0][0] + M[1][1] + M[2][2]; /* trace */
                                        if (val > vbest) {
                                            vbest = val;
                                            ibest = i;
                                            jbest = j;
                                            kbest = k;
                                            pbest = p;
                                            qbest = q;
                                            rbest = r;
                                        }
                                    }  /* doesn't match sign of Q */
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    /* At this point ibest is 1 or 2 or 3; pbest is -1 or +1; etc.

     The matrix P that corresponds is the best permutation approximation
     to Q-inverse; that is, P (approximately) takes (x,y,z) coordinates
     to the (i,j,k) axes.

     For example, the first row of P (which contains pbest in column ibest)
     determines the way the i axis points relative to the anatomical
     (x,y,z) axes.  If ibest is 2, then the i axis is along the y axis,
     which is direction P2A (if pbest > 0) or A2P (if pbest < 0).

     So, using ibest and pbest, we can assign the output code for
     the i axis.  Mutatis mutandis for the j and k axes, of course. */

    iChar = jChar = kChar = iSense = jSense = kSense = 0;

    switch (ibest * pbest) {
        case 1: /*i = NIFTI_L2R*/
            iChar = 'X';
            iSense = '+';
            break;
        case -1: /*i = NIFTI_R2L*/
            iChar = 'X';
            iSense = '-';
            break;
        case 2: /*i = NIFTI_P2A*/
            iChar = 'Y';
            iSense = '+';
            break;
        case -2: /*i = NIFTI_A2P*/
            iChar = 'Y';
            iSense = '-';
            break;
        case 3: /*i = NIFTI_I2S*/
            iChar = 'Z';
            iSense = '+';
            break;
        case -3: /*i = NIFTI_S2I*/
            iChar = 'Z';
            iSense = '-';
            break;
    }

    switch (jbest * qbest) {
        case 1: /*j = NIFTI_L2R*/
            jChar = 'X';
            jSense = '+';
            break;
        case -1: /*j = NIFTI_R2L*/
            jChar = 'X';
            jSense = '-';
            break;
        case 2: /*j = NIFTI_P2A*/
            jChar = 'Y';
            jSense = '+';
            break;
        case -2: /*j = NIFTI_A2P*/
            jChar = 'Y';
            jSense = '-';
            break;
        case 3: /*j = NIFTI_I2S*/
            jChar = 'Z';
            jSense = '+';
            break;
        case -3: /*j = NIFTI_S2I*/
            jChar = 'Z';
            jSense = '-';
            break;
    }

    switch (kbest * rbest) {
        case 1: /*k = NIFTI_L2R*/
            kChar = 'X';
            kSense = '+';
            break;
        case -1: /*k = NIFTI_R2L*/
            kChar = 'X';
            kSense = '-';
            break;
        case 2: /*k = NIFTI_P2A*/
            kChar = 'Y';
            kSense = '+';
            break;
        case -2: /*k = NIFTI_A2P*/
            kChar = 'Y';
            kSense = '-';
            break;
        case 3: /*k = NIFTI_I2S*/
            kChar = 'Z';
            kSense = '+';
            break;
        case -3: /*k = NIFTI_S2I*/
            kChar = 'Z';
            kSense = '-';
            break;
    }

    return (iChar + jChar + kChar + iSense + jSense + kSense);
};



nifti.NIFTI1.prototype.nifti_mat33_mul = function (A, B) {
    var C = [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
        i,
        j;

    for (i = 0; i < 3; i += 1) {
        for (j = 0; j < 3; j += 1) {
            C[i][j] =  A[i][0] * B[0][j]  + A[i][1] * B[1][j] + A[i][2] * B[2][j];
        }
    }

    return C;
};



nifti.NIFTI1.prototype.nifti_mat33_determ = function (R) {
    var r11, r12, r13, r21, r22, r23, r31, r32, r33;
    /*  INPUT MATRIX:  */
    r11 = R[0][0];
    r12 = R[0][1];
    r13 = R[0][2];
    r21 = R[1][0];
    r22 = R[1][1];
    r23 = R[1][2];
    r31 = R[2][0];
    r32 = R[2][1];
    r33 = R[2][2];

    return (r11 * r22 * r33 - r11 * r32 * r23 - r21 * r12 * r33 + r21 * r32 * r13 + r31 * r12 * r23 - r31 * r22 * r13);
};


/**
 * Returns the byte index of the extension.
 * @returns {number}
 */
nifti.NIFTI1.prototype.getExtensionLocation = function() {
    return nifti.NIFTI1.MAGIC_COOKIE + 4;
};


/**
 * Returns the extension size.
 * @param {DataView} data
 * @returns {number}
 */
nifti.NIFTI1.prototype.getExtensionSize = function(data) {
    return nifti.Utils.getIntAt(data, this.getExtensionLocation(), this.littleEndian);
};



/**
 * Returns the extension code.
 * @param {DataView} data
 * @returns {number}
 */
nifti.NIFTI1.prototype.getExtensionCode = function(data) {
    return nifti.Utils.getIntAt(data, this.getExtensionLocation() + 4, this.littleEndian);
};



/*** Exports ***/

var moduleType = typeof module;
if ((moduleType !== 'undefined') && module.exports) {
    module.exports = nifti.NIFTI1;
}


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/nifti-reader-js/src/nifti2.js":
/*!**************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/nifti-reader-js/src/nifti2.js ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*jslint browser: true, node: true */
/*global */



/*** Imports ***/

var nifti = nifti || {};
nifti.Utils = nifti.Utils || (( true) ? __webpack_require__(/*! ./utilities.js */ "../../../../../../neuroglancer/node_modules/nifti-reader-js/src/utilities.js") : undefined);
nifti.NIFTI1 = nifti.NIFTI1 || (( true) ? __webpack_require__(/*! ./nifti1.js */ "../../../../../../neuroglancer/node_modules/nifti-reader-js/src/nifti1.js") : undefined);


/*** Constructor ***/

/**
 * The NIFTI2 constructor.
 * @constructor
 * @property {boolean} littleEndian
 * @property {number} dim_info
 * @property {number[]} dims - image dimensions
 * @property {number} intent_p1
 * @property {number} intent_p2
 * @property {number} intent_p3
 * @property {number} intent_code
 * @property {number} datatypeCode
 * @property {number} numBitsPerVoxel
 * @property {number} slice_start
 * @property {number} slice_end
 * @property {number} slice_code
 * @property {number[]} pixDims - voxel dimensions
 * @property {number} vox_offset
 * @property {number} scl_slope
 * @property {number} scl_inter
 * @property {number} xyzt_units
 * @property {number} cal_max
 * @property {number} cal_min
 * @property {number} slice_duration
 * @property {number} toffset
 * @property {string} description
 * @property {string} aux_file
 * @property {string} intent_name
 * @property {number} qform_code
 * @property {number} sform_code
 * @property {number} quatern_b
 * @property {number} quatern_c
 * @property {number} quatern_d
 * @property {number} quatern_x
 * @property {number} quatern_y
 * @property {number} quatern_z
 * @property {Array.<Array.<number>>} affine
 * @property {string} magic
 * @property {number[]} extensionFlag
 * @type {Function}
 */
nifti.NIFTI2 = nifti.NIFTI2 || function () {
    this.littleEndian = false;
    this.dim_info = 0;
    this.dims = [];
    this.intent_p1 = 0;
    this.intent_p2 = 0;
    this.intent_p3 = 0;
    this.intent_code = 0;
    this.datatypeCode = 0;
    this.numBitsPerVoxel = 0;
    this.slice_start = 0;
    this.slice_end = 0;
    this.slice_code = 0;
    this.pixDims = [];
    this.vox_offset = 0;
    this.scl_slope = 1;
    this.scl_inter = 0;
    this.xyzt_units = 0;
    this.cal_max = 0;
    this.cal_min = 0;
    this.slice_duration = 0;
    this.toffset = 0;
    this.description = "";
    this.aux_file = "";
    this.intent_name = "";
    this.qform_code = 0;
    this.sform_code = 0;
    this.quatern_b = 0;
    this.quatern_c = 0;
    this.quatern_d = 0;
    this.qoffset_x = 0;
    this.qoffset_y = 0;
    this.qoffset_z = 0;
    this.affine = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
    this.magic = 0;
    this.extensionFlag = [0, 0, 0, 0];
};



/*** Static Pseudo-constants ***/

nifti.NIFTI2.MAGIC_COOKIE = 540;
nifti.NIFTI2.MAGIC_NUMBER_LOCATION = 4;
nifti.NIFTI2.MAGIC_NUMBER = [0x6E, 0x2B, 0x32, 0, 0x0D, 0x0A, 0x1A, 0x0A];  // n+2\0



/*** Prototype Methods ***/

/**
 * Reads the header data.
 * @param {ArrayBuffer} data
 */
nifti.NIFTI2.prototype.readHeader = function (data) {
    var rawData = new DataView(data),
        magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian),
        ctr,
        ctrOut,
        ctrIn,
        index,
        array;

    if (magicCookieVal !== nifti.NIFTI2.MAGIC_COOKIE) {  // try as little endian
        this.littleEndian = true;
        magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian);
    }

    if (magicCookieVal !== nifti.NIFTI2.MAGIC_COOKIE) {
        throw new Error("This does not appear to be a NIFTI file!");
    }

    this.datatypeCode = nifti.Utils.getShortAt(rawData, 12, this.littleEndian);
    this.numBitsPerVoxel = nifti.Utils.getShortAt(rawData, 14, this.littleEndian);

    for (ctr = 0; ctr < 8; ctr += 1) {
        index = 16 + (ctr * 8);
        this.dims[ctr] = nifti.Utils.getLongAt(rawData, index, this.littleEndian);
    }

    this.intent_p1 = nifti.Utils.getDoubleAt(rawData, 80, this.littleEndian);
    this.intent_p2 = nifti.Utils.getDoubleAt(rawData, 88, this.littleEndian);
    this.intent_p3 = nifti.Utils.getDoubleAt(rawData, 96, this.littleEndian);

    for (ctr = 0; ctr < 8; ctr += 1) {
        index = 104 + (ctr * 8);
        this.pixDims[ctr] = nifti.Utils.getDoubleAt(rawData, index, this.littleEndian);
    }

    this.vox_offset = nifti.Utils.getLongAt(rawData, 168, this.littleEndian);

    this.scl_slope = nifti.Utils.getDoubleAt(rawData, 176, this.littleEndian);
    this.scl_inter = nifti.Utils.getDoubleAt(rawData, 184, this.littleEndian);

    this.cal_max = nifti.Utils.getDoubleAt(rawData, 192, this.littleEndian);
    this.cal_min = nifti.Utils.getDoubleAt(rawData, 200, this.littleEndian);

    this.slice_duration = nifti.Utils.getDoubleAt(rawData, 208, this.littleEndian);

    this.toffset = nifti.Utils.getDoubleAt(rawData, 216, this.littleEndian);

    this.slice_start = nifti.Utils.getLongAt(rawData, 224, this.littleEndian);
    this.slice_end = nifti.Utils.getLongAt(rawData, 232, this.littleEndian);

    this.description = nifti.Utils.getStringAt(rawData, 240, 240 + 80);
    this.aux_file = nifti.Utils.getStringAt(rawData, 320, 320 + 24);

    this.qform_code = nifti.Utils.getIntAt(rawData, 344, this.littleEndian);
    this.sform_code = nifti.Utils.getIntAt(rawData, 348, this.littleEndian);

    this.quatern_b = nifti.Utils.getDoubleAt(rawData, 352, this.littleEndian);
    this.quatern_c = nifti.Utils.getDoubleAt(rawData, 360, this.littleEndian);
    this.quatern_d = nifti.Utils.getDoubleAt(rawData, 368, this.littleEndian);
    this.qoffset_x = nifti.Utils.getDoubleAt(rawData, 376, this.littleEndian);
    this.qoffset_y = nifti.Utils.getDoubleAt(rawData, 384, this.littleEndian);
    this.qoffset_z = nifti.Utils.getDoubleAt(rawData, 392, this.littleEndian);

    for (ctrOut = 0; ctrOut < 3; ctrOut += 1) {
        for (ctrIn = 0; ctrIn < 4; ctrIn += 1) {
            index = 400 + (((ctrOut * 4) + ctrIn) * 8);
            this.affine[ctrOut][ctrIn] = nifti.Utils.getDoubleAt(rawData, index, this.littleEndian);
        }
    }

    this.affine[3][0] = 0;
    this.affine[3][1] = 0;
    this.affine[3][2] = 0;
    this.affine[3][3] = 1;

    this.slice_code = nifti.Utils.getIntAt(rawData, 496, this.littleEndian);
    this.xyzt_units = nifti.Utils.getIntAt(rawData, 500, this.littleEndian);
    this.intent_code = nifti.Utils.getIntAt(rawData, 504, this.littleEndian);
    this.intent_name = nifti.Utils.getStringAt(rawData, 508, 508 + 16);

    this.dim_info = nifti.Utils.getByteAt(rawData, 524);

    if (rawData.byteLength > nifti.NIFTI2.MAGIC_COOKIE) {
        this.extensionFlag[0] = nifti.Utils.getByteAt(rawData, 540);
        this.extensionFlag[1] = nifti.Utils.getByteAt(rawData, 540 + 1);
        this.extensionFlag[2] = nifti.Utils.getByteAt(rawData, 540 + 2);
        this.extensionFlag[3] = nifti.Utils.getByteAt(rawData, 540 + 3);

        if (this.extensionFlag[0]) {
            this.extensionSize = this.getExtensionSize(rawData);
            this.extensionCode = this.getExtensionCode(rawData);
        }
    }
};



/**
 * Returns a formatted string of header fields.
 * @returns {string}
 */
nifti.NIFTI2.prototype.toFormattedString = function () {
    var fmt = nifti.Utils.formatNumber,
        string = "";

    string += ("Datatype = " +  + this.datatypeCode + " (" + this.getDatatypeCodeString(this.datatypeCode) + ")\n");
    string += ("Bits Per Voxel = " + " = " + this.numBitsPerVoxel + "\n");
    string += ("Image Dimensions" + " (1-8): " +
        this.dims[0] + ", " +
        this.dims[1] + ", " +
        this.dims[2] + ", " +
        this.dims[3] + ", " +
        this.dims[4] + ", " +
        this.dims[5] + ", " +
        this.dims[6] + ", " +
        this.dims[7] + "\n");

    string += ("Intent Parameters (1-3): " +
        this.intent_p1 + ", " +
        this.intent_p2 + ", " +
        this.intent_p3) + "\n";

    string += ("Voxel Dimensions (1-8): " +
        fmt(this.pixDims[0]) + ", " +
        fmt(this.pixDims[1]) + ", " +
        fmt(this.pixDims[2]) + ", " +
        fmt(this.pixDims[3]) + ", " +
        fmt(this.pixDims[4]) + ", " +
        fmt(this.pixDims[5]) + ", " +
        fmt(this.pixDims[6]) + ", " +
        fmt(this.pixDims[7]) + "\n");

    string += ("Image Offset = " + this.vox_offset + "\n");
    string += ("Data Scale:  Slope = " + fmt(this.scl_slope) + "  Intercept = " + fmt(this.scl_inter) + "\n");
    string += ("Display Range:  Max = " + fmt(this.cal_max) + "  Min = " + fmt(this.cal_min) + "\n");
    string += ("Slice Duration = " + this.slice_duration + "\n");
    string += ("Time Axis Shift = " + this.toffset + "\n");
    string += ("Slice Start = " + this.slice_start + "\n");
    string += ("Slice End = " + this.slice_end + "\n");
    string += ("Description: \"" + this.description + "\"\n");
    string += ("Auxiliary File: \"" + this.aux_file + "\"\n");
    string += ("Q-Form Code = " + this.qform_code + " (" + this.getTransformCodeString(this.qform_code) + ")\n");
    string += ("S-Form Code = " + this.sform_code + " (" + this.getTransformCodeString(this.sform_code) + ")\n");
    string += ("Quaternion Parameters:  " +
    "b = " + fmt(this.quatern_b) + "  " +
    "c = " + fmt(this.quatern_c) + "  " +
    "d = " + fmt(this.quatern_d) + "\n");

    string += ("Quaternion Offsets:  " +
    "x = " + this.qoffset_x + "  " +
    "y = " + this.qoffset_y + "  " +
    "z = " + this.qoffset_z + "\n");

    string += ("S-Form Parameters X: " +
    fmt(this.affine[0][0]) + ", " +
    fmt(this.affine[0][1]) + ", " +
    fmt(this.affine[0][2]) + ", " +
    fmt(this.affine[0][3]) + "\n");

    string += ("S-Form Parameters Y: " +
    fmt(this.affine[1][0]) + ", " +
    fmt(this.affine[1][1]) + ", " +
    fmt(this.affine[1][2]) + ", " +
    fmt(this.affine[1][3]) + "\n");

    string += ("S-Form Parameters Z: " +
    fmt(this.affine[2][0]) + ", " +
    fmt(this.affine[2][1]) + ", " +
    fmt(this.affine[2][2]) + ", " +
    fmt(this.affine[2][3]) + "\n");

    string += ("Slice Code = " + this.slice_code + "\n");
    string += ("Units Code = " + this.xyzt_units + " (" + this.getUnitsCodeString(nifti.NIFTI1.SPATIAL_UNITS_MASK & this.xyzt_units) + ", " + this.getUnitsCodeString(nifti.NIFTI1.TEMPORAL_UNITS_MASK & this.xyzt_units) + ")\n");
    string += ("Intent Code = " + this.intent_code + "\n");
    string += ("Intent Name: \"" + this.intent_name + "\"\n");

    string += ("Dim Info = " + this.dim_info + "\n");

    return string;
};



/**
 * Returns the byte index of the extension.
 * @returns {number}
 */
nifti.NIFTI2.prototype.getExtensionLocation = function() {
    return nifti.NIFTI2.MAGIC_COOKIE + 4;
};



/**
 * Returns the extension size.
 * @param {DataView} data
 * @returns {number}
 */
nifti.NIFTI2.prototype.getExtensionSize = nifti.NIFTI1.prototype.getExtensionSize;



/**
 * Returns the extension code.
 * @param {DataView} data
 * @returns {number}
 */
nifti.NIFTI2.prototype.getExtensionCode = nifti.NIFTI1.prototype.getExtensionCode;



/**
 * Returns a human-readable string of datatype.
 * @param {number} code
 * @returns {string}
 */
nifti.NIFTI2.prototype.getDatatypeCodeString = nifti.NIFTI1.prototype.getDatatypeCodeString;



/**
 * Returns a human-readable string of transform type.
 * @param {number} code
 * @returns {string}
 */
nifti.NIFTI2.prototype.getTransformCodeString = nifti.NIFTI1.prototype.getTransformCodeString;



/**
 * Returns a human-readable string of spatial and temporal units.
 * @param {number} code
 * @returns {string}
 */
nifti.NIFTI2.prototype.getUnitsCodeString = nifti.NIFTI1.prototype.getUnitsCodeString;



/**
 * Returns the qform matrix.
 * @returns {Array.<Array.<number>>}
 */
nifti.NIFTI2.prototype.getQformMat = nifti.NIFTI1.prototype.getQformMat;



/**
 * Converts qform to an affine.  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)
 * @param {number} qb
 * @param {number} qc
 * @param {number} qd
 * @param {number} qx
 * @param {number} qy
 * @param {number} qz
 * @param {number} dx
 * @param {number} dy
 * @param {number} dz
 * @param {number} qfac
 * @returns {Array.<Array.<number>>}
 */
nifti.NIFTI2.prototype.convertNiftiQFormToNiftiSForm = nifti.NIFTI1.prototype.convertNiftiQFormToNiftiSForm;



/**
 * Converts sform to an orientation string (e.g., XYZ+--).  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)
 * @param {Array.<Array.<number>>} R
 * @returns {string}
 */
nifti.NIFTI2.prototype.convertNiftiSFormToNEMA = nifti.NIFTI1.prototype.convertNiftiSFormToNEMA;



nifti.NIFTI2.prototype.nifti_mat33_mul = nifti.NIFTI1.prototype.nifti_mat33_mul;



nifti.NIFTI2.prototype.nifti_mat33_determ = nifti.NIFTI1.prototype.nifti_mat33_determ;



/*** Exports ***/

var moduleType = typeof module;
if ((moduleType !== 'undefined') && module.exports) {
    module.exports = nifti.NIFTI2;
}


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/nifti-reader-js/src/utilities.js":
/*!*****************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/nifti-reader-js/src/utilities.js ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*jslint browser: true, node: true */
/*global require, module */



/*** Imports ***/

var nifti = nifti || {};
nifti.Utils = nifti.Utils || {};



/*** Static Pseudo-constants ***/

nifti.Utils.crcTable = null;
nifti.Utils.GUNZIP_MAGIC_COOKIE1 = 31;
nifti.Utils.GUNZIP_MAGIC_COOKIE2 = 139;



/*** Static methods ***/

nifti.Utils.getStringAt = function (data, start, end) {
    var str = "", ctr, ch;

    for (ctr = start; ctr < end; ctr += 1) {
        ch = data.getUint8(ctr);

        if (ch !== 0) {
            str += String.fromCharCode(ch);
        }
    }

    return str;
};



nifti.Utils.getByteAt = function (data, start) {
    return data.getInt8(start);
};



nifti.Utils.getShortAt = function (data, start, littleEndian) {
    return data.getInt16(start, littleEndian);
};



nifti.Utils.getIntAt = function (data, start, littleEndian) {
    return data.getInt32(start, littleEndian);
};



nifti.Utils.getFloatAt = function (data, start, littleEndian) {
    return data.getFloat32(start, littleEndian);
};



nifti.Utils.getDoubleAt = function (data, start, littleEndian) {
    return data.getFloat64(start, littleEndian);
};



nifti.Utils.getLongAt = function (data, start, littleEndian) {
    var ctr, array = [], value = 0;

    for (ctr = 0; ctr < 8; ctr += 1) {
        array[ctr] = nifti.Utils.getByteAt(data, start + ctr, littleEndian);
    }

    for (ctr = array.length - 1; ctr >= 0; ctr--) {
        value = (value * 256) + array[ctr];
    }

    return value;
};



nifti.Utils.toArrayBuffer = function (buffer) {
    var ab, view, i;

    ab = new ArrayBuffer(buffer.length);
    view = new Uint8Array(ab);
    for (i = 0; i < buffer.length; i += 1) {
        view[i] = buffer[i];
    }
    return ab;
};



nifti.Utils.isString = function (obj) {
    return (typeof obj === "string" || obj instanceof String);
};


nifti.Utils.formatNumber = function (num, shortFormat) {
    var val = 0;

    if (nifti.Utils.isString(num)) {
        val = Number(num);
    } else {
        val = num;
    }

    if (shortFormat) {
        val = val.toPrecision(5);
    } else {
        val = val.toPrecision(7);
    }

    return parseFloat(val);
};



// http://stackoverflow.com/questions/18638900/javascript-crc32
nifti.Utils.makeCRCTable = function(){
    var c;
    var crcTable = [];
    for(var n =0; n < 256; n++){
        c = n;
        for(var k =0; k < 8; k++){
            c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
        }
        crcTable[n] = c;
    }
    return crcTable;
};



nifti.Utils.crc32 = function(dataView) {
    var crcTable = nifti.Utils.crcTable || (nifti.Utils.crcTable = nifti.Utils.makeCRCTable());
    var crc = 0 ^ (-1);

    for (var i = 0; i < dataView.byteLength; i++ ) {
        crc = (crc >>> 8) ^ crcTable[(crc ^ dataView.getUint8(i)) & 0xFF];
    }

    return (crc ^ (-1)) >>> 0;
};



/*** Exports ***/

var moduleType = typeof module;
if ((moduleType !== 'undefined') && module.exports) {
    module.exports = nifti.Utils;
}


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/pako/index.js":
/*!**********************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/pako/index.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Top level file is just a mixin of submodules & constants


var assign    = __webpack_require__(/*! ./lib/utils/common */ "../../../../../../neuroglancer/node_modules/pako/lib/utils/common.js").assign;

var deflate   = __webpack_require__(/*! ./lib/deflate */ "../../../../../../neuroglancer/node_modules/pako/lib/deflate.js");
var inflate   = __webpack_require__(/*! ./lib/inflate */ "../../../../../../neuroglancer/node_modules/pako/lib/inflate.js");
var constants = __webpack_require__(/*! ./lib/zlib/constants */ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/constants.js");

var pako = {};

assign(pako, deflate, inflate, constants);

module.exports = pako;


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/pako/lib/deflate.js":
/*!****************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/pako/lib/deflate.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var zlib_deflate = __webpack_require__(/*! ./zlib/deflate */ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/deflate.js");
var utils        = __webpack_require__(/*! ./utils/common */ "../../../../../../neuroglancer/node_modules/pako/lib/utils/common.js");
var strings      = __webpack_require__(/*! ./utils/strings */ "../../../../../../neuroglancer/node_modules/pako/lib/utils/strings.js");
var msg          = __webpack_require__(/*! ./zlib/messages */ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/messages.js");
var ZStream      = __webpack_require__(/*! ./zlib/zstream */ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/zstream.js");

var toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

var Z_NO_FLUSH      = 0;
var Z_FINISH        = 4;

var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_SYNC_FLUSH    = 2;

var Z_DEFAULT_COMPRESSION = -1;

var Z_DEFAULT_STRATEGY    = 0;

var Z_DEFLATED  = 8;

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overridden.
 **/

/**
 * Deflate.result -> Uint8Array|Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
 * push a chunk with explicit flush (call [[Deflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate(options) {
  if (!(this instanceof Deflate)) return new Deflate(options);

  this.options = utils.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY,
    to: ''
  }, options || {});

  var opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new ZStream();
  this.strm.avail_out = 0;

  var status = zlib_deflate.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK) {
    throw new Error(msg[status]);
  }

  if (opt.header) {
    zlib_deflate.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    var dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = zlib_deflate.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK) {
      throw new Error(msg[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the compression context.
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * array format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var status, _mode;

  if (this.ended) { return false; }

  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */

    if (status !== Z_STREAM_END && status !== Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }
    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {
      if (this.options.to === 'string') {
        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
      } else {
        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
      }
    }
  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);

  // Finalize on the last chunk.
  if (_mode === Z_FINISH) {
    status = zlib_deflate.deflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === Z_SYNC_FLUSH) {
    this.onEnd(Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): output data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate(input, options) {
  var deflator = new Deflate(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }

  return deflator.result;
}


/**
 * deflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate(input, options);
}


/**
 * gzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate(input, options);
}


exports.Deflate = Deflate;
exports.deflate = deflate;
exports.deflateRaw = deflateRaw;
exports.gzip = gzip;


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/pako/lib/inflate.js":
/*!****************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/pako/lib/inflate.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var zlib_inflate = __webpack_require__(/*! ./zlib/inflate */ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/inflate.js");
var utils        = __webpack_require__(/*! ./utils/common */ "../../../../../../neuroglancer/node_modules/pako/lib/utils/common.js");
var strings      = __webpack_require__(/*! ./utils/strings */ "../../../../../../neuroglancer/node_modules/pako/lib/utils/strings.js");
var c            = __webpack_require__(/*! ./zlib/constants */ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/constants.js");
var msg          = __webpack_require__(/*! ./zlib/messages */ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/messages.js");
var ZStream      = __webpack_require__(/*! ./zlib/zstream */ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/zstream.js");
var GZheader     = __webpack_require__(/*! ./zlib/gzheader */ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/gzheader.js");

var toString = Object.prototype.toString;

/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overridden.
 **/

/**
 * Inflate.result -> Uint8Array|Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
 * push a chunk with explicit flush (call [[Inflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate(options) {
  if (!(this instanceof Inflate)) return new Inflate(options);

  this.options = utils.assign({
    chunkSize: 16384,
    windowBits: 0,
    to: ''
  }, options || {});

  var opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new ZStream();
  this.strm.avail_out = 0;

  var status  = zlib_inflate.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== c.Z_OK) {
    throw new Error(msg[status]);
  }

  this.header = new GZheader();

  zlib_inflate.inflateGetHeader(this.strm, this.header);

  // Setup dictionary
  if (opt.dictionary) {
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      opt.dictionary = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      opt.dictionary = new Uint8Array(opt.dictionary);
    }
    if (opt.raw) { //In raw mode we need to set the dictionary early
      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);
      if (status !== c.Z_OK) {
        throw new Error(msg[status]);
      }
    }
  }
}

/**
 * Inflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var dictionary = this.options.dictionary;
  var status, _mode;
  var next_out_utf8, tail, utf8str;

  // Flag to properly process Z_BUF_ERROR on testing inflate call
  // when we check that all output data was flushed.
  var allowBufError = false;

  if (this.ended) { return false; }
  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // Only binary strings can be decompressed on practice
    strm.input = strings.binstring2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */

    if (status === c.Z_NEED_DICT && dictionary) {
      status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);
    }

    if (status === c.Z_BUF_ERROR && allowBufError === true) {
      status = c.Z_OK;
      allowBufError = false;
    }

    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {

        if (this.options.to === 'string') {

          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          tail = strm.next_out - next_out_utf8;
          utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

          this.onData(utf8str);

        } else {
          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
        }
      }
    }

    // When no more input data, we should check that internal inflate buffers
    // are flushed. The only way to do it when avail_out = 0 - run one more
    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
    // Here we set flag to process this error properly.
    //
    // NOTE. Deflate does not return error in this case and does not needs such
    // logic.
    if (strm.avail_in === 0 && strm.avail_out === 0) {
      allowBufError = true;
    }

  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);

  if (status === c.Z_STREAM_END) {
    _mode = c.Z_FINISH;
  }

  // Finalize on the last chunk.
  if (_mode === c.Z_FINISH) {
    status = zlib_inflate.inflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === c.Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === c.Z_SYNC_FLUSH) {
    this.onEnd(c.Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): output data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === c.Z_OK) {
    if (this.options.to === 'string') {
      // Glue & convert here, until we teach pako to send
      // utf8 aligned strings to onData
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
 *   , output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err)
 *   console.log(err);
 * }
 * ```
 **/
function inflate(input, options) {
  var inflator = new Inflate(options);

  inflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }

  return inflator.result;
}


/**
 * inflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return inflate(input, options);
}


/**
 * ungzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


exports.Inflate = Inflate;
exports.inflate = inflate;
exports.inflateRaw = inflateRaw;
exports.ungzip  = inflate;


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/pako/lib/utils/common.js":
/*!*********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/pako/lib/utils/common.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');

function _has(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/pako/lib/utils/strings.js":
/*!**********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/pako/lib/utils/strings.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// String encode/decode helpers



var utils = __webpack_require__(/*! ./common */ "../../../../../../neuroglancer/node_modules/pako/lib/utils/common.js");


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safari
//
var STR_APPLY_OK = true;
var STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new utils.Buf8(256);
for (var q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
exports.string2buf = function (str) {
  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new utils.Buf8(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper (used in 2 places)
function buf2binstring(buf, len) {
  // On Chrome, the arguments in a function call that are allowed is `65534`.
  // If the length of the buffer is smaller than that, we can use this optimization,
  // otherwise we will take a slower path.
  if (len < 65534) {
    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
    }
  }

  var result = '';
  for (var i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
}


// Convert byte array to binary string
exports.buf2binstring = function (buf) {
  return buf2binstring(buf, buf.length);
};


// Convert binary string (typed, when possible)
exports.binstring2buf = function (str) {
  var buf = new utils.Buf8(str.length);
  for (var i = 0, len = buf.length; i < len; i++) {
    buf[i] = str.charCodeAt(i);
  }
  return buf;
};


// convert array to string
exports.buf2string = function (buf, max) {
  var i, out, c, c_len;
  var len = max || buf.length;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  var utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
exports.utf8border = function (buf, max) {
  var pos;

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means buffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/adler32.js":
/*!*********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/pako/lib/zlib/adler32.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/constants.js":
/*!***********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/pako/lib/zlib/constants.js ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/crc32.js":
/*!*******************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/pako/lib/zlib/crc32.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/deflate.js":
/*!*********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/pako/lib/zlib/deflate.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils   = __webpack_require__(/*! ../utils/common */ "../../../../../../neuroglancer/node_modules/pako/lib/utils/common.js");
var trees   = __webpack_require__(/*! ./trees */ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/trees.js");
var adler32 = __webpack_require__(/*! ./adler32 */ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/adler32.js");
var crc32   = __webpack_require__(/*! ./crc32 */ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/crc32.js");
var msg     = __webpack_require__(/*! ./messages */ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/messages.js");

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
        );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}


exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/gzheader.js":
/*!**********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/pako/lib/zlib/gzheader.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

module.exports = GZheader;


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/inffast.js":
/*!*********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/pako/lib/zlib/inffast.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/inflate.js":
/*!*********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/pako/lib/zlib/inflate.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils         = __webpack_require__(/*! ../utils/common */ "../../../../../../neuroglancer/node_modules/pako/lib/utils/common.js");
var adler32       = __webpack_require__(/*! ./adler32 */ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/adler32.js");
var crc32         = __webpack_require__(/*! ./crc32 */ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/crc32.js");
var inflate_fast  = __webpack_require__(/*! ./inffast */ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/inffast.js");
var inflate_table = __webpack_require__(/*! ./inftrees */ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/inftrees.js");

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        state.flags = 0;           /* expect zlib header */
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }
        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f)/*BITS(4)*/ + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        }
        else if (len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }
        state.dmax = 1 << len;
        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }
        if (state.head) {
          state.head.text = ((hold >> 8) & 1);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
        /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          hbuf[2] = (hold >>> 16) & 0xff;
          hbuf[3] = (hold >>> 24) & 0xff;
          state.check = crc32(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
        /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = (hold & 0xff);
          state.head.os = (hold >> 8);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
        /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        else if (state.head) {
          state.head.extra = null/*Z_NULL*/;
        }
        state.mode = EXTRA;
        /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) { copy = have; }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more convenient processing later
                state.head.extra = new Array(state.head.extra_len);
              }
              utils.arraySet(
                state.head.extra,
                input,
                next,
                // extra field is limited to 65536 bytes
                // - no need for additional size check
                copy,
                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                len
              );
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) { break inf_leave; }
        }
        state.length = 0;
        state.mode = NAME;
        /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/)) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
        /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/)) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
        /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = ((state.flags >> 9) & 1);
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
        /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE;
        /* falls through */
      case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = (hold & 0x01)/*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch ((hold & 0x03)/*BITS(2)*/) {
          case 0:                             /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:                             /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_;             /* decode codes */
            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:                             /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case COPY_:
        state.mode = COPY;
        /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) { copy = have; }
          if (copy > left) { copy = left; }
          if (copy === 0) { break inf_leave; }
          //--- zmemcpy(put, next, copy); ---
          utils.arraySet(output, input, next, copy, put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
//#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
        /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;

        opts = { bits: state.lenbits };
        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
        /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          }
          else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03);//BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            }
            else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f);//BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD) { break; }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;

        opts = { bits: state.lenbits };
        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }

        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case LEN_:
        state.mode = LEN;
        /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inflate_fast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
        /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
        /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = (here_op) & 15;
        state.mode = DISTEXT;
        /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
//#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
        /* falls through */
      case MATCH:
        if (left === 0) { break inf_leave; }
        copy = _out - left;
        if (state.offset > copy) {         /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          }
          else {
            from = state.wnext - copy;
          }
          if (copy > state.length) { copy = state.length; }
          from_source = state.window;
        }
        else {                              /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) { copy = left; }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) { state.mode = LEN; }
        break;
      case LIT:
        if (left === 0) { break inf_leave; }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            // Use '|' instead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if (_out) {
            strm.adler = state.check =
                /*UPDATE(state.check, put - _out, _out);*/
                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
        /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
        /* falls through */
      case DONE:
        ret = Z_STREAM_END;
        break inf_leave;
      case BAD:
        ret = Z_DATA_ERROR;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR;
      case SYNC:
        /* falls through */
      default:
        return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/inftrees.js":
/*!**********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/pako/lib/zlib/inftrees.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils = __webpack_require__(/*! ../utils/common */ "../../../../../../neuroglancer/node_modules/pako/lib/utils/common.js");

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/messages.js":
/*!**********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/pako/lib/zlib/messages.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/trees.js":
/*!*******************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/pako/lib/zlib/trees.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

/* eslint-disable space-unary-ops */

var utils = __webpack_require__(/*! ../utils/common */ "../../../../../../neuroglancer/node_modules/pako/lib/utils/common.js");

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;


/***/ }),

/***/ "../../../../../../neuroglancer/node_modules/pako/lib/zlib/zstream.js":
/*!*********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/node_modules/pako/lib/zlib/zstream.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/annotation/backend.ts":
/*!**********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/annotation/backend.ts ***!
  \**********************************************************************************************************/
/*! exports provided: AnnotationMetadataChunk, AnnotationGeometryData, AnnotationGeometryChunk, AnnotationSubsetGeometryChunk, AnnotationSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationMetadataChunk", function() { return AnnotationMetadataChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationGeometryData", function() { return AnnotationGeometryData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationGeometryChunk", function() { return AnnotationGeometryChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationSubsetGeometryChunk", function() { return AnnotationSubsetGeometryChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationSource", function() { return AnnotationSource; });
/* harmony import */ var neuroglancer_annotation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/annotation */ "../../../../../../neuroglancer/src/neuroglancer/annotation/index.ts");
/* harmony import */ var neuroglancer_annotation_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/annotation/base */ "../../../../../../neuroglancer/src/neuroglancer/annotation/base.ts");
/* harmony import */ var neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/chunk_manager/backend */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/backend.ts");
/* harmony import */ var neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/chunk_manager/base */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/base.ts");
/* harmony import */ var neuroglancer_perspective_view_backend__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! neuroglancer/perspective_view/backend */ "../../../../../../neuroglancer/src/neuroglancer/perspective_view/backend.ts");
/* harmony import */ var neuroglancer_segmentation_display_state_base__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! neuroglancer/segmentation_display_state/base */ "../../../../../../neuroglancer/src/neuroglancer/segmentation_display_state/base.ts");
/* harmony import */ var neuroglancer_sliceview_backend__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! neuroglancer/sliceview/backend */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend.ts");
/* harmony import */ var neuroglancer_trackable_value__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! neuroglancer/trackable_value */ "../../../../../../neuroglancer/src/neuroglancer/trackable_value.ts");
/* harmony import */ var neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! neuroglancer/util/geom */ "../../../../../../neuroglancer/src/neuroglancer/util/geom.ts");
/* harmony import */ var neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! neuroglancer/visibility_priority/backend */ "../../../../../../neuroglancer/src/neuroglancer/visibility_priority/backend.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/**
 * @license
 * Copyright 2018 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};












const ANNOTATION_METADATA_CHUNK_PRIORITY = 200;
const ANNOTATION_SEGMENT_FILTERED_CHUNK_PRIORITY = 60;
class AnnotationMetadataChunk extends neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_2__["Chunk"] {
    freeSystemMemory() {
        this.annotation = undefined;
    }
    serialize(msg, transfers) {
        super.serialize(msg, transfers);
        msg.annotation = this.annotation;
    }
    downloadSucceeded() {
        this.systemMemoryBytes = this.gpuMemoryBytes = 0;
        super.downloadSucceeded();
    }
}
class AnnotationGeometryData {
    serialize(msg, transfers) {
        msg.data = this.data;
        msg.typeToOffset = this.typeToOffset;
        msg.typeToIds = this.typeToIds;
        msg.segmentList = this.segmentList;
        msg.segmentListIndex = this.segmentListIndex;
        transfers.push(this.data.buffer, this.segmentList.buffer, this.segmentListIndex.buffer);
    }
    get numBytes() {
        return this.data.byteLength;
    }
}
function GeometryChunkMixin(Base) {
    class C extends Base {
        serialize(msg, transfers) {
            super.serialize(msg, transfers);
            this.data.serialize(msg, transfers);
            this.data = undefined;
        }
        downloadSucceeded() {
            this.systemMemoryBytes = this.gpuMemoryBytes = this.data.numBytes;
            super.downloadSucceeded();
        }
        freeSystemMemory() {
            this.data = undefined;
        }
    }
    return C;
}
class AnnotationGeometryChunk extends GeometryChunkMixin(neuroglancer_sliceview_backend__WEBPACK_IMPORTED_MODULE_6__["SliceViewChunk"]) {
}
class AnnotationSubsetGeometryChunk extends GeometryChunkMixin(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_2__["Chunk"]) {
}
let AnnotationMetadataChunkSource = class AnnotationMetadataChunkSource extends neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_2__["ChunkSource"] {
    constructor() {
        super(...arguments);
        this.parent = undefined;
    }
    getChunk(id) {
        const { chunks } = this;
        let chunk = chunks.get(id);
        if (chunk === undefined) {
            chunk = this.getNewChunk_(AnnotationMetadataChunk);
            chunk.initialize(id);
            this.addChunk(chunk);
        }
        return chunk;
    }
    download(chunk, cancellationToken) {
        return this.parent.downloadMetadata(chunk, cancellationToken);
    }
};
AnnotationMetadataChunkSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__["registerSharedObject"])(neuroglancer_annotation_base__WEBPACK_IMPORTED_MODULE_1__["ANNOTATION_METADATA_CHUNK_SOURCE_RPC_ID"])
], AnnotationMetadataChunkSource);
let AnnotationGeometryChunkSource = class AnnotationGeometryChunkSource extends neuroglancer_sliceview_backend__WEBPACK_IMPORTED_MODULE_6__["SliceViewChunkSource"] {
    constructor(rpc, options) {
        super(rpc, options);
        this.parent = undefined;
        this.spec = new neuroglancer_annotation_base__WEBPACK_IMPORTED_MODULE_1__["AnnotationGeometryChunkSpecification"](options.spec);
    }
    download(chunk, cancellationToken) {
        return this.parent.downloadGeometry(chunk, cancellationToken);
    }
};
AnnotationGeometryChunkSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__["registerSharedObject"])(neuroglancer_annotation_base__WEBPACK_IMPORTED_MODULE_1__["ANNOTATION_GEOMETRY_CHUNK_SOURCE_RPC_ID"])
], AnnotationGeometryChunkSource);
AnnotationGeometryChunkSource.prototype.chunkConstructor = AnnotationGeometryChunk;
let AnnotationSubsetGeometryChunkSource = class AnnotationSubsetGeometryChunkSource extends neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_2__["ChunkSource"] {
    constructor(rpc, options) {
        super(rpc, options);
        this.parent = undefined;
    }
    getChunk(objectId) {
        const key = Object(neuroglancer_segmentation_display_state_base__WEBPACK_IMPORTED_MODULE_5__["getObjectKey"])(objectId);
        const { chunks } = this;
        let chunk = chunks.get(key);
        if (chunk === undefined) {
            chunk = this.getNewChunk_(AnnotationSubsetGeometryChunk);
            chunk.initialize(key);
            chunk.objectId = objectId.clone();
            this.addChunk(chunk);
        }
        return chunk;
    }
    download(chunk, cancellationToken) {
        return this.parent.downloadSegmentFilteredGeometry(chunk, cancellationToken);
    }
};
AnnotationSubsetGeometryChunkSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__["registerSharedObject"])(neuroglancer_annotation_base__WEBPACK_IMPORTED_MODULE_1__["ANNOTATION_SUBSET_GEOMETRY_CHUNK_SOURCE_RPC_ID"])
], AnnotationSubsetGeometryChunkSource);
class AnnotationSource extends neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__["SharedObjectCounterpart"] {
    constructor(rpc, options) {
        super(rpc, options);
        this.references = new Set();
        const chunkManager = this.chunkManager = rpc.get(options.chunkManager);
        const metadataChunkSource = this.metadataChunkSource = this.registerDisposer(rpc.getRef(options.metadataChunkSource));
        this.sources = options.sources.map(alternatives => alternatives.map(id => {
            const source = this.registerDisposer(rpc.getRef(id));
            source.parent = this;
            return source;
        }));
        this.segmentFilteredSource = this.registerDisposer(rpc.getRef(options.segmentFilteredSource));
        this.segmentFilteredSource.parent = this;
        metadataChunkSource.parent = this;
        this.registerDisposer(chunkManager.recomputeChunkPriorities.add(() => this.recomputeChunkPriorities()));
    }
    recomputeChunkPriorities() {
        const { chunkManager, metadataChunkSource } = this;
        for (const id of this.references) {
            chunkManager.requestChunk(metadataChunkSource.getChunk(id), neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_3__["ChunkPriorityTier"].VISIBLE, ANNOTATION_METADATA_CHUNK_PRIORITY);
        }
    }
    add(annotation) {
        annotation;
        throw new Error('Not implemented');
    }
    delete(id) {
        id;
        throw new Error('Not implemented');
    }
    update(id, newAnnotation) {
        id;
        newAnnotation;
        throw new Error('Not implemented');
    }
}
Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__["registerRPC"])(neuroglancer_annotation_base__WEBPACK_IMPORTED_MODULE_1__["ANNOTATION_REFERENCE_ADD_RPC_ID"], function (x) {
    const obj = this.get(x.id);
    obj.references.add(x.annotation);
    obj.chunkManager.scheduleUpdateChunkPriorities();
});
Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__["registerRPC"])(neuroglancer_annotation_base__WEBPACK_IMPORTED_MODULE_1__["ANNOTATION_REFERENCE_DELETE_RPC_ID"], function (x) {
    const obj = this.get(x.id);
    obj.references.delete(x.annotation);
    obj.chunkManager.scheduleUpdateChunkPriorities();
});
Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__["registerRPC"])(neuroglancer_annotation_base__WEBPACK_IMPORTED_MODULE_1__["ANNOTATION_COMMIT_UPDATE_RPC_ID"], function (x) {
    const obj = this.get(x.id);
    const annotationId = x.annotationId;
    const newAnnotation = Object(neuroglancer_annotation__WEBPACK_IMPORTED_MODULE_0__["deserializeAnnotation"])(x.newAnnotation);
    let promise;
    if (annotationId === undefined) {
        promise = obj.add(newAnnotation).then(id => (Object.assign({}, newAnnotation, { id })));
    }
    else if (newAnnotation === null) {
        promise = obj.delete(annotationId).then(() => null);
    }
    else {
        promise = obj.update(annotationId, newAnnotation).then(() => newAnnotation);
    }
    // FIXME: Handle new chunks requested prior to update but not yet sent to frontend.
    promise.then(result => {
        if (!obj.wasDisposed) {
            this.invoke(neuroglancer_annotation_base__WEBPACK_IMPORTED_MODULE_1__["ANNOTATION_COMMIT_UPDATE_RESULT_RPC_ID"], {
                id: obj.rpcId,
                annotationId: annotationId || newAnnotation.id,
                newAnnotation: result
            });
        }
    }, (error) => {
        if (!obj.wasDisposed) {
            this.invoke(neuroglancer_annotation_base__WEBPACK_IMPORTED_MODULE_1__["ANNOTATION_COMMIT_UPDATE_RESULT_RPC_ID"], { id: obj.rpcId, annotationId, error: error.message });
        }
    });
});
let AnnotationPerspectiveRenderLayer = class AnnotationPerspectiveRenderLayer extends neuroglancer_perspective_view_backend__WEBPACK_IMPORTED_MODULE_4__["PerspectiveViewRenderLayer"] {
    constructor(rpc, options) {
        super(rpc, options);
        this.source = rpc.get(options.source);
        this.filterBySegmentation = rpc.get(options.filterBySegmentation);
        this.viewStates.changed.add(() => this.source.chunkManager.scheduleUpdateChunkPriorities());
        this.filterBySegmentation.changed.add(() => this.source.chunkManager.scheduleUpdateChunkPriorities());
        this.registerDisposer(this.source.chunkManager.recomputeChunkPriorities.add(() => this.recomputeChunkPriorities()));
    }
    recomputeChunkPriorities() {
        const { source } = this;
        if (this.filterBySegmentation.value) {
            return;
        }
        for (const state of this.viewStates) {
            const visibility = state.visibility.value;
            if (visibility === Number.NEGATIVE_INFINITY) {
                continue;
            }
            const priorityTier = Object(neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_9__["getPriorityTier"])(visibility);
            const basePriority = Object(neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_9__["getBasePriority"])(visibility);
            // FIXME: priority should be based on location
            for (const alternatives of source.sources) {
                for (const geometrySource of alternatives) {
                    const chunk = geometrySource.getChunk(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_8__["kZeroVec"]);
                    source.chunkManager.requestChunk(chunk, priorityTier, basePriority);
                }
            }
        }
    }
};
AnnotationPerspectiveRenderLayer = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__["registerSharedObject"])(neuroglancer_annotation_base__WEBPACK_IMPORTED_MODULE_1__["ANNOTATION_PERSPECTIVE_RENDER_LAYER_RPC_ID"])
], AnnotationPerspectiveRenderLayer);
AnnotationPerspectiveRenderLayer;
let AnnotationLayerSharedObjectCounterpart = class AnnotationLayerSharedObjectCounterpart extends Object(neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_9__["withSharedVisibility"])(Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_2__["withChunkManager"])(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__["SharedObjectCounterpart"])) {
    constructor(rpc, options) {
        super(rpc, options);
        this.segmentationState = new neuroglancer_trackable_value__WEBPACK_IMPORTED_MODULE_7__["WatchableValue"](undefined);
        this.source = rpc.get(options.source);
        this.segmentationState.value = this.getSegmentationState(options.segmentationState);
        const scheduleUpdateChunkPriorities = () => this.chunkManager.scheduleUpdateChunkPriorities();
        this.registerDisposer(Object(neuroglancer_trackable_value__WEBPACK_IMPORTED_MODULE_7__["registerNested"])(this.segmentationState, (context, state) => {
            if (state != null) {
                context.registerDisposer(state.rootSegments.changed.add(scheduleUpdateChunkPriorities));
                context.registerDisposer(state.segmentEquivalences.changed.add(scheduleUpdateChunkPriorities));
            }
        }));
        this.registerDisposer(this.chunkManager.recomputeChunkPriorities.add(() => this.recomputeChunkPriorities()));
    }
    recomputeChunkPriorities() {
        const state = this.segmentationState.value;
        if (state == null) {
            return;
        }
        const visibility = this.visibility.value;
        if (visibility === Number.NEGATIVE_INFINITY) {
            return;
        }
        const priorityTier = Object(neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_9__["getPriorityTier"])(visibility);
        const basePriority = Object(neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_9__["getBasePriority"])(visibility);
        const { chunkManager } = this;
        const source = this.source.segmentFilteredSource;
        Object(neuroglancer_segmentation_display_state_base__WEBPACK_IMPORTED_MODULE_5__["forEachRootSegment"])(state, objectId => {
            const chunk = source.getChunk(objectId);
            chunkManager.requestChunk(chunk, priorityTier, basePriority + ANNOTATION_SEGMENT_FILTERED_CHUNK_PRIORITY);
        });
    }
    getSegmentationState(msg) {
        if (msg == null) {
            return msg;
        }
        return {
            rootSegments: this.rpc.get(msg.rootSegments),
            visibleSegments2D: this.rpc.get(msg.visibleSegments2D),
            visibleSegments3D: this.rpc.get(msg.visibleSegments3D),
            segmentEquivalences: this.rpc.get(msg.segmentEquivalences)
        };
    }
};
AnnotationLayerSharedObjectCounterpart = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__["registerSharedObject"])(neuroglancer_annotation_base__WEBPACK_IMPORTED_MODULE_1__["ANNOTATION_RENDER_LAYER_RPC_ID"])
], AnnotationLayerSharedObjectCounterpart);
AnnotationLayerSharedObjectCounterpart;
Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__["registerRPC"])(neuroglancer_annotation_base__WEBPACK_IMPORTED_MODULE_1__["ANNOTATION_RENDER_LAYER_UPDATE_SEGMENTATION_RPC_ID"], function (x) {
    const obj = this.get(x.id);
    obj.segmentationState.value = obj.getSegmentationState(x.segmentationState);
});


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/annotation/base.ts":
/*!*******************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/annotation/base.ts ***!
  \*******************************************************************************************************/
/*! exports provided: ANNOTATION_METADATA_CHUNK_SOURCE_RPC_ID, ANNOTATION_GEOMETRY_CHUNK_SOURCE_RPC_ID, ANNOTATION_SUBSET_GEOMETRY_CHUNK_SOURCE_RPC_ID, ANNOTATION_REFERENCE_ADD_RPC_ID, ANNOTATION_REFERENCE_DELETE_RPC_ID, ANNOTATION_COMMIT_UPDATE_RPC_ID, ANNOTATION_COMMIT_UPDATE_RESULT_RPC_ID, AnnotationGeometryChunkSpecification, ANNOTATION_PERSPECTIVE_RENDER_LAYER_RPC_ID, ANNOTATION_RENDER_LAYER_RPC_ID, ANNOTATION_RENDER_LAYER_UPDATE_SEGMENTATION_RPC_ID */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ANNOTATION_METADATA_CHUNK_SOURCE_RPC_ID", function() { return ANNOTATION_METADATA_CHUNK_SOURCE_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ANNOTATION_GEOMETRY_CHUNK_SOURCE_RPC_ID", function() { return ANNOTATION_GEOMETRY_CHUNK_SOURCE_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ANNOTATION_SUBSET_GEOMETRY_CHUNK_SOURCE_RPC_ID", function() { return ANNOTATION_SUBSET_GEOMETRY_CHUNK_SOURCE_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ANNOTATION_REFERENCE_ADD_RPC_ID", function() { return ANNOTATION_REFERENCE_ADD_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ANNOTATION_REFERENCE_DELETE_RPC_ID", function() { return ANNOTATION_REFERENCE_DELETE_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ANNOTATION_COMMIT_UPDATE_RPC_ID", function() { return ANNOTATION_COMMIT_UPDATE_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ANNOTATION_COMMIT_UPDATE_RESULT_RPC_ID", function() { return ANNOTATION_COMMIT_UPDATE_RESULT_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationGeometryChunkSpecification", function() { return AnnotationGeometryChunkSpecification; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ANNOTATION_PERSPECTIVE_RENDER_LAYER_RPC_ID", function() { return ANNOTATION_PERSPECTIVE_RENDER_LAYER_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ANNOTATION_RENDER_LAYER_RPC_ID", function() { return ANNOTATION_RENDER_LAYER_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ANNOTATION_RENDER_LAYER_UPDATE_SEGMENTATION_RPC_ID", function() { return ANNOTATION_RENDER_LAYER_UPDATE_SEGMENTATION_RPC_ID; });
/* harmony import */ var neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/sliceview/base */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/base.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const ANNOTATION_METADATA_CHUNK_SOURCE_RPC_ID = 'annotation.MetadataChunkSource';
const ANNOTATION_GEOMETRY_CHUNK_SOURCE_RPC_ID = 'annotation.GeometryChunkSource';
const ANNOTATION_SUBSET_GEOMETRY_CHUNK_SOURCE_RPC_ID = 'annotation.SubsetGeometryChunkSource';
const ANNOTATION_REFERENCE_ADD_RPC_ID = 'annotation.reference.add';
const ANNOTATION_REFERENCE_DELETE_RPC_ID = 'annotation.reference.delete';
const ANNOTATION_COMMIT_UPDATE_RPC_ID = 'annotation.commit';
const ANNOTATION_COMMIT_UPDATE_RESULT_RPC_ID = 'annotation.commit';
class AnnotationGeometryChunkSpecification extends neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_0__["SliceViewChunkSpecification"] {
}
const ANNOTATION_PERSPECTIVE_RENDER_LAYER_RPC_ID = 'annotation/PerspectiveRenderLayer';
const ANNOTATION_RENDER_LAYER_RPC_ID = 'annotation/RenderLayer';
const ANNOTATION_RENDER_LAYER_UPDATE_SEGMENTATION_RPC_ID = 'annotation/RenderLayer.updateSegmentation';


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/annotation/index.ts":
/*!********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/annotation/index.ts ***!
  \********************************************************************************************************/
/*! exports provided: AnnotationReference, AnnotationType, annotationTypes, getAnnotationTypeHandler, annotationToJson, restoreAnnotation, AnnotationSource, LocalAnnotationSource, DATA_BOUNDS_DESCRIPTION, makeAnnotationId, makeDataBoundsBoundingBox, serializeAnnotations, AnnotationSerializer, deserializeAnnotation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationReference", function() { return AnnotationReference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationType", function() { return AnnotationType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "annotationTypes", function() { return annotationTypes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAnnotationTypeHandler", function() { return getAnnotationTypeHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "annotationToJson", function() { return annotationToJson; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "restoreAnnotation", function() { return restoreAnnotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationSource", function() { return AnnotationSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LocalAnnotationSource", function() { return LocalAnnotationSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DATA_BOUNDS_DESCRIPTION", function() { return DATA_BOUNDS_DESCRIPTION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeAnnotationId", function() { return makeAnnotationId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeDataBoundsBoundingBox", function() { return makeDataBoundsBoundingBox; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "serializeAnnotations", function() { return serializeAnnotations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationSerializer", function() { return AnnotationSerializer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deserializeAnnotation", function() { return deserializeAnnotation; });
/* harmony import */ var neuroglancer_trackable_boolean__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/trackable_boolean */ "../../../../../../neuroglancer/src/neuroglancer/trackable_boolean.ts");
/* harmony import */ var neuroglancer_util_disposable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/disposable */ "../../../../../../neuroglancer/src/neuroglancer/util/disposable.ts");
/* harmony import */ var neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/util/geom */ "../../../../../../neuroglancer/src/neuroglancer/util/geom.ts");
/* harmony import */ var neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/util/json */ "../../../../../../neuroglancer/src/neuroglancer/util/json.ts");
/* harmony import */ var neuroglancer_util_random__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! neuroglancer/util/random */ "../../../../../../neuroglancer/src/neuroglancer/util/random.ts");
/* harmony import */ var neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! neuroglancer/util/signal */ "../../../../../../neuroglancer/src/neuroglancer/util/signal.ts");
/* harmony import */ var neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! neuroglancer/util/uint64 */ "../../../../../../neuroglancer/src/neuroglancer/util/uint64.ts");
/**
 * @license
 * Copyright 2018 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @file Basic annotation data structures.
 */







class AnnotationReference extends neuroglancer_util_disposable__WEBPACK_IMPORTED_MODULE_1__["RefCounted"] {
    constructor(id) {
        super();
        this.id = id;
        this.changed = new neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_5__["NullarySignal"]();
    }
}
var AnnotationType;
(function (AnnotationType) {
    AnnotationType[AnnotationType["POINT"] = 0] = "POINT";
    AnnotationType[AnnotationType["LINE"] = 1] = "LINE";
    AnnotationType[AnnotationType["AXIS_ALIGNED_BOUNDING_BOX"] = 2] = "AXIS_ALIGNED_BOUNDING_BOX";
    AnnotationType[AnnotationType["ELLIPSOID"] = 3] = "ELLIPSOID";
    AnnotationType[AnnotationType["COLLECTION"] = 4] = "COLLECTION";
    AnnotationType[AnnotationType["LINE_STRIP"] = 5] = "LINE_STRIP";
    AnnotationType[AnnotationType["SPOKE"] = 6] = "SPOKE";
})(AnnotationType || (AnnotationType = {}));
const annotationTypes = [
    AnnotationType.POINT, AnnotationType.LINE, AnnotationType.AXIS_ALIGNED_BOUNDING_BOX,
    AnnotationType.ELLIPSOID, AnnotationType.COLLECTION, AnnotationType.LINE_STRIP,
    AnnotationType.SPOKE
];
const typeHandlers = new Map();
function getAnnotationTypeHandler(type) {
    return typeHandlers.get(type);
}
typeHandlers.set(AnnotationType.LINE, {
    icon: 'ꕹ',
    description: 'Line',
    title: 'Annotate line',
    toJSON: (annotation) => {
        return {
            pointA: Array.from(annotation.pointA),
            pointB: Array.from(annotation.pointB),
        };
    },
    restoreState: (annotation, obj) => {
        annotation.pointA = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyObjectProperty"])(obj, 'pointA', neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verify3dVec"]);
        annotation.pointB = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyObjectProperty"])(obj, 'pointB', neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verify3dVec"]);
    },
    serializedBytes: 6 * 4,
    serializer: (buffer, offset, numAnnotations) => {
        const coordinates = new Float32Array(buffer, offset, numAnnotations * 6);
        return (annotation, index) => {
            const { pointA, pointB } = annotation;
            const coordinateOffset = index * 6;
            coordinates[coordinateOffset] = pointA[0];
            coordinates[coordinateOffset + 1] = pointA[1];
            coordinates[coordinateOffset + 2] = pointA[2];
            coordinates[coordinateOffset + 3] = pointB[0];
            coordinates[coordinateOffset + 4] = pointB[1];
            coordinates[coordinateOffset + 5] = pointB[2];
        };
    },
});
typeHandlers.set(AnnotationType.POINT, {
    icon: '⚬',
    description: 'Point',
    title: 'Annotate Point',
    toJSON: (annotation) => {
        return {
            point: Array.from(annotation.point),
        };
    },
    restoreState: (annotation, obj) => {
        annotation.point = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyObjectProperty"])(obj, 'point', neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verify3dVec"]);
    },
    serializedBytes: 3 * 4,
    serializer: (buffer, offset, numAnnotations) => {
        const coordinates = new Float32Array(buffer, offset, numAnnotations * 3);
        return (annotation, index) => {
            const { point } = annotation;
            const coordinateOffset = index * 3;
            coordinates[coordinateOffset] = point[0];
            coordinates[coordinateOffset + 1] = point[1];
            coordinates[coordinateOffset + 2] = point[2];
        };
    },
});
typeHandlers.set(AnnotationType.AXIS_ALIGNED_BOUNDING_BOX, {
    icon: '❑',
    description: 'Bounding Box',
    title: 'Annotate bounding box',
    toJSON: (annotation) => {
        return {
            pointA: Array.from(annotation.pointA),
            pointB: Array.from(annotation.pointB),
        };
    },
    restoreState: (annotation, obj) => {
        annotation.pointA = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyObjectProperty"])(obj, 'pointA', neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verify3dVec"]);
        annotation.pointB = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyObjectProperty"])(obj, 'pointB', neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verify3dVec"]);
    },
    serializedBytes: 6 * 4,
    serializer: (buffer, offset, numAnnotations) => {
        const coordinates = new Float32Array(buffer, offset, numAnnotations * 6);
        return (annotation, index) => {
            const { pointA, pointB } = annotation;
            const coordinateOffset = index * 6;
            coordinates[coordinateOffset] = Math.min(pointA[0], pointB[0]);
            coordinates[coordinateOffset + 1] = Math.min(pointA[1], pointB[1]);
            coordinates[coordinateOffset + 2] = Math.min(pointA[2], pointB[2]);
            coordinates[coordinateOffset + 3] = Math.max(pointA[0], pointB[0]);
            coordinates[coordinateOffset + 4] = Math.max(pointA[1], pointB[1]);
            coordinates[coordinateOffset + 5] = Math.max(pointA[2], pointB[2]);
        };
    },
});
typeHandlers.set(AnnotationType.ELLIPSOID, {
    icon: '◎',
    description: 'Ellipsoid',
    title: 'Annotate Ellipsoid',
    toJSON: (annotation) => {
        return {
            center: Array.from(annotation.center),
            radii: Array.from(annotation.radii),
        };
    },
    restoreState: (annotation, obj) => {
        annotation.center = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyObjectProperty"])(obj, 'center', neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verify3dVec"]);
        annotation.radii = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyObjectProperty"])(obj, 'radii', neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verify3dScale"]);
    },
    serializedBytes: 6 * 4,
    serializer: (buffer, offset, numAnnotations) => {
        const coordinates = new Float32Array(buffer, offset, numAnnotations * 6);
        return (annotation, index) => {
            const { center, radii } = annotation;
            const coordinateOffset = index * 6;
            coordinates.set(center, coordinateOffset);
            coordinates.set(radii, coordinateOffset + 3);
        };
    },
});
const collectionTypeSet = {
    icon: '⚄',
    description: 'Collection',
    title: 'Group together multiple annotations',
    toJSON: (annotation) => {
        return {
            source: Array.from(annotation.source),
            childrenVisible: annotation.childrenVisible.value,
            looped: annotation.looped
        };
    },
    restoreState: (annotation, obj) => {
        annotation.source = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyObjectProperty"])(obj, 'source', neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verify3dVec"]);
        annotation.entries = [];
        annotation.childrenVisible = new neuroglancer_trackable_boolean__WEBPACK_IMPORTED_MODULE_0__["TrackableBoolean"](obj.childrenVisible, true);
        annotation.looped = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyObjectProperty"])(obj, 'looped', neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyOptionalBoolean"]);
    },
    serializedBytes: 3 * 4,
    serializer: (buffer, offset, numAnnotations) => {
        const coordinates = new Float32Array(buffer, offset, numAnnotations * 3);
        return (annotation, index) => {
            const { source } = annotation;
            const coordinateOffset = index * 3;
            coordinates[coordinateOffset] = source[0];
            coordinates[coordinateOffset + 1] = source[1];
            coordinates[coordinateOffset + 2] = source[2];
        };
    },
};
typeHandlers.set(AnnotationType.COLLECTION, collectionTypeSet);
typeHandlers.set(AnnotationType.LINE_STRIP, Object.assign({}, collectionTypeSet, { title: 'Annotate multiple connected points', icon: 'ʌ', description: 'Line Strip' }));
typeHandlers.set(AnnotationType.SPOKE, Object.assign({}, collectionTypeSet, { title: 'Annotate radially connected points', icon: '⚹', description: 'Spoke' }));
function restoreAnnotationsTags(tagsObj) {
    const tagIds = new Set();
    if (tagsObj !== undefined) {
        Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["parseArray"])(tagsObj, x => {
            tagIds.add(Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyPositiveInt"])(x));
        });
    }
    return tagIds;
}
function annotationToJson(annotation) {
    const result = getAnnotationTypeHandler(annotation.type).toJSON(annotation);
    result.type = AnnotationType[annotation.type].toLowerCase();
    result.id = annotation.id;
    result.description = annotation.description || undefined;
    result.tagIds = (annotation.tagIds) ? [...annotation.tagIds] : undefined;
    result.parentId = annotation.parentId || undefined;
    const { segments } = annotation;
    if (segments !== undefined && segments.length > 0) {
        result.segments = segments.map(x => x.toString());
    }
    return result;
}
function restoreAnnotation(obj, allowMissingId = false) {
    Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyObject"])(obj);
    const tagIds = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyObjectProperty"])(obj, 'tagIds', x => restoreAnnotationsTags(x));
    const type = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyObjectProperty"])(obj, 'type', x => Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyEnumString"])(x, AnnotationType));
    const id = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyObjectProperty"])(obj, 'id', allowMissingId ? neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyOptionalString"] : neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyString"]) ||
        makeAnnotationId();
    const result = {
        id,
        description: Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyObjectProperty"])(obj, 'description', neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyOptionalString"]),
        tagIds,
        segments: Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyObjectProperty"])(obj, 'segments', x => x === undefined ? undefined : Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["parseArray"])(x, y => neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_6__["Uint64"].parseString(y))),
        type,
        parentId: Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyObjectProperty"])(obj, 'parentId', neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyOptionalString"]),
    };
    getAnnotationTypeHandler(type).restoreState(result, obj);
    return result;
}
function restoreAnnotationTag(obj) {
    Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyObject"])(obj);
    const result = {
        id: Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyObjectProperty"])(obj, 'id', neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyPositiveInt"]),
        label: Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyObjectProperty"])(obj, 'label', neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["verifyString"])
    };
    return result;
}
class AnnotationSource extends neuroglancer_util_disposable__WEBPACK_IMPORTED_MODULE_1__["RefCounted"] {
    constructor(objectToLocal = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__["mat4"].create()) {
        super();
        this.objectToLocal = objectToLocal;
        this.annotationMap = new Map();
        this.tags = new Map();
        this.maxTagId = 0;
        this.lastAnnotationNodeMap = new Map([[undefined, null]]);
        this.changed = new neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_5__["NullarySignal"]();
        this.readonly = false;
        this.childAdded = new neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_5__["Signal"]();
        this.childrenAdded = new neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_5__["Signal"]();
        this.childUpdated = new neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_5__["Signal"]();
        this.childDeleted = new neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_5__["Signal"]();
        this.tagAdded = new neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_5__["Signal"]();
        this.tagUpdated = new neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_5__["Signal"]();
        this.tagDeleted = new neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_5__["Signal"]();
        this.pending = new Set();
        this.references = new Map();
    }
    addTag(label) {
        this.maxTagId++;
        const tag = { id: this.maxTagId, label };
        this.tags.set(this.maxTagId, tag);
        this.changed.dispatch();
        this.tagAdded.dispatch(tag);
        return this.maxTagId;
    }
    deleteTag(tagId) {
        const tag = this.tags.get(tagId);
        if (tag) {
            this.tags.delete(tagId);
            for (const annotation of this.annotationMap.values()) {
                if (annotation.tagIds) {
                    annotation.tagIds.delete(tagId);
                }
            }
            this.changed.dispatch();
            this.tagDeleted.dispatch(tagId);
        }
    }
    updateTagLabel(tagId, newLabel) {
        const tag = this.tags.get(tagId);
        if (tag) {
            tag.label = newLabel;
            this.changed.dispatch();
            this.tagUpdated.dispatch(tag);
        }
    }
    validateTags(annotation) {
        if (annotation.tagIds) {
            annotation.tagIds.forEach(tagId => {
                const annotationTag = this.tags.get(tagId);
                if (!annotationTag) {
                    throw new Error(`AnnotationTag id ${tagId} listed for Annotation ${annotation.id} does not exist`);
                }
            });
        }
        return true;
    }
    updateAnnotationNode(id, annotation) {
        const existingAnnotation = this.annotationMap.get(id);
        if (existingAnnotation) {
            this.validateTags(annotation);
            Object.assign(existingAnnotation, annotation);
        }
    }
    insertAnnotationNode(annotation) {
        this.validateTags(annotation);
        let annotationNode = Object.assign({}, annotation, { prev: null, next: null });
        const parentNodeId = annotationNode.parentId;
        const matchingAnnotationNode = this.lastAnnotationNodeMap.get(parentNodeId);
        if (matchingAnnotationNode) {
            annotationNode.prev = matchingAnnotationNode;
            annotationNode.next = matchingAnnotationNode.next;
            annotationNode = annotationNode;
            matchingAnnotationNode.next = annotationNode;
            annotationNode.next.prev = annotationNode;
        }
        else {
            annotationNode.prev = annotationNode.next = annotationNode;
            annotationNode = annotationNode;
        }
        this.lastAnnotationNodeMap.set(annotationNode.parentId, annotationNode);
        if (annotation.type === AnnotationType.COLLECTION ||
            annotation.type === AnnotationType.LINE_STRIP || annotation.type === AnnotationType.SPOKE) {
            annotationNode.entry = (index) => this.get(annotationNode.entries[index]);
            annotationNode.segmentSet = () => {
                annotationNode.segments = [];
                annotationNode.entries.forEach((ref, index) => {
                    ref;
                    const child = annotationNode.entry(index);
                    if (annotationNode.segments && child && child.segments) {
                        annotationNode.segments = [...annotationNode.segments, ...child.segments];
                    }
                });
                if (annotationNode.segments) {
                    annotationNode.segments =
                        [...new Set(annotationNode.segments.map((e) => e.toString()))].map((s) => neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_6__["Uint64"].parseString(s));
                }
                return annotationNode.segments;
            };
        }
        this.annotationMap.set(annotation.id, annotationNode);
    }
    deleteAnnotationNode(id) {
        const existingAnnotation = this.annotationMap.get(id);
        if (existingAnnotation) {
            const parentNodeId = existingAnnotation.parentId;
            const matchingAnnotationNode = this.lastAnnotationNodeMap.get(parentNodeId);
            this.annotationMap.delete(id);
            if (this.annotationMap.size > 0) {
                existingAnnotation.prev.next = existingAnnotation.next;
                existingAnnotation.next.prev = existingAnnotation.prev;
                if (matchingAnnotationNode === existingAnnotation) {
                    this.lastAnnotationNodeMap.set(parentNodeId, existingAnnotation.prev);
                }
            }
            else {
                this.lastAnnotationNodeMap.set(parentNodeId, null);
            }
        }
        return existingAnnotation;
    }
    bypass(source, view, forward) {
        if (!source) {
            return;
        }
        const next = forward;
        const prev = !forward;
        const parent = source.parentId ? this.annotationMap.get(source.parentId) : undefined;
        let loopedOver;
        if (parent) {
            const lastId = parent.entries.length - 1;
            const isLastChild = parent.entries[lastId] === source.id;
            const isFirstChild = parent.entries[0] === source.id;
            loopedOver = (next && isLastChild) || (prev && isFirstChild);
        }
        else {
            const area = view.firstElementChild ? view.firstElementChild : document.createElement('div');
            const head = area.firstElementChild ? area.firstElementChild.dataset.id : null;
            const tail = head ? this.annotationMap.get(head).prev.id : null;
            loopedOver = (next && source.id === tail) || (prev && source.id === head);
        }
        return Object.assign({}, next ? source.next : source.prev, { loopedOver });
    }
    getNextAnnotation(id, viewContainer) {
        const existingAnnotation = this.annotationMap.get(id);
        if (viewContainer) {
            return this.bypass(existingAnnotation, viewContainer, true);
        }
        return existingAnnotation ? existingAnnotation.next : existingAnnotation;
    }
    getPrevAnnotation(id, viewContainer) {
        const existingAnnotation = this.annotationMap.get(id);
        if (viewContainer) {
            return this.bypass(existingAnnotation, viewContainer, false);
        }
        return existingAnnotation ? existingAnnotation.prev : existingAnnotation;
    }
    addHelper(annotation, commit, parentReference) {
        if (!annotation.id) {
            annotation.id = makeAnnotationId();
        }
        else if (this.annotationMap.has(annotation.id)) {
            throw new Error(`Annotation id already exists: ${JSON.stringify(annotation.id)}.`);
        }
        if (parentReference) {
            annotation.parentId = parentReference.id;
        }
        this.insertAnnotationNode(annotation);
        this.changed.dispatch();
        if (!commit) {
            this.pending.add(annotation.id);
        }
        return this.getReference(annotation.id);
    }
    add(annotation, commit = true, parentReference) {
        const reference = this.addHelper(annotation, commit, parentReference);
        this.childAdded.dispatch(annotation);
        return reference;
    }
    addAll(annotations, commit = true, parentReference) {
        for (const annotation of annotations) {
            this.addHelper(annotation, commit, parentReference);
        }
        this.childrenAdded.dispatch(annotations);
    }
    commit(reference) {
        const { id, value } = reference;
        this.pending.delete(id);
        if (value) {
            this.childUpdated.dispatch(value);
        }
    }
    isPending(id) {
        return this.pending.has(id);
    }
    update(reference, annotation) {
        if (reference.value === null) {
            throw new Error(`Annotation already deleted.`);
        }
        this.updateAnnotationNode(annotation.id, annotation);
        reference.changed.dispatch();
        this.changed.dispatch();
        this.childUpdated.dispatch(annotation);
    }
    toggleAnnotationTag(reference, tagId) {
        const annotation = reference.value;
        if (annotation) {
            if (!annotation.tagIds) {
                annotation.tagIds = new Set();
            }
            if (annotation.tagIds.has(tagId)) {
                annotation.tagIds.delete(tagId);
            }
            else {
                annotation.tagIds.add(tagId);
                this.validateTags(annotation);
            }
            reference.changed.dispatch();
            this.changed.dispatch();
            this.childUpdated.dispatch(annotation);
        }
    }
    [Symbol.iterator]() {
        return this.annotationMap.values();
    }
    get(id) {
        return this.annotationMap.get(id);
    }
    orphan(reference, surrogate) {
        const targets = reference.value.entries;
        if (targets && targets.length) {
            return this.childReassignment(targets, surrogate);
        }
        return [];
    }
    unlinkChild(targetNode) {
        const firstChildNode = targetNode.next;
        const lastChildNode = targetNode.prev;
        firstChildNode.prev = targetNode.prev;
        lastChildNode.next = targetNode.next;
    }
    linkChild(targetNode, handleID) {
        const handle = document.querySelector(`[data-id="${handleID}"]`);
        if (handle) {
            const firstChild = handle.parentElement.firstElementChild;
            if (firstChild) {
                const firstId = firstChild.dataset.id;
                const firstNode = this.annotationMap.get(firstId);
                const lastNode = firstNode.prev;
                lastNode.next = targetNode;
                firstNode.prev = targetNode;
                targetNode.next = firstNode;
                targetNode.prev = lastNode;
            }
        }
    }
    childReassignment(targets, surrogate) {
        const emptynesters = [];
        let adopter = surrogate ? surrogate.value : null;
        if (adopter) {
            targets = targets.filter(e => e !== adopter.id);
        }
        targets.forEach((id) => {
            const targetNode = this.annotationMap.get(id);
            const target = this.getReference(id).value;
            let oldParent;
            if (target.parentId) {
                oldParent = this.getReference(target.parentId).value;
                if (oldParent.parentId && !adopter) {
                    adopter = this.getReference(oldParent.parentId).value;
                }
            }
            if (adopter !== oldParent) {
                // reassign/orphan child
                if (!adopter) {
                    // no adopter- clear parent
                    if (targetNode) {
                        this.unlinkChild(targetNode);
                        this.linkChild(targetNode, id);
                    }
                    target.parentId = undefined;
                }
                else if (this.isAncestor(target, adopter)) {
                    // ancestor cannot be adopted by its descendant- skip this one
                    return;
                }
                else {
                    // adopt normally
                    if (targetNode) {
                        this.unlinkChild(targetNode);
                        this.linkChild(targetNode, adopter.id);
                    }
                    target.parentId = adopter.id;
                }
                if (adopter) {
                    adopter.segmentSet();
                }
                if (oldParent) {
                    oldParent.segmentSet();
                    oldParent.entries = oldParent.entries.filter(v => v !== target.id);
                    if (!oldParent.entries.length) {
                        emptynesters.push(this.getReference(oldParent.id));
                    }
                }
            }
            this.childDeleted.dispatch(target.id);
            // TODO: CHILD MOVE signal, move the child to a different element rather than deleting and
            // re adding, because this cant rebuild children
            this.childAdded.dispatch(target);
            // move all descendants of target as well
            const collection = target;
            if (collection.entries) {
                const targetRef = this.getReference(target.id);
                this.childReassignment(collection.entries, targetRef);
            }
        });
        if (surrogate) {
            surrogate.changed.dispatch();
        }
        this.changed.dispatch();
        if (surrogate) {
            this.childUpdated.dispatch(surrogate.value);
        }
        return emptynesters;
    }
    isAncestor(potentialAncestor, potentialDescendant) {
        if (!potentialDescendant.parentId) {
            return false;
        }
        const parent = this.getReference(potentialDescendant.parentId).value;
        if (parent.id === potentialAncestor.id) {
            return true;
        }
        return this.isAncestor(potentialAncestor, parent);
    }
    delete(reference, flush) {
        if (reference.value === null) {
            return;
        }
        const isParent = !!reference.value.entries;
        const isChild = !!reference.value.parentId;
        if (isParent) {
            if (flush) {
                reference.value.entries.forEach((id) => {
                    const target = this.getReference(id);
                    // If child is a collection, this will nuke the grandchildren too
                    this.delete(target, true);
                });
            }
            else {
                this.orphan(reference);
            }
        }
        if (reference.value === null) {
            return;
        }
        if (isChild) {
            // Remove child from parent entries on deletion
            const target = this.getReference(reference.value.parentId);
            const value = target.value;
            // parent should not be deleted before its children
            value.entries = value.entries.filter(v => v !== reference.value.id);
            value.segmentSet();
            if (!value.entries.length && !this.isPending(value.id)) {
                this.delete(target);
            }
        }
        if (reference.value === null) {
            return;
        }
        reference.value = null;
        this.deleteAnnotationNode(reference.id);
        this.pending.delete(reference.id);
        reference.changed.dispatch();
        this.changed.dispatch();
        this.childDeleted.dispatch(reference.id);
    }
    getReference(id) {
        let existing = this.references.get(id);
        if (existing !== undefined) {
            return existing.addRef();
        }
        existing = new AnnotationReference(id);
        existing.value = this.annotationMap.get(id) || null;
        this.references.set(id, existing);
        existing.registerDisposer(() => {
            this.references.delete(id);
        });
        return existing;
    }
    toJSON() {
        const annotationResult = [];
        const tagResult = [];
        const { pending } = this;
        for (const annotation of this) {
            if (pending.has(annotation.id)) {
                // Don't serialize uncommitted annotations.
                continue;
            }
            annotationResult.push(annotationToJson(annotation));
        }
        for (const tag of this.tags.values()) {
            tagResult.push({ id: tag.id, label: tag.label });
        }
        const result = { annotations: annotationResult, tags: tagResult };
        return result;
    }
    clear() {
        this.tags.clear();
        this.maxTagId = 0;
        this.annotationMap.clear();
        this.lastAnnotationNodeMap.clear();
        this.lastAnnotationNodeMap.set(undefined, null);
        this.pending.clear();
        this.changed.dispatch();
    }
    restoreState(annotationObj, annotationTagObj, allowMissingId = false) {
        const { annotationMap, tags: annotationTags } = this;
        annotationTags.clear();
        annotationMap.clear();
        this.lastAnnotationNodeMap.clear();
        this.lastAnnotationNodeMap.set(undefined, null);
        this.maxTagId = 0;
        this.pending.clear();
        if (annotationTagObj !== undefined) {
            Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["parseArray"])(annotationTagObj, x => {
                const annotationTag = restoreAnnotationTag(x);
                if (this.tags.get(annotationTag.id)) {
                    throw new Error(`Duplicate tag id ${annotationTag.id} in JSON state`);
                }
                this.tags.set(annotationTag.id, annotationTag);
                if (annotationTag.id > this.maxTagId) {
                    this.maxTagId = annotationTag.id;
                }
            });
        }
        if (annotationObj !== undefined) {
            Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_3__["parseArray"])(annotationObj, x => {
                try {
                    const annotation = restoreAnnotation(x, allowMissingId);
                    this.insertAnnotationNode(annotation);
                }
                catch (e) {
                    console.error(e);
                }
            });
        }
        for (const reference of this.references.values()) {
            const { id } = reference;
            const value = annotationMap.get(id);
            reference.value = value || null;
            reference.changed.dispatch();
        }
        this.changed.dispatch();
    }
    reset() {
        this.clear();
    }
    getTag(tagId) {
        return this.tags.get(tagId);
    }
    getTagIds() {
        return this.tags.keys();
    }
    getTags() {
        return this.tags.values();
    }
    isAnnotationTaggedWithTag(annotationId, tagId) {
        const annotation = this.annotationMap.get(annotationId);
        if (annotation) {
            const collection = annotation;
            const selfTag = (annotation.tagIds && annotation.tagIds.has(tagId));
            if (collection.entries && !selfTag) {
                return collection.entries.some((child) => {
                    return this.isAnnotationTaggedWithTag(child, tagId);
                });
            }
            return selfTag;
        }
        return false;
    }
}
class LocalAnnotationSource extends AnnotationSource {
}
const DATA_BOUNDS_DESCRIPTION = 'Data Bounds';
function makeAnnotationId() {
    return Object(neuroglancer_util_random__WEBPACK_IMPORTED_MODULE_4__["getRandomHexString"])(160);
}
function makeDataBoundsBoundingBox(lowerVoxelBound, upperVoxelBound) {
    return {
        type: AnnotationType.AXIS_ALIGNED_BOUNDING_BOX,
        id: 'data-bounds',
        description: DATA_BOUNDS_DESCRIPTION,
        pointA: lowerVoxelBound,
        pointB: upperVoxelBound
    };
}
function compare3WayById(a, b) {
    return a.id < b.id ? -1 : a.id === b.id ? 0 : 1;
}
function serializeAnnotations(allAnnotations) {
    let totalBytes = 0;
    const typeToOffset = [];
    const typeToSegmentListIndexOffset = [];
    let totalNumSegments = 0;
    let totalNumAnnotations = 0;
    for (const annotationType of annotationTypes) {
        typeToOffset[annotationType] = totalBytes;
        typeToSegmentListIndexOffset[annotationType] = totalNumAnnotations;
        const annotations = allAnnotations[annotationType];
        let numSegments = 0;
        for (const annotation of annotations) {
            const { segments } = annotation;
            if (segments !== undefined) {
                numSegments += segments.length;
            }
        }
        totalNumAnnotations += annotations.length;
        totalNumSegments += numSegments;
        annotations.sort(compare3WayById);
        const count = annotations.length;
        const handler = getAnnotationTypeHandler(annotationType);
        totalBytes += handler.serializedBytes * count;
    }
    const segmentListIndex = new Uint32Array(totalNumAnnotations + 1);
    const segmentList = new Uint32Array(totalNumSegments * 2);
    const typeToIds = [];
    const data = new ArrayBuffer(totalBytes);
    let segmentListOffset = 0;
    let segmentListIndexOffset = 0;
    for (const annotationType of annotationTypes) {
        const annotations = allAnnotations[annotationType];
        typeToIds[annotationType] = annotations.map(x => x.id);
        const count = annotations.length;
        const handler = getAnnotationTypeHandler(annotationType);
        const serializer = handler.serializer(data, typeToOffset[annotationType], count);
        annotations.forEach((annotation, index) => {
            serializer(annotation, index);
            segmentListIndex[segmentListIndexOffset++] = segmentListOffset;
            const { segments } = annotation;
            if (segments !== undefined) {
                for (const segment of segments) {
                    segmentList[segmentListOffset * 2] = segment.low;
                    segmentList[segmentListOffset * 2 + 1] = segment.high;
                    ++segmentListOffset;
                }
            }
        });
    }
    return { data: new Uint8Array(data), typeToIds, typeToOffset, segmentListIndex, segmentList };
}
class AnnotationSerializer {
    constructor() {
        this.annotations = [[], [], [], [], [], [], []];
    }
    add(annotation) {
        this.annotations[annotation.type].push(annotation);
    }
    serialize() {
        return serializeAnnotations(this.annotations);
    }
}
function deserializeAnnotation(obj) {
    if (obj == null) {
        return obj;
    }
    const segments = obj.segments;
    if (segments !== undefined) {
        obj.segments = segments.map((x) => new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_6__["Uint64"](x.low, x.high));
    }
    return obj;
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/async_computation/csv_vertex_attributes_request.ts":
/*!***************************************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/async_computation/csv_vertex_attributes_request.ts ***!
  \***************************************************************************************************************************************/
/*! exports provided: parseCSVFromArrayBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseCSVFromArrayBuffer", function() { return parseCSVFromArrayBuffer; });
/* harmony import */ var neuroglancer_async_computation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/async_computation */ "../../../../../../neuroglancer/src/neuroglancer/async_computation/index.ts");
/**
 * @license
 * Copyright 2019 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const parseCSVFromArrayBuffer = Object(neuroglancer_async_computation__WEBPACK_IMPORTED_MODULE_0__["asyncComputation"])('parseCSVFromArrayBuffer');


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/async_computation/decode_gzip_request.ts":
/*!*****************************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/async_computation/decode_gzip_request.ts ***!
  \*****************************************************************************************************************************/
/*! exports provided: decodeGzip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeGzip", function() { return decodeGzip; });
/* harmony import */ var neuroglancer_async_computation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/async_computation */ "../../../../../../neuroglancer/src/neuroglancer/async_computation/index.ts");
/**
 * @license
 * Copyright 2019 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const decodeGzip = Object(neuroglancer_async_computation__WEBPACK_IMPORTED_MODULE_0__["asyncComputation"])('decodeGzip');


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/async_computation/decode_jpeg_request.ts":
/*!*****************************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/async_computation/decode_jpeg_request.ts ***!
  \*****************************************************************************************************************************/
/*! exports provided: decodeJpeg */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeJpeg", function() { return decodeJpeg; });
/* harmony import */ var neuroglancer_async_computation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/async_computation */ "../../../../../../neuroglancer/src/neuroglancer/async_computation/index.ts");
/**
 * @license
 * Copyright 2019 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const decodeJpeg = Object(neuroglancer_async_computation__WEBPACK_IMPORTED_MODULE_0__["asyncComputation"])('decodeJpeg');


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/async_computation/encode_compressed_segmentation_request.ts":
/*!************************************************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/async_computation/encode_compressed_segmentation_request.ts ***!
  \************************************************************************************************************************************************/
/*! exports provided: encodeCompressedSegmentationUint32, encodeCompressedSegmentationUint64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encodeCompressedSegmentationUint32", function() { return encodeCompressedSegmentationUint32; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encodeCompressedSegmentationUint64", function() { return encodeCompressedSegmentationUint64; });
/* harmony import */ var neuroglancer_async_computation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/async_computation */ "../../../../../../neuroglancer/src/neuroglancer/async_computation/index.ts");
/**
 * @license
 * Copyright 2019 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const encodeCompressedSegmentationUint32 = Object(neuroglancer_async_computation__WEBPACK_IMPORTED_MODULE_0__["asyncComputation"])('encodeCompressedSegmentationUint32');
const encodeCompressedSegmentationUint64 = Object(neuroglancer_async_computation__WEBPACK_IMPORTED_MODULE_0__["asyncComputation"])('encodeCompressedSegmentationUint64');


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/async_computation/index.ts":
/*!***************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/async_computation/index.ts ***!
  \***************************************************************************************************************/
/*! exports provided: asyncComputation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asyncComputation", function() { return asyncComputation; });
/**
 * @license
 * Copyright 2019 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Declares an asynchronous operation.
 */
function asyncComputation(id) {
    return { id };
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/async_computation/request.ts":
/*!*****************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/async_computation/request.ts ***!
  \*****************************************************************************************************************/
/*! exports provided: requestAsyncComputation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "requestAsyncComputation", function() { return requestAsyncComputation; });
/* harmony import */ var neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/util/cancellation */ "../../../../../../neuroglancer/src/neuroglancer/util/cancellation.ts");
/**
 * @license
 * Copyright 2019 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const freeWorkers = [];
const pendingTasks = new Map();
const tasks = new Map();
const maxWorkers = Math.min(12, navigator.hardwareConcurrency);
let nextTaskId = 0;
function returnWorker(worker) {
    for (const [id, task] of pendingTasks) {
        pendingTasks.delete(id);
        worker.postMessage(task.msg, task.transfer);
        return;
    }
    freeWorkers.push(worker);
}
function getNewWorker() {
    const worker = new Worker('async_computation.bundle.js');
    worker.onmessage = msg => {
        const { id, value, error } = msg.data;
        returnWorker(worker);
        const callbacks = tasks.get(id);
        tasks.delete(id);
        if (callbacks === undefined)
            return;
        callbacks.cleanup();
        if (error !== undefined) {
            callbacks.reject(new Error(error));
        }
        else {
            callbacks.resolve(value);
        }
    };
    return worker;
}
function requestAsyncComputation(request, cancellationToken, transfer, ...args) {
    if (cancellationToken.isCanceled)
        return Promise.reject(neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_0__["CANCELED"]);
    const id = nextTaskId++;
    const msg = { t: request.id, id, args: args };
    const cleanup = cancellationToken.add(() => {
        pendingTasks.delete(id);
        tasks.delete(id);
    });
    const promise = new Promise((resolve, reject) => {
        tasks.set(id, { resolve, reject, cleanup });
    });
    if (freeWorkers.length !== 0) {
        freeWorkers.pop().postMessage(msg, transfer);
    }
    else if (tasks.size < maxWorkers) {
        getNewWorker().postMessage(msg, transfer);
    }
    else {
        pendingTasks.set(id, { msg, transfer });
    }
    return promise;
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/async_computation/vtk_mesh_request.ts":
/*!**************************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/async_computation/vtk_mesh_request.ts ***!
  \**************************************************************************************************************************/
/*! exports provided: parseVTKFromArrayBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseVTKFromArrayBuffer", function() { return parseVTKFromArrayBuffer; });
/* harmony import */ var neuroglancer_async_computation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/async_computation */ "../../../../../../neuroglancer/src/neuroglancer/async_computation/index.ts");
/**
 * @license
 * Copyright 2019 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const parseVTKFromArrayBuffer = Object(neuroglancer_async_computation__WEBPACK_IMPORTED_MODULE_0__["asyncComputation"])('parseVTKFromArrayBuffer');


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/authentication/backend.ts":
/*!**************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/authentication/backend.ts ***!
  \**************************************************************************************************************/
/*! exports provided: responseIdentity, authFetch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "responseIdentity", function() { return responseIdentity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "authFetch", function() { return authFetch; });
/* harmony import */ var neuroglancer_authentication_base_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/authentication/base.ts */ "../../../../../../neuroglancer/src/neuroglancer/authentication/base.ts");
/* harmony import */ var neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/cancellation */ "../../../../../../neuroglancer/src/neuroglancer/util/cancellation.ts");
/* harmony import */ var neuroglancer_worker_rpc_context_ts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/worker_rpc_context.ts */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc_context.ts");
/**
 * @license
 * Copyright 2019 The Neuroglancer Authors
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



const authTokenSharedValuePromise = new Promise((f) => {
    neuroglancer_worker_rpc_context_ts__WEBPACK_IMPORTED_MODULE_2__["rpc"].promiseInvoke(neuroglancer_authentication_base_ts__WEBPACK_IMPORTED_MODULE_0__["AUTHENTICATION_GET_SHARED_TOKEN_RPC_ID"], {}).then((rpcId) => {
        f(neuroglancer_worker_rpc_context_ts__WEBPACK_IMPORTED_MODULE_2__["rpc"].get(rpcId));
    });
});
let waitingForToken = null;
// makes a request to the main thread to reauthenticate with the given auth url
// auth token is passed back through the auth token shared value
async function reauthenticate(auth_url, authTokenSharedValue) {
    if (waitingForToken) {
        return waitingForToken;
    }
    // promise fulfills when the shared value changes
    waitingForToken = new Promise((f) => {
        const onSharedValueChange = () => {
            f(authTokenSharedValue.value);
            authTokenSharedValue.changed.remove(onSharedValueChange);
        };
        authTokenSharedValue.changed.add(onSharedValueChange);
    });
    // delete the waiting promise since we don't want to access old tokens
    waitingForToken.then(() => {
        waitingForToken = null;
    });
    // TODO: change back to promise, we need to handle the promise rejecting even though we get the
    // value from the shared value
    neuroglancer_worker_rpc_context_ts__WEBPACK_IMPORTED_MODULE_2__["rpc"].invoke(neuroglancer_authentication_base_ts__WEBPACK_IMPORTED_MODULE_0__["AUTHENTICATION_REAUTHENTICATE_RPC_ID"], { auth_url: auth_url, used_token: authTokenSharedValue.value });
    return waitingForToken;
}
async function showTosForm(tos_url) {
    return neuroglancer_worker_rpc_context_ts__WEBPACK_IMPORTED_MODULE_2__["rpc"].promiseInvoke(neuroglancer_authentication_base_ts__WEBPACK_IMPORTED_MODULE_0__["AUTHENTICATION_SHOW_TOS_RPC_ID"], { tos_url: tos_url });
}
const responseIdentity = async (x) => x;
async function authFetch(input, init = {}, transformResponse, cancellationToken = neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_1__["uncancelableToken"], handleError = true) {
    const authTokenShared = await authTokenSharedValuePromise;
    const response = await Object(neuroglancer_authentication_base_ts__WEBPACK_IMPORTED_MODULE_0__["authFetchWithSharedValue"])(reauthenticate, showTosForm, authTokenShared, input, init, cancellationToken, handleError);
    if (transformResponse) {
        return transformResponse(response);
    }
    else {
        return response;
    }
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/authentication/base.ts":
/*!***********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/authentication/base.ts ***!
  \***********************************************************************************************************/
/*! exports provided: AUTHENTICATION_GET_SHARED_TOKEN_RPC_ID, AUTHENTICATION_REAUTHENTICATE_RPC_ID, AUTHENTICATION_SHOW_TOS_RPC_ID, parseWWWAuthHeader, AuthenticationError, TosError, authFetchWithSharedValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AUTHENTICATION_GET_SHARED_TOKEN_RPC_ID", function() { return AUTHENTICATION_GET_SHARED_TOKEN_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AUTHENTICATION_REAUTHENTICATE_RPC_ID", function() { return AUTHENTICATION_REAUTHENTICATE_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AUTHENTICATION_SHOW_TOS_RPC_ID", function() { return AUTHENTICATION_SHOW_TOS_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseWWWAuthHeader", function() { return parseWWWAuthHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AuthenticationError", function() { return AuthenticationError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TosError", function() { return TosError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "authFetchWithSharedValue", function() { return authFetchWithSharedValue; });
/* harmony import */ var neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/util/cancellation */ "../../../../../../neuroglancer/src/neuroglancer/util/cancellation.ts");
/* harmony import */ var neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/http_request */ "../../../../../../neuroglancer/src/neuroglancer/util/http_request.ts");
/**
 * @license
 * Copyright 2019 The Neuroglancer Authors
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const AUTHENTICATION_GET_SHARED_TOKEN_RPC_ID = 'Authentication.get_shared_token';
const AUTHENTICATION_REAUTHENTICATE_RPC_ID = 'Authentication.reauthenticate';
const AUTHENTICATION_SHOW_TOS_RPC_ID = 'Authentication.show_tos';
function parseWWWAuthHeader(headerVal) {
    const tuples = headerVal.split('Bearer ')[1].split(', ').map((x) => x.split('='));
    const wwwAuthMap = new Map();
    for (let [key, val] of tuples) {
        wwwAuthMap.set(key, val.replace(/"/g, ''));
    }
    return wwwAuthMap;
}
class AuthenticationError extends Error {
    constructor(realm) {
        super();
        this.realm = realm;
    }
}
class TosError extends Error {
    constructor(url) {
        super();
        this.url = url;
    }
}
async function authFetchOk(input, init, handleError = true) {
    try {
        const res = await fetch(input, init);
        if (res.status === 400 || res.status === 401) {
            const wwwAuth = res.headers.get('WWW-Authenticate');
            if (wwwAuth) {
                if (wwwAuth.startsWith('Bearer ')) {
                    const wwwAuthMap = parseWWWAuthHeader(wwwAuth);
                    if (!wwwAuthMap.get('error') || wwwAuthMap.get('error') === 'invalid_token') {
                        // missing or expired
                        throw new AuthenticationError(wwwAuthMap.get('realm'));
                    }
                    throw new Error(`status ${res.status} auth error - ${wwwAuthMap.get('error')} + " Reason: ${wwwAuthMap.get('error_description')}`);
                }
            }
        }
        else if (res.status === 403) {
            const contentType = res.headers.get('content-type');
            if (contentType === 'application/json') {
                const json = await res.json();
                if (json.error && json.error === 'missing_tos') {
                    throw new TosError(json.data.tos_form_url);
                }
            }
        }
        if (!res.ok && handleError) {
            throw neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_1__["HttpError"].fromResponse(res);
        }
        return res;
    }
    catch (error) {
        // A fetch() promise will reject with a TypeError when a network error is encountered or CORS is
        // misconfigured on the server-side
        if (error instanceof TypeError) {
            throw new neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_1__["HttpError"]('', 0, '');
        }
        throw error;
    }
}
async function authFetchWithSharedValue(reauthenticate, showTosForm, authTokenShared, input, init, cancellationToken = neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_0__["uncancelableToken"], handleError = true) {
    const aborts = [];
    function addCancellationToken(options) {
        options = JSON.parse(JSON.stringify(init));
        // handle aborting
        const abortController = new AbortController();
        options.signal = abortController.signal;
        const abort = () => {
            abortController.abort();
        };
        cancellationToken.add(abort);
        aborts.push(abort);
        return options;
    }
    function setAuthQuery(input) {
        if (input instanceof Request) {
            // do nothing TODO: is this right?
        }
        else {
            const authToken = authTokenShared.value;
            if (authToken) {
                const url = new URL(input);
                url.searchParams.set('middle_auth_token', authToken);
                return url.href;
            }
        }
        return input;
    }
    try {
        return await authFetchOk(setAuthQuery(input), addCancellationToken(init), handleError);
    }
    catch (error) {
        if (error instanceof AuthenticationError) {
            await reauthenticate(error.realm, authTokenShared);
        }
        else if (error instanceof TosError) {
            await showTosForm(error.url);
        }
        else {
            throw error;
        }
        // retry after authentication/tos form completion
        return authFetchWithSharedValue(reauthenticate, showTosForm, authTokenShared, input, init, cancellationToken, handleError);
    }
    finally {
        for (let abort of aborts) {
            cancellationToken.remove(abort);
        }
    }
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/backend.ts":
/*!*************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/chunk_manager/backend.ts ***!
  \*************************************************************************************************************/
/*! exports provided: Chunk, ChunkSourceBase, ChunkSource, startChunkDownload, cancelChunkDownload, ChunkQueueManager, ChunkManager, WithParameters, withChunkManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chunk", function() { return Chunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChunkSourceBase", function() { return ChunkSourceBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChunkSource", function() { return ChunkSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "startChunkDownload", function() { return startChunkDownload; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cancelChunkDownload", function() { return cancelChunkDownload; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChunkQueueManager", function() { return ChunkQueueManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChunkManager", function() { return ChunkManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WithParameters", function() { return WithParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "withChunkManager", function() { return withChunkManager; });
/* harmony import */ var neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/chunk_manager/base */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/base.ts");
/* harmony import */ var neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/cancellation */ "../../../../../../neuroglancer/src/neuroglancer/util/cancellation.ts");
/* harmony import */ var neuroglancer_util_disposable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/util/disposable */ "../../../../../../neuroglancer/src/neuroglancer/util/disposable.ts");
/* harmony import */ var neuroglancer_util_linked_list_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/util/linked_list.0 */ "../../../../../../neuroglancer/src/neuroglancer/util/linked_list.0.ts");
/* harmony import */ var neuroglancer_util_linked_list_1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! neuroglancer/util/linked_list.1 */ "../../../../../../neuroglancer/src/neuroglancer/util/linked_list.1.ts");
/* harmony import */ var neuroglancer_util_memoize__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! neuroglancer/util/memoize */ "../../../../../../neuroglancer/src/neuroglancer/util/memoize.ts");
/* harmony import */ var neuroglancer_util_pairing_heap_0__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! neuroglancer/util/pairing_heap.0 */ "../../../../../../neuroglancer/src/neuroglancer/util/pairing_heap.0.ts");
/* harmony import */ var neuroglancer_util_pairing_heap_1__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! neuroglancer/util/pairing_heap.1 */ "../../../../../../neuroglancer/src/neuroglancer/util/pairing_heap.1.ts");
/* harmony import */ var neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! neuroglancer/util/signal */ "../../../../../../neuroglancer/src/neuroglancer/util/signal.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};










const DEBUG_CHUNK_UPDATES = false;
class Chunk {
    constructor() {
        // Node properties used for eviction/promotion heaps and LRU linked lists.
        this.child0 = null;
        this.next0 = null;
        this.prev0 = null;
        this.child1 = null;
        this.next1 = null;
        this.prev1 = null;
        this.source = null;
        this.key = null;
        this.state_ = neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].NEW;
        this.error = null;
        /**
         * Specifies existing priority within priority tier.  Only meaningful if priorityTier in
         * CHUNK_ORDERED_PRIORITY_TIERS.
         */
        this.priority = 0;
        /**
         * Specifies updated priority within priority tier, not yet reflected in priority queue state.
         * Only meaningful if newPriorityTier in CHUNK_ORDERED_PRIORITY_TIERS.
         */
        this.newPriority = 0;
        this.priorityTier = neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkPriorityTier"].RECENT;
        /**
         * Specifies updated priority tier, not yet reflected in priority queue state.
         */
        this.newPriorityTier = neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkPriorityTier"].RECENT;
        this.backendOnly = false;
        this.isComputational = false;
        this.newlyRequestedToFrontend = false;
        this.requestedToFrontend = false;
        /**
         * Cancellation token used to cancel the pending download.  Set to undefined except when state !==
         * DOWNLOADING.  This should not be accessed by code outside this module.
         */
        this.downloadCancellationToken = undefined;
    }
    initialize(key) {
        this.key = key;
        this.priority = Number.NEGATIVE_INFINITY;
        this.priorityTier = neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkPriorityTier"].RECENT;
        this.newPriority = Number.NEGATIVE_INFINITY;
        this.newPriorityTier = neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkPriorityTier"].RECENT;
        this.error = null;
        this.state = neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].NEW;
        this.requestedToFrontend = false;
        this.newlyRequestedToFrontend = false;
    }
    /**
     * Sets this.priority{Tier,} to this.newPriority{Tier,}, and resets this.newPriorityTier to
     * ChunkPriorityTier.RECENT.
     *
     * This does not actually update any queues to reflect this change.
     */
    updatePriorityProperties() {
        this.priorityTier = this.newPriorityTier;
        this.priority = this.newPriority;
        this.newPriorityTier = neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkPriorityTier"].RECENT;
        this.newPriority = Number.NEGATIVE_INFINITY;
        this.requestedToFrontend = this.newlyRequestedToFrontend;
    }
    dispose() {
        this.source = null;
        this.error = null;
    }
    get chunkManager() {
        return this.source.chunkManager;
    }
    get queueManager() {
        return this.source.chunkManager.queueManager;
    }
    downloadFailed(error) {
        this.error = error;
        this.queueManager.updateChunkState(this, neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].FAILED);
    }
    downloadSucceeded() {
        this.queueManager.updateChunkState(this, neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].SYSTEM_MEMORY_WORKER);
    }
    freeSystemMemory() { }
    serialize(msg, _transfers) {
        msg['id'] = this.key;
        msg['source'] = this.source.rpcId;
        msg['new'] = true;
    }
    toString() {
        return this.key;
    }
    set state(newState) {
        if (newState === this.state_) {
            return;
        }
        const oldState = this.state_;
        this.state_ = newState;
        this.source.chunkStateChanged(this, oldState);
    }
    get state() {
        return this.state_;
    }
    set systemMemoryBytes(bytes) {
        updateChunkStatistics(this, -1);
        this.chunkManager.queueManager.adjustCapacitiesForChunk(this, false);
        this.systemMemoryBytes_ = bytes;
        this.chunkManager.queueManager.adjustCapacitiesForChunk(this, true);
        updateChunkStatistics(this, 1);
        this.chunkManager.queueManager.scheduleUpdate();
    }
    get systemMemoryBytes() {
        return this.systemMemoryBytes_;
    }
    set gpuMemoryBytes(bytes) {
        updateChunkStatistics(this, -1);
        this.chunkManager.queueManager.adjustCapacitiesForChunk(this, false);
        this.gpuMemoryBytes_ = bytes;
        this.chunkManager.queueManager.adjustCapacitiesForChunk(this, true);
        updateChunkStatistics(this, 1);
        this.chunkManager.queueManager.scheduleUpdate();
    }
    get gpuMemoryBytes() {
        return this.gpuMemoryBytes_;
    }
    registerListener(listener) {
        if (!this.source) {
            return false;
        }
        return this.source.registerChunkListener(this.key, listener);
    }
    unregisterListener(listener) {
        if (!this.source) {
            return false;
        }
        return this.source.unregisterChunkListener(this.key, listener);
    }
    static priorityLess(a, b) {
        return a.priority < b.priority;
    }
    static priorityGreater(a, b) {
        return a.priority > b.priority;
    }
}
const numSourceQueueLevels = 2;
/**
 * Base class inherited by both ChunkSource, for implementing the backend part of chunk sources that
 * also have a frontend-part, as well as other chunk sources, such as the GenericFileSource, that
 * has only a backend part.
 */
class ChunkSourceBase extends neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_9__["SharedObject"] {
    constructor(chunkManager) {
        super();
        this.chunkManager = chunkManager;
        this.listeners_ = new Map();
        this.chunks = new Map();
        this.freeChunks = new Array();
        this.statistics = new Float64Array(neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["numChunkStatistics"]);
        /**
         * sourceQueueLevel must be greater than the sourceQueueLevel of any ChunkSource whose download
         * method depends on chunks from this source.  A normal ChunkSource with no other dependencies
         * should have a level of 0.
         */
        this.sourceQueueLevel = 0;
        chunkManager.queueManager.sources.add(this);
    }
    disposed() {
        this.chunkManager.queueManager.sources.delete(this);
        super.disposed();
    }
    getNewChunk_(chunkType) {
        let freeChunks = this.freeChunks;
        let freeChunksLength = freeChunks.length;
        if (freeChunksLength > 0) {
            let chunk = freeChunks[freeChunksLength - 1];
            freeChunks.length = freeChunksLength - 1;
            chunk.source = this;
            return chunk;
        }
        let chunk = new chunkType();
        chunk.source = this;
        return chunk;
    }
    /**
     * Adds the specified chunk to the chunk cache.
     *
     * If the chunk cache was previously empty, also call this.addRef() to increment the reference
     * count.
     */
    addChunk(chunk) {
        let { chunks } = this;
        if (chunks.size === 0) {
            this.addRef();
        }
        chunks.set(chunk.key, chunk);
        updateChunkStatistics(chunk, 1);
    }
    /**
     * Remove the specified chunk from the chunk cache.
     *
     * If the chunk cache becomes empty, also call this.dispose() to decrement the reference count.
     */
    removeChunk(chunk) {
        let { chunks, freeChunks } = this;
        chunks.delete(chunk.key);
        chunk.dispose();
        freeChunks[freeChunks.length] = chunk;
        if (chunks.size === 0) {
            this.dispose();
        }
    }
    registerChunkListener(key, listener) {
        if (!this.listeners_.has(key)) {
            this.listeners_.set(key, [listener]);
        }
        else {
            this.listeners_.get(key).push(listener);
        }
        return true;
    }
    unregisterChunkListener(key, listener) {
        if (!this.listeners_.has(key)) {
            return false;
        }
        const keyListeners = this.listeners_.get(key);
        const idx = keyListeners.indexOf(listener);
        if (idx < 0) {
            return false;
        }
        keyListeners.splice(idx, 1);
        if (keyListeners.length === 0) {
            this.listeners_.delete(key);
        }
        return true;
    }
    chunkStateChanged(chunk, oldState) {
        if (!chunk.key) {
            return;
        }
        if (!this.listeners_.has(chunk.key)) {
            return;
        }
        for (const listener of [...this.listeners_.get(chunk.key)]) {
            listener.stateChanged(chunk, oldState);
        }
    }
}
function updateChunkStatistics(chunk, sign) {
    const { statistics } = chunk.source;
    const { systemMemoryBytes, gpuMemoryBytes } = chunk;
    const index = Object(neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["getChunkStateStatisticIndex"])(chunk.state, chunk.priorityTier);
    statistics[index * neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["numChunkMemoryStatistics"] + neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkMemoryStatistics"].numChunks] += sign;
    statistics[index * neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["numChunkMemoryStatistics"] + neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkMemoryStatistics"].systemMemoryBytes] +=
        sign * systemMemoryBytes;
    statistics[index * neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["numChunkMemoryStatistics"] + neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkMemoryStatistics"].gpuMemoryBytes] +=
        sign * gpuMemoryBytes;
}
class ChunkSource extends ChunkSourceBase {
    constructor(rpc, options) {
        // No need to add a reference, since the owner counterpart will hold a reference to the owner
        // counterpart of chunkManager.
        const chunkManager = rpc.get(options['chunkManager']);
        super(chunkManager);
        Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_9__["initializeSharedObjectCounterpart"])(this, rpc, options);
    }
}
function startChunkDownload(chunk) {
    const downloadCancellationToken = chunk.downloadCancellationToken = new neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_1__["CancellationTokenSource"]();
    const startTime = Date.now();
    chunk.source.download(chunk, downloadCancellationToken)
        .then(() => {
        if (chunk.downloadCancellationToken === downloadCancellationToken) {
            chunk.downloadCancellationToken = undefined;
            const endTime = Date.now();
            const { statistics } = chunk.source;
            statistics[Object(neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["getChunkDownloadStatisticIndex"])(neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkDownloadStatistics"].totalTime)] +=
                (endTime - startTime);
            ++statistics[Object(neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["getChunkDownloadStatisticIndex"])(neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkDownloadStatistics"].totalChunks)];
            chunk.downloadSucceeded();
        }
    }, (error) => {
        if (chunk.downloadCancellationToken === downloadCancellationToken) {
            chunk.downloadCancellationToken = undefined;
            chunk.downloadFailed(error);
            console.log(`Error retrieving chunk ${chunk}: ${error}`);
        }
    });
}
function cancelChunkDownload(chunk) {
    const token = chunk.downloadCancellationToken;
    chunk.downloadCancellationToken = undefined;
    token.cancel();
}
class ChunkPriorityQueue {
    constructor(heapOperations, linkedListOperations) {
        this.heapOperations = heapOperations;
        this.linkedListOperations = linkedListOperations;
        /**
         * Heap roots for VISIBLE and PREFETCH priority tiers.
         */
        this.heapRoots = [null, null];
        /**
         * Head node for RECENT linked list.
         */
        this.recentHead = new Chunk();
        linkedListOperations.initializeHead(this.recentHead);
    }
    add(chunk) {
        let priorityTier = chunk.priorityTier;
        if (priorityTier === neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkPriorityTier"].RECENT) {
            this.linkedListOperations.insertAfter(this.recentHead, chunk);
        }
        else {
            let { heapRoots } = this;
            heapRoots[priorityTier] = this.heapOperations.meld(heapRoots[priorityTier], chunk);
        }
    }
    *candidates() {
        if (this.heapOperations.compare === Chunk.priorityLess) {
            // Start with least-recently used RECENT chunk.
            let { linkedListOperations, recentHead } = this;
            while (true) {
                let chunk = linkedListOperations.back(recentHead);
                if (chunk == null) {
                    break;
                }
                else {
                    yield chunk;
                }
            }
            let { heapRoots } = this;
            for (let tier = neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkPriorityTier"].LAST_ORDERED_TIER; tier >= neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkPriorityTier"].FIRST_ORDERED_TIER; --tier) {
                while (true) {
                    let root = heapRoots[tier];
                    if (root == null) {
                        break;
                    }
                    else {
                        yield root;
                    }
                }
            }
        }
        else {
            let heapRoots = this.heapRoots;
            for (let tier = neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkPriorityTier"].FIRST_ORDERED_TIER; tier <= neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkPriorityTier"].LAST_ORDERED_TIER; ++tier) {
                while (true) {
                    let root = heapRoots[tier];
                    if (root == null) {
                        break;
                    }
                    else {
                        yield root;
                    }
                }
            }
            let { linkedListOperations, recentHead } = this;
            while (true) {
                let chunk = linkedListOperations.front(recentHead);
                if (chunk == null) {
                    break;
                }
                else {
                    yield chunk;
                }
            }
        }
    }
    /**
     * Deletes a chunk from this priority queue.
     * @param chunk The chunk to delete from the priority queue.
     */
    delete(chunk) {
        let priorityTier = chunk.priorityTier;
        if (priorityTier === neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkPriorityTier"].RECENT) {
            this.linkedListOperations.pop(chunk);
        }
        else {
            let heapRoots = this.heapRoots;
            heapRoots[priorityTier] = this.heapOperations.remove(heapRoots[priorityTier], chunk);
        }
    }
}
function makeChunkPriorityQueue0(compare) {
    return new ChunkPriorityQueue(new neuroglancer_util_pairing_heap_0__WEBPACK_IMPORTED_MODULE_6__["default"](compare), neuroglancer_util_linked_list_0__WEBPACK_IMPORTED_MODULE_3__["default"]);
}
function makeChunkPriorityQueue1(compare) {
    return new ChunkPriorityQueue(new neuroglancer_util_pairing_heap_1__WEBPACK_IMPORTED_MODULE_7__["default"](compare), neuroglancer_util_linked_list_1__WEBPACK_IMPORTED_MODULE_4__["default"]);
}
function tryToFreeCapacity(size, capacity, priorityTier, priority, evictionCandidates, evict) {
    while (capacity.availableItems < 1 || capacity.availableSize < size) {
        let evictionCandidate = evictionCandidates.next().value;
        if (evictionCandidate === undefined) {
            // No eviction candidates available, promotions are done.
            return false;
        }
        else {
            let evictionTier = evictionCandidate.priorityTier;
            if (evictionTier < priorityTier ||
                (evictionTier === priorityTier && evictionCandidate.priority >= priority)) {
                // Lowest priority eviction candidate has priority >= highest
                // priority promotion candidate.  No more promotions are
                // possible.
                return false;
            }
            evict(evictionCandidate);
        }
    }
    return true;
}
class AvailableCapacity extends neuroglancer_util_disposable__WEBPACK_IMPORTED_MODULE_2__["RefCounted"] {
    constructor(itemLimit, sizeLimit) {
        super();
        this.itemLimit = itemLimit;
        this.sizeLimit = sizeLimit;
        this.currentSize = 0;
        this.currentItems = 0;
        this.capacityChanged = new neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_8__["NullarySignal"]();
        this.registerDisposer(itemLimit.changed.add(this.capacityChanged.dispatch));
        this.registerDisposer(sizeLimit.changed.add(this.capacityChanged.dispatch));
    }
    /**
     * Adjust available capacity by the specified amounts.
     */
    adjust(items, size) {
        this.currentItems -= items;
        this.currentSize -= size;
    }
    get availableSize() {
        return this.sizeLimit.value - this.currentSize;
    }
    get availableItems() {
        return this.itemLimit.value - this.currentItems;
    }
}
let ChunkQueueManager = class ChunkQueueManager extends neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_9__["SharedObjectCounterpart"] {
    constructor(rpc, options) {
        super(rpc, options);
        /**
         * Set of chunk sources associated with this queue manager.
         */
        this.sources = new Set();
        /**
         * Contains all chunks in QUEUED state pending download, for each sourceQueueLevel.
         */
        this.queuedDownloadPromotionQueue = [
            makeChunkPriorityQueue1(Chunk.priorityGreater),
            makeChunkPriorityQueue1(Chunk.priorityGreater),
        ];
        /**
         * Contains all chunks in QUEUED state pending compute.
         */
        this.queuedComputePromotionQueue = makeChunkPriorityQueue1(Chunk.priorityGreater);
        /**
         * Contains all chunks in DOWNLOADING state, for each sourceQueueLevel.
         */
        this.downloadEvictionQueue = [
            makeChunkPriorityQueue1(Chunk.priorityLess),
            makeChunkPriorityQueue1(Chunk.priorityLess),
        ];
        /**
         * Contains all chunks in COMPUTING state.
         */
        this.computeEvictionQueue = makeChunkPriorityQueue1(Chunk.priorityLess);
        /**
         * Contains all chunks that take up memory (DOWNLOADING, SYSTEM_MEMORY,
         * GPU_MEMORY).
         */
        this.systemMemoryEvictionQueue = makeChunkPriorityQueue0(Chunk.priorityLess);
        /**
         * Contains all chunks in SYSTEM_MEMORY state not in RECENT priority tier.
         */
        this.gpuMemoryPromotionQueue = makeChunkPriorityQueue1(Chunk.priorityGreater);
        /**
         * Contains all chunks in GPU_MEMORY state.
         */
        this.gpuMemoryEvictionQueue = makeChunkPriorityQueue1(Chunk.priorityLess);
        this.updatePending = null;
        this.numQueued = 0;
        this.numFailed = 0;
        const getCapacity = (capacity) => {
            const result = this.registerDisposer(new AvailableCapacity(rpc.get(capacity['itemLimit']), rpc.get(capacity['sizeLimit'])));
            result.capacityChanged.add(() => this.scheduleUpdate());
            return result;
        };
        this.gpuMemoryCapacity = getCapacity(options['gpuMemoryCapacity']);
        this.systemMemoryCapacity = getCapacity(options['systemMemoryCapacity']);
        this.downloadCapacity = [
            getCapacity(options['downloadCapacity']),
            getCapacity(options['downloadCapacity']),
        ];
        this.computeCapacity = getCapacity(options['computeCapacity']);
    }
    scheduleUpdate() {
        if (this.updatePending === null) {
            this.updatePending = setTimeout(this.process.bind(this), 0);
        }
    }
    *chunkQueuesForChunk(chunk) {
        switch (chunk.state) {
            case neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].QUEUED:
                if (chunk.isComputational) {
                    yield this.queuedComputePromotionQueue;
                }
                else {
                    yield this.queuedDownloadPromotionQueue[chunk.source.sourceQueueLevel];
                }
                break;
            case neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].DOWNLOADING:
                if (chunk.isComputational) {
                    yield this.computeEvictionQueue;
                }
                else {
                    yield this.downloadEvictionQueue[chunk.source.sourceQueueLevel];
                    yield this.systemMemoryEvictionQueue;
                }
                break;
            case neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].SYSTEM_MEMORY_WORKER:
            case neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].SYSTEM_MEMORY:
                yield this.systemMemoryEvictionQueue;
                if (chunk.priorityTier !== neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkPriorityTier"].RECENT && !chunk.backendOnly &&
                    chunk.requestedToFrontend) {
                    yield this.gpuMemoryPromotionQueue;
                }
                break;
            case neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].GPU_MEMORY:
                yield this.systemMemoryEvictionQueue;
                yield this.gpuMemoryEvictionQueue;
                break;
        }
    }
    adjustCapacitiesForChunk(chunk, add) {
        let factor = add ? -1 : 1;
        switch (chunk.state) {
            case neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].FAILED:
                this.numFailed -= factor;
                break;
            case neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].QUEUED:
                this.numQueued -= factor;
                break;
            case neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].DOWNLOADING:
                (chunk.isComputational ? this.computeCapacity :
                    this.downloadCapacity[chunk.source.sourceQueueLevel])
                    .adjust(factor, factor * chunk.systemMemoryBytes);
                this.systemMemoryCapacity.adjust(factor, factor * chunk.systemMemoryBytes);
                break;
            case neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].SYSTEM_MEMORY:
            case neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].SYSTEM_MEMORY_WORKER:
                this.systemMemoryCapacity.adjust(factor, factor * chunk.systemMemoryBytes);
                break;
            case neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].GPU_MEMORY:
                this.systemMemoryCapacity.adjust(factor, factor * chunk.systemMemoryBytes);
                this.gpuMemoryCapacity.adjust(factor, factor * chunk.gpuMemoryBytes);
                break;
        }
    }
    removeChunkFromQueues_(chunk) {
        updateChunkStatistics(chunk, -1);
        for (let queue of this.chunkQueuesForChunk(chunk)) {
            queue.delete(chunk);
        }
    }
    // var freedChunks = 0;
    addChunkToQueues_(chunk) {
        if (chunk.state === neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].QUEUED && chunk.priorityTier === neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkPriorityTier"].RECENT) {
            // Delete this chunk.
            let { source } = chunk;
            source.removeChunk(chunk);
            this.adjustCapacitiesForChunk(chunk, false);
            return false;
        }
        else {
            updateChunkStatistics(chunk, 1);
            for (let queue of this.chunkQueuesForChunk(chunk)) {
                queue.add(chunk);
            }
            return true;
        }
    }
    performChunkPriorityUpdate(chunk) {
        if (chunk.priorityTier === chunk.newPriorityTier && chunk.priority === chunk.newPriority) {
            chunk.newPriorityTier = neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkPriorityTier"].RECENT;
            chunk.newPriority = Number.NEGATIVE_INFINITY;
            return;
        }
        if (DEBUG_CHUNK_UPDATES) {
            console.log(`${chunk}: changed priority ${chunk.priorityTier}:` +
                `${chunk.priority} -> ${chunk.newPriorityTier}:${chunk.newPriority}`);
        }
        this.removeChunkFromQueues_(chunk);
        chunk.updatePriorityProperties();
        if (chunk.state === neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].NEW) {
            chunk.state = neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].QUEUED;
            this.adjustCapacitiesForChunk(chunk, true);
        }
        this.addChunkToQueues_(chunk);
    }
    updateChunkState(chunk, newState) {
        if (newState === chunk.state) {
            return;
        }
        if (DEBUG_CHUNK_UPDATES) {
            console.log(`${chunk}: changed state ${chunk.state} -> ${newState}`);
        }
        this.adjustCapacitiesForChunk(chunk, false);
        this.removeChunkFromQueues_(chunk);
        chunk.state = newState;
        this.adjustCapacitiesForChunk(chunk, true);
        this.addChunkToQueues_(chunk);
        this.scheduleUpdate();
    }
    processGPUPromotions_() {
        let queueManager = this;
        function evictFromGPUMemory(chunk) {
            queueManager.freeChunkGPUMemory(chunk);
            chunk.source.chunkManager.queueManager.updateChunkState(chunk, neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].SYSTEM_MEMORY);
        }
        let promotionCandidates = this.gpuMemoryPromotionQueue.candidates();
        let evictionCandidates = this.gpuMemoryEvictionQueue.candidates();
        let capacity = this.gpuMemoryCapacity;
        while (true) {
            let promotionCandidate = promotionCandidates.next().value;
            if (promotionCandidate === undefined) {
                break;
            }
            else {
                let priorityTier = promotionCandidate.priorityTier;
                let priority = promotionCandidate.priority;
                if (!tryToFreeCapacity(promotionCandidate.gpuMemoryBytes, capacity, priorityTier, priority, evictionCandidates, evictFromGPUMemory)) {
                    break;
                }
                this.copyChunkToGPU(promotionCandidate);
                this.updateChunkState(promotionCandidate, neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].GPU_MEMORY);
            }
        }
    }
    freeChunkGPUMemory(chunk) {
        this.rpc.invoke('Chunk.update', { 'id': chunk.key, 'state': neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].SYSTEM_MEMORY, 'source': chunk.source.rpcId });
    }
    freeChunkSystemMemory(chunk) {
        if (chunk.state === neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].SYSTEM_MEMORY_WORKER) {
            chunk.freeSystemMemory();
        }
        else {
            this.rpc.invoke('Chunk.update', { 'id': chunk.key, 'state': neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].EXPIRED, 'source': chunk.source.rpcId });
        }
    }
    retrieveChunkData(chunk) {
        return this.rpc.promiseInvoke('Chunk.retrieve', { key: chunk.key, source: chunk.source.rpcId });
    }
    copyChunkToGPU(chunk) {
        let rpc = this.rpc;
        if (chunk.state === neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].SYSTEM_MEMORY) {
            rpc.invoke('Chunk.update', { 'id': chunk.key, 'source': chunk.source.rpcId, 'state': neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].GPU_MEMORY });
        }
        else {
            let msg = {};
            let transfers = [];
            chunk.serialize(msg, transfers);
            msg['state'] = neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].GPU_MEMORY;
            rpc.invoke('Chunk.update', msg, transfers);
        }
    }
    processQueuePromotions_() {
        let queueManager = this;
        const evict = (chunk) => {
            switch (chunk.state) {
                case neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].DOWNLOADING:
                    cancelChunkDownload(chunk);
                    break;
                case neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].GPU_MEMORY:
                    queueManager.freeChunkGPUMemory(chunk);
                case neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].SYSTEM_MEMORY_WORKER:
                case neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].SYSTEM_MEMORY:
                    queueManager.freeChunkSystemMemory(chunk);
                    break;
            }
            // Note: After calling this, chunk may no longer be valid.
            this.updateChunkState(chunk, neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].QUEUED);
        };
        const promotionLambda = (promotionCandidates, evictionCandidates, capacity) => {
            let systemMemoryEvictionCandidates = this.systemMemoryEvictionQueue.candidates();
            let systemMemoryCapacity = this.systemMemoryCapacity;
            while (true) {
                let promotionCandidateResult = promotionCandidates.next();
                if (promotionCandidateResult.done) {
                    return;
                }
                let promotionCandidate = promotionCandidateResult.value;
                const size = 0; /* unknown size, since it hasn't been downloaded yet. */
                let priorityTier = promotionCandidate.priorityTier;
                let priority = promotionCandidate.priority;
                // console.log("Download capacity: " + downloadCapacity);
                if (!tryToFreeCapacity(size, capacity, priorityTier, priority, evictionCandidates, evict)) {
                    return;
                }
                if (!tryToFreeCapacity(size, systemMemoryCapacity, priorityTier, priority, systemMemoryEvictionCandidates, evict)) {
                    return;
                }
                this.updateChunkState(promotionCandidate, neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].DOWNLOADING);
                startChunkDownload(promotionCandidate);
            }
        };
        for (let sourceQueueLevel = 0; sourceQueueLevel < numSourceQueueLevels; ++sourceQueueLevel) {
            promotionLambda(this.queuedDownloadPromotionQueue[sourceQueueLevel].candidates(), this.downloadEvictionQueue[sourceQueueLevel].candidates(), this.downloadCapacity[sourceQueueLevel]);
        }
        promotionLambda(this.queuedComputePromotionQueue.candidates(), this.computeEvictionQueue.candidates(), this.computeCapacity);
    }
    process() {
        if (!this.updatePending) {
            return;
        }
        this.updatePending = null;
        this.processGPUPromotions_();
        this.processQueuePromotions_();
        this.logStatistics();
    }
    logStatistics() {
        if (DEBUG_CHUNK_UPDATES) {
            console.log(`[Chunk status] QUEUED: ${this.numQueued}, FAILED: ` +
                `${this.numFailed}, DOWNLOAD: ${this.downloadCapacity}, ` +
                `MEM: ${this.systemMemoryCapacity}, GPU: ${this.gpuMemoryCapacity}`);
        }
    }
    invalidateSourceCache(source) {
        for (const chunk of source.chunks.values()) {
            switch (chunk.state) {
                case neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].DOWNLOADING:
                    cancelChunkDownload(chunk);
                    break;
                case neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].SYSTEM_MEMORY_WORKER:
                    chunk.freeSystemMemory();
                    break;
            }
            // Note: After calling this, chunk may no longer be valid.
            this.updateChunkState(chunk, neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkState"].QUEUED);
        }
        this.rpc.invoke('Chunk.update', { 'source': source.rpcId });
        this.scheduleUpdate();
    }
};
ChunkQueueManager = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_9__["registerSharedObject"])(neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["CHUNK_QUEUE_MANAGER_RPC_ID"])
], ChunkQueueManager);

let ChunkManager = class ChunkManager extends neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_9__["SharedObjectCounterpart"] {
    constructor(rpc, options) {
        super(rpc, options);
        /**
         * Array of chunks within each existing priority tier.
         */
        this.existingTierChunks = [];
        /**
         * Array of chunks whose new priorities have not yet been reflected in the
         * queue states.
         */
        this.newTierChunks = [];
        this.updatePending = null;
        this.recomputeChunkPriorities = new neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_8__["NullarySignal"]();
        /**
         * Dispatched immediately after recomputeChunkPriorities is dispatched.
         * This signal should be used for handlers that depend on the result of another handler.
         */
        this.recomputeChunkPrioritiesLate = new neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_8__["NullarySignal"]();
        this.memoize = new neuroglancer_util_memoize__WEBPACK_IMPORTED_MODULE_5__["StringMemoize"]();
        this.queueManager = rpc.get(options['chunkQueueManager']).addRef();
        for (let tier = neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkPriorityTier"].FIRST_TIER; tier <= neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkPriorityTier"].LAST_TIER; ++tier) {
            if (tier === neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkPriorityTier"].RECENT) {
                continue;
            }
            this.existingTierChunks[tier] = [];
        }
    }
    scheduleUpdateChunkPriorities() {
        if (this.updatePending === null) {
            this.updatePending = setTimeout(this.recomputeChunkPriorities_.bind(this), 0);
        }
    }
    recomputeChunkPriorities_() {
        this.updatePending = null;
        this.recomputeChunkPriorities.dispatch();
        this.recomputeChunkPrioritiesLate.dispatch();
        this.updateQueueState([neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkPriorityTier"].VISIBLE, neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkPriorityTier"].PREFETCH]);
    }
    /**
     * @param chunk
     * @param tier New priority tier.  Must not equal ChunkPriorityTier.RECENT.
     * @param priority Priority within tier.
     * @param toFrontend true if the chunk should be moved to the frontend when ready.
     */
    requestChunk(chunk, tier, priority, toFrontend = true) {
        if (tier === neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkPriorityTier"].RECENT) {
            throw new Error('Not going to request a chunk with the RECENT tier');
        }
        chunk.newlyRequestedToFrontend = chunk.newlyRequestedToFrontend || toFrontend;
        if (chunk.newPriorityTier === neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkPriorityTier"].RECENT) {
            this.newTierChunks.push(chunk);
        }
        const newPriorityTier = chunk.newPriorityTier;
        if (tier < newPriorityTier || (tier === newPriorityTier && priority > chunk.newPriority)) {
            chunk.newPriorityTier = tier;
            chunk.newPriority = priority;
        }
    }
    /**
     * Update queue state to reflect updated contents of the specified priority tiers.  Existing
     * chunks within those tiers not present in this.newTierChunks will be moved to the RECENT tier
     * (and removed if in the QUEUED state).
     */
    updateQueueState(tiers) {
        let existingTierChunks = this.existingTierChunks;
        let queueManager = this.queueManager;
        for (let tier of tiers) {
            let chunks = existingTierChunks[tier];
            for (let chunk of chunks) {
                if (chunk.newPriorityTier === neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["ChunkPriorityTier"].RECENT) {
                    // Downgrade the priority of this chunk.
                    queueManager.performChunkPriorityUpdate(chunk);
                }
            }
            chunks.length = 0;
        }
        let newTierChunks = this.newTierChunks;
        for (let chunk of newTierChunks) {
            queueManager.performChunkPriorityUpdate(chunk);
            existingTierChunks[chunk.priorityTier].push(chunk);
        }
        if (DEBUG_CHUNK_UPDATES) {
            console.log(`updateQueueState: newTierChunks.length = ${newTierChunks.length}`);
        }
        newTierChunks.length = 0;
        this.queueManager.scheduleUpdate();
    }
};
ChunkManager = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_9__["registerSharedObject"])(neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["CHUNK_MANAGER_RPC_ID"])
], ChunkManager);

/**
 * Mixin for adding a `parameters` member to a ChunkSource, and for registering the shared object
 * type based on the `RPC_ID` member of the Parameters class.
 */
function WithParameters(Base, parametersConstructor) {
    let C = class C extends Base {
        constructor(...args) {
            super(...args);
            const options = args[1];
            this.parameters = options['parameters'];
        }
    };
    C = __decorate([
        Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_9__["registerSharedObjectOwner"])(parametersConstructor.RPC_ID)
    ], C);
    return C;
}
/**
 * Mixin that adds a chunkManager property initialized from the RPC-supplied options.
 *
 * The resultant class implements `ChunkRequester`.
 */
function withChunkManager(Base) {
    return class extends Base {
        constructor(...args) {
            super(...args);
            const rpc = args[0];
            const options = args[1];
            // We don't increment the reference count, because our owner owns a reference to the
            // ChunkManager.
            this.chunkManager = rpc.get(options['chunkManager']);
        }
    };
}
Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_9__["registerRPC"])(neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["CHUNK_SOURCE_INVALIDATE_RPC_ID"], function (x) {
    const source = this.get(x['id']);
    source.chunkManager.queueManager.invalidateSourceCache(source);
});
Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_9__["registerPromiseRPC"])(neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_0__["REQUEST_CHUNK_STATISTICS_RPC_ID"], function (x) {
    const queue = this.get(x.queue);
    const results = new Map();
    for (const source of queue.sources) {
        results.set(source.rpcId, source.statistics);
    }
    return Promise.resolve({ value: results });
});


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/base.ts":
/*!**********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/chunk_manager/base.ts ***!
  \**********************************************************************************************************/
/*! exports provided: ChunkState, numChunkStates, ChunkPriorityTier, numChunkPriorityTiers, ChunkDownloadStatistics, ChunkMemoryStatistics, numChunkMemoryStatistics, numChunkDownloadStatistics, numChunkStatistics, getChunkStateStatisticIndex, getChunkDownloadStatisticIndex, PREFETCH_PRIORITY_MULTIPLIER, CHUNK_QUEUE_MANAGER_RPC_ID, CHUNK_MANAGER_RPC_ID, CHUNK_SOURCE_INVALIDATE_RPC_ID, REQUEST_CHUNK_STATISTICS_RPC_ID */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChunkState", function() { return ChunkState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "numChunkStates", function() { return numChunkStates; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChunkPriorityTier", function() { return ChunkPriorityTier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "numChunkPriorityTiers", function() { return numChunkPriorityTiers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChunkDownloadStatistics", function() { return ChunkDownloadStatistics; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChunkMemoryStatistics", function() { return ChunkMemoryStatistics; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "numChunkMemoryStatistics", function() { return numChunkMemoryStatistics; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "numChunkDownloadStatistics", function() { return numChunkDownloadStatistics; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "numChunkStatistics", function() { return numChunkStatistics; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getChunkStateStatisticIndex", function() { return getChunkStateStatisticIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getChunkDownloadStatisticIndex", function() { return getChunkDownloadStatisticIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PREFETCH_PRIORITY_MULTIPLIER", function() { return PREFETCH_PRIORITY_MULTIPLIER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CHUNK_QUEUE_MANAGER_RPC_ID", function() { return CHUNK_QUEUE_MANAGER_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CHUNK_MANAGER_RPC_ID", function() { return CHUNK_MANAGER_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CHUNK_SOURCE_INVALIDATE_RPC_ID", function() { return CHUNK_SOURCE_INVALIDATE_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "REQUEST_CHUNK_STATISTICS_RPC_ID", function() { return REQUEST_CHUNK_STATISTICS_RPC_ID; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ChunkState;
(function (ChunkState) {
    // Chunk is stored in GPU memory in addition to system memory.
    ChunkState[ChunkState["GPU_MEMORY"] = 0] = "GPU_MEMORY";
    // Chunk is stored only in system memory but not in GPU memory.
    ChunkState[ChunkState["SYSTEM_MEMORY"] = 1] = "SYSTEM_MEMORY";
    // Chunk is stored in system memory on worker.
    ChunkState[ChunkState["SYSTEM_MEMORY_WORKER"] = 2] = "SYSTEM_MEMORY_WORKER";
    // Chunk is downloading.
    ChunkState[ChunkState["DOWNLOADING"] = 3] = "DOWNLOADING";
    // Chunk is not yet downloading.
    ChunkState[ChunkState["QUEUED"] = 4] = "QUEUED";
    // Chunk has just been added.
    ChunkState[ChunkState["NEW"] = 5] = "NEW";
    // Download failed.
    ChunkState[ChunkState["FAILED"] = 6] = "FAILED";
    ChunkState[ChunkState["EXPIRED"] = 7] = "EXPIRED";
    // If new states are added, keep numChangeStates in sync.
})(ChunkState || (ChunkState = {}));
const numChunkStates = 8;
var ChunkPriorityTier;
(function (ChunkPriorityTier) {
    ChunkPriorityTier[ChunkPriorityTier["FIRST_TIER"] = 0] = "FIRST_TIER";
    ChunkPriorityTier[ChunkPriorityTier["FIRST_ORDERED_TIER"] = 0] = "FIRST_ORDERED_TIER";
    ChunkPriorityTier[ChunkPriorityTier["VISIBLE"] = 0] = "VISIBLE";
    ChunkPriorityTier[ChunkPriorityTier["PREFETCH"] = 1] = "PREFETCH";
    ChunkPriorityTier[ChunkPriorityTier["LAST_ORDERED_TIER"] = 1] = "LAST_ORDERED_TIER";
    ChunkPriorityTier[ChunkPriorityTier["RECENT"] = 2] = "RECENT";
    ChunkPriorityTier[ChunkPriorityTier["LAST_TIER"] = 2] = "LAST_TIER";
})(ChunkPriorityTier || (ChunkPriorityTier = {}));
const numChunkPriorityTiers = 3;
var ChunkDownloadStatistics;
(function (ChunkDownloadStatistics) {
    ChunkDownloadStatistics[ChunkDownloadStatistics["totalTime"] = 0] = "totalTime";
    ChunkDownloadStatistics[ChunkDownloadStatistics["totalChunks"] = 1] = "totalChunks";
})(ChunkDownloadStatistics || (ChunkDownloadStatistics = {}));
var ChunkMemoryStatistics;
(function (ChunkMemoryStatistics) {
    ChunkMemoryStatistics[ChunkMemoryStatistics["numChunks"] = 0] = "numChunks";
    ChunkMemoryStatistics[ChunkMemoryStatistics["systemMemoryBytes"] = 1] = "systemMemoryBytes";
    ChunkMemoryStatistics[ChunkMemoryStatistics["gpuMemoryBytes"] = 2] = "gpuMemoryBytes";
})(ChunkMemoryStatistics || (ChunkMemoryStatistics = {}));
const numChunkMemoryStatistics = 3;
const numChunkDownloadStatistics = 2;
const numChunkStatistics = numChunkStates * numChunkPriorityTiers * numChunkMemoryStatistics + numChunkDownloadStatistics;
function getChunkStateStatisticIndex(state, priorityTier) {
    return state * numChunkPriorityTiers + priorityTier;
}
function getChunkDownloadStatisticIndex(statistic) {
    return numChunkStates * numChunkPriorityTiers * numChunkMemoryStatistics + statistic;
}
const PREFETCH_PRIORITY_MULTIPLIER = 1e13;
const CHUNK_QUEUE_MANAGER_RPC_ID = 'ChunkQueueManager';
const CHUNK_MANAGER_RPC_ID = 'ChunkManager';
const CHUNK_SOURCE_INVALIDATE_RPC_ID = 'ChunkSource.invalidate';
const REQUEST_CHUNK_STATISTICS_RPC_ID = 'ChunkQueueManager.requestChunkStatistics';


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/generic_file_source.ts":
/*!*************************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/chunk_manager/generic_file_source.ts ***!
  \*************************************************************************************************************************/
/*! exports provided: GenericSharedDataSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GenericSharedDataSource", function() { return GenericSharedDataSource; });
/* harmony import */ var neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/chunk_manager/backend */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/backend.ts");
/* harmony import */ var neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/chunk_manager/base */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/base.ts");
/* harmony import */ var neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/util/cancellation */ "../../../../../../neuroglancer/src/neuroglancer/util/cancellation.ts");
/* harmony import */ var neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/util/http_request */ "../../../../../../neuroglancer/src/neuroglancer/util/http_request.ts");
/* harmony import */ var neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! neuroglancer/util/json */ "../../../../../../neuroglancer/src/neuroglancer/util/json.ts");
/* harmony import */ var neuroglancer_util_object_id__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! neuroglancer/util/object_id */ "../../../../../../neuroglancer/src/neuroglancer/util/object_id.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @file
 * Provides a simple way to request a file on the backend with priority integration.
 */






class GenericSharedDataChunk extends neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["Chunk"] {
    constructor() {
        super(...arguments);
        this.backendOnly = true;
    }
    initialize(key) {
        super.initialize(key);
        this.requesters = new Set();
    }
    downloadSucceeded() {
        super.downloadSucceeded();
        let { requesters, data } = this;
        this.requesters = undefined;
        for (let requester of requesters) {
            requester.resolve(data);
        }
    }
    downloadFailed(error) {
        super.downloadFailed(error);
        let { requesters } = this;
        this.requesters = undefined;
        for (let requester of requesters) {
            requester.reject(error);
        }
    }
    freeSystemMemory() {
        this.data = undefined;
    }
}
class GenericSharedDataSource extends neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["ChunkSourceBase"] {
    constructor(chunkManager, options) {
        super(chunkManager);
        this.registerDisposer(chunkManager);
        const { encodeKey = neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_4__["stableStringify"] } = options;
        this.downloadFunction = options.download;
        this.encodeKeyFunction = encodeKey;
        const { sourceQueueLevel = 0 } = options;
        this.sourceQueueLevel = sourceQueueLevel;
        // This source is unusual in that it updates its own chunk priorities.
        this.registerDisposer(this.chunkManager.recomputeChunkPrioritiesLate.add(() => {
            this.updateChunkPriorities();
        }));
    }
    updateChunkPriorities() {
        let { chunkManager } = this;
        for (let chunk of this.chunks.values()) {
            let { requesters } = chunk;
            if (requesters !== undefined) {
                for (let requester of requesters) {
                    const { priorityTier, priority } = requester.getPriority();
                    if (priorityTier === neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__["ChunkPriorityTier"].RECENT)
                        continue;
                    chunkManager.requestChunk(chunk, priorityTier, priority);
                }
            }
        }
    }
    async download(chunk, cancellationToken) {
        const { size, data } = await this.downloadFunction(chunk.decodedKey, cancellationToken);
        chunk.systemMemoryBytes = size;
        chunk.data = data;
    }
    /**
     * Precondition: priorityTier <= ChunkPriorityTier.LAST_ORDERED_TIER
     */
    getData(key, getPriority, cancellationToken) {
        const encodedKey = this.encodeKeyFunction(key);
        let chunk = this.chunks.get(encodedKey);
        if (chunk === undefined) {
            chunk = this.getNewChunk_(GenericSharedDataChunk);
            chunk.decodedKey = key;
            chunk.initialize(encodedKey);
            this.addChunk(chunk);
        }
        return Object(neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_2__["makeCancelablePromise"])(cancellationToken, (resolve, reject, token) => {
            // If the data is already available or the request has already failed, resolve/reject the
            // promise immediately.
            switch (chunk.state) {
                case neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__["ChunkState"].FAILED:
                    reject(chunk.error);
                    return;
                case neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__["ChunkState"].SYSTEM_MEMORY_WORKER:
                    resolve(chunk.data);
                    return;
            }
            const requester = { resolve, reject, getPriority };
            chunk.requesters.add(requester);
            token.add(() => {
                let { requesters } = chunk;
                if (requesters !== undefined) {
                    requesters.delete(requester);
                    this.chunkManager.scheduleUpdateChunkPriorities();
                }
                reject(neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_2__["CANCELED"]);
            });
            this.chunkManager.scheduleUpdateChunkPriorities();
        });
    }
    static get(chunkManager, memoizeKey, options) {
        return chunkManager.memoize.get(`getFileSource:${memoizeKey}`, () => new GenericSharedDataSource(chunkManager.addRef(), options));
    }
    static getData(chunkManager, memoizeKey, options, key, getPriority, cancellationToken) {
        const source = GenericSharedDataSource.get(chunkManager, memoizeKey, options);
        const result = source.getData(key, getPriority, cancellationToken);
        source.dispose();
        return result;
    }
    static getUrl(chunkManager, decodeFunction, url, getPriority, cancellationToken) {
        return GenericSharedDataSource.getData(chunkManager, `${Object(neuroglancer_util_object_id__WEBPACK_IMPORTED_MODULE_5__["getObjectId"])(decodeFunction)}`, {
            download: (url, cancellationToken) => Object(neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_3__["cancellableFetchOk"])(url, {}, neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_3__["responseArrayBuffer"], cancellationToken)
                .then(response => decodeFunction(response, cancellationToken))
        }, url, getPriority, cancellationToken);
    }
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/coordinate_transform.ts":
/*!************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/coordinate_transform.ts ***!
  \************************************************************************************************************/
/*! exports provided: CoordinateTransform, makeDerivedCoordinateTransform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CoordinateTransform", function() { return CoordinateTransform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeDerivedCoordinateTransform", function() { return makeDerivedCoordinateTransform; });
/* harmony import */ var neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/util/geom */ "../../../../../../neuroglancer/src/neuroglancer/util/geom.ts");
/* harmony import */ var neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/json */ "../../../../../../neuroglancer/src/neuroglancer/util/json.ts");
/* harmony import */ var neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/util/signal */ "../../../../../../neuroglancer/src/neuroglancer/util/signal.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Class for representing a coordinate transform specified by a user.
 *
 * Typically it represents a transform from a local coordinate space to a global coordinate space.
 */
class CoordinateTransform {
    constructor(transform = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["mat4"].create()) {
        this.transform = transform;
        this.changed = new neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_2__["NullarySignal"]();
        this.inverseTransform = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["mat4"].create();
        this.needsUpdate = true;
        this.changed.add(() => {
            this.needsUpdate = true;
        });
    }
    get value() {
        return this.transform;
    }
    get inverse() {
        if (this.needsUpdate) {
            neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["mat4"].invert(this.inverseTransform, this.transform);
            this.needsUpdate = false;
        }
        return this.inverseTransform;
    }
    /**
     * Resets to the identity transform.
     */
    reset() {
        neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["mat4"].copy(this.transform, neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["identityMat4"]);
        this.changed.dispatch();
    }
    toJSON() {
        if (neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["mat4"].equals(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["identityMat4"], this.transform)) {
            return undefined;
        }
        const m = this.transform;
        return [
            [m[0], m[4], m[8], m[12]],
            [m[1], m[5], m[9], m[13]],
            [m[2], m[6], m[10], m[14]],
            [m[3], m[7], m[11], m[15]],
        ];
    }
    restoreState(obj) {
        if (obj == null) {
            this.reset();
            return;
        }
        if (Array.isArray(obj)) {
            if (obj.length === 4) {
                try {
                    for (let i = 0; i < 4; ++i) {
                        Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_1__["parseFiniteVec"])(this.transform.subarray(i * 4, (i + 1) * 4), obj[i]);
                    }
                    neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["mat4"].transpose(this.transform, this.transform);
                }
                catch (ignoredError) {
                    this.reset();
                }
                return;
            }
            if (obj.length === 16) {
                try {
                    Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_1__["parseFiniteVec"])(this.transform, obj);
                    neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["mat4"].transpose(this.transform, this.transform);
                }
                catch (ignoredError) {
                    this.reset();
                }
                return;
            }
            // Invalid size.
            this.reset();
            return;
        }
        if (typeof obj === 'object') {
            const rotation = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["quat"].create();
            const translation = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["vec3"].create();
            const scale = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["vec3"].fromValues(1, 1, 1);
            try {
                Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_1__["parseFiniteVec"])(rotation, obj['rotation']);
                neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["quat"].normalize(rotation, rotation);
            }
            catch (ignoredError) {
                neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["quat"].identity(rotation);
            }
            try {
                Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_1__["parseFiniteVec"])(translation, obj['translation']);
            }
            catch (ignoredError) {
                neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["vec3"].copy(translation, neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["kZeroVec"]);
            }
            try {
                Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_1__["parseFiniteVec"])(scale, obj['scale']);
            }
            catch (ignoredError) {
                neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["vec3"].copy(scale, neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["kOneVec"]);
            }
            neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["mat4"].fromRotationTranslationScale(this.transform, rotation, translation, scale);
            this.changed.dispatch();
        }
        else {
            this.reset();
        }
    }
    clone() {
        return new CoordinateTransform(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["mat4"].clone(this.transform));
    }
}
function makeDerivedCoordinateTransform(derivedTransform, baseTransform, update) {
    update(derivedTransform.transform, baseTransform.transform);
    return baseTransform.changed.add(() => {
        update(derivedTransform.transform, baseTransform.transform);
        derivedTransform.changed.dispatch();
    });
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/credentials_provider/http_request.ts":
/*!*************************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/credentials_provider/http_request.ts ***!
  \*************************************************************************************************************************/
/*! exports provided: fetchWithCredentials */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fetchWithCredentials", function() { return fetchWithCredentials; });
/* harmony import */ var neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/util/cancellation */ "../../../../../../neuroglancer/src/neuroglancer/util/cancellation.ts");
/* harmony import */ var neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/http_request */ "../../../../../../neuroglancer/src/neuroglancer/util/http_request.ts");
/**
 * @license
 * Copyright 2019 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


async function fetchWithCredentials(credentialsProvider, input, init, transformResponse, applyCredentials, errorHandler, cancellationToken = neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_0__["uncancelableToken"]) {
    let credentials;
    credentialsLoop: while (true) {
        credentials = await credentialsProvider.get(credentials, cancellationToken);
        requestLoop: while (true) {
            try {
                return await Object(neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_1__["cancellableFetchOk"])(input, applyCredentials(credentials.credentials, init), transformResponse, cancellationToken);
            }
            catch (error) {
                if (error instanceof neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_1__["HttpError"]) {
                    if (errorHandler(error) === 'refresh')
                        continue credentialsLoop;
                    continue requestLoop;
                }
                throw error;
            }
        }
    }
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/credentials_provider/index.ts":
/*!******************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/credentials_provider/index.ts ***!
  \******************************************************************************************************************/
/*! exports provided: CredentialsProvider, makeCachedCredentialsGetter, makeCredentialsGetter, MapBasedCredentialsManager, CachingCredentialsManager, CachingMapBasedCredentialsManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CredentialsProvider", function() { return CredentialsProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeCachedCredentialsGetter", function() { return makeCachedCredentialsGetter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeCredentialsGetter", function() { return makeCredentialsGetter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MapBasedCredentialsManager", function() { return MapBasedCredentialsManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CachingCredentialsManager", function() { return CachingCredentialsManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CachingMapBasedCredentialsManager", function() { return CachingMapBasedCredentialsManager; });
/* harmony import */ var neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/util/cancellation */ "../../../../../../neuroglancer/src/neuroglancer/util/cancellation.ts");
/* harmony import */ var neuroglancer_util_disposable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/disposable */ "../../../../../../neuroglancer/src/neuroglancer/util/disposable.ts");
/* harmony import */ var neuroglancer_util_memoize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/util/memoize */ "../../../../../../neuroglancer/src/neuroglancer/util/memoize.ts");
/**
 * @license
 * Copyright 2017 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @file Generic facility for providing authentication/authorization credentials.
 */



class CredentialsProvider extends neuroglancer_util_disposable__WEBPACK_IMPORTED_MODULE_1__["RefCounted"] {
}
function makeCachedCredentialsGetter(getUncached) {
    let cachedCredentials;
    let pendingCredentials;
    let pendingCancellationToken;
    return (invalidCredentials, cancellationToken) => {
        if (pendingCredentials !== undefined &&
            (cachedCredentials === undefined || invalidCredentials === undefined ||
                cachedCredentials.generation !== invalidCredentials.generation)) {
            if (cachedCredentials === undefined) {
                pendingCancellationToken.addConsumer(cancellationToken);
            }
            return pendingCredentials;
        }
        cachedCredentials = undefined;
        pendingCancellationToken = new neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_0__["MultipleConsumerCancellationTokenSource"]();
        pendingCredentials = getUncached(invalidCredentials, pendingCancellationToken)
            .then(credentials => {
            cachedCredentials = credentials;
            pendingCancellationToken = undefined;
            return credentials;
        }, reason => {
            if (pendingCancellationToken.isCanceled) {
                pendingCancellationToken = undefined;
                pendingCredentials = undefined;
            }
            throw reason;
        });
        return pendingCredentials;
    };
}
function makeCredentialsGetter(getWithoutGeneration) {
    let generation = 0;
    return makeCachedCredentialsGetter((_invalidCredentials, cancellationToken) => getWithoutGeneration(cancellationToken)
        .then(credentials => ({ generation: ++generation, credentials })));
}
/**
 * CredentialsManager that supports registration.
 */
class MapBasedCredentialsManager {
    constructor() {
        this.providers = new Map();
    }
    register(key, providerGetter) {
        this.providers.set(key, providerGetter);
    }
    getCredentialsProvider(key, parameters) {
        const getter = this.providers.get(key);
        if (getter === undefined) {
            throw new Error(`No registered credentials provider: ${JSON.stringify(key)}`);
        }
        return getter(parameters);
    }
}
/**
 * CredentialsManager that wraps another and caches the CredentialsProvider objects.
 */
class CachingCredentialsManager extends neuroglancer_util_disposable__WEBPACK_IMPORTED_MODULE_1__["RefCounted"] {
    constructor(base) {
        super();
        this.base = base;
        this.memoize = new neuroglancer_util_memoize__WEBPACK_IMPORTED_MODULE_2__["StringMemoize"]();
    }
    getCredentialsProvider(key, parameters) {
        return this.memoize.get({ key, parameters }, () => this.registerDisposer(this.base.getCredentialsProvider(key, parameters).addRef()));
    }
}
class CachingMapBasedCredentialsManager extends CachingCredentialsManager {
    constructor() {
        super(new MapBasedCredentialsManager());
    }
    register(key, providerGetter) {
        this.base.register(key, providerGetter);
    }
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/credentials_provider/shared_common.ts":
/*!**************************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/credentials_provider/shared_common.ts ***!
  \**************************************************************************************************************************/
/*! exports provided: CREDENTIALS_PROVIDER_RPC_ID, CREDENTIALS_PROVIDER_GET_RPC_ID */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CREDENTIALS_PROVIDER_RPC_ID", function() { return CREDENTIALS_PROVIDER_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CREDENTIALS_PROVIDER_GET_RPC_ID", function() { return CREDENTIALS_PROVIDER_GET_RPC_ID; });
/**
 * @license
 * Copyright 2017 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const CREDENTIALS_PROVIDER_RPC_ID = 'CredentialsProvider';
const CREDENTIALS_PROVIDER_GET_RPC_ID = 'CredentialsProvider.get';


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/credentials_provider/shared_counterpart.ts":
/*!*******************************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/credentials_provider/shared_counterpart.ts ***!
  \*******************************************************************************************************************************/
/*! exports provided: SharedCredentialsProviderCounterpart, WithSharedCredentialsProviderCounterpart */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharedCredentialsProviderCounterpart", function() { return SharedCredentialsProviderCounterpart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WithSharedCredentialsProviderCounterpart", function() { return WithSharedCredentialsProviderCounterpart; });
/* harmony import */ var neuroglancer_credentials_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/credentials_provider */ "../../../../../../neuroglancer/src/neuroglancer/credentials_provider/index.ts");
/* harmony import */ var neuroglancer_credentials_provider_shared_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/credentials_provider/shared_common */ "../../../../../../neuroglancer/src/neuroglancer/credentials_provider/shared_common.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/**
 * @license
 * Copyright 2017 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * @file Defines a CredentialsProvider that forwards requests to a SharedCredentialsProvider on
 * another thread.
 */



let SharedCredentialsProviderCounterpart = class SharedCredentialsProviderCounterpart extends neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_2__["SharedObjectCounterpart"] {
    constructor() {
        super(...arguments);
        this.get = Object(neuroglancer_credentials_provider__WEBPACK_IMPORTED_MODULE_0__["makeCachedCredentialsGetter"])((invalidCredentials, cancellationToken) => this.rpc.promiseInvoke(neuroglancer_credentials_provider_shared_common__WEBPACK_IMPORTED_MODULE_1__["CREDENTIALS_PROVIDER_GET_RPC_ID"], { providerId: this.rpcId, invalidCredentials: invalidCredentials }, cancellationToken));
    }
};
SharedCredentialsProviderCounterpart = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_2__["registerSharedObject"])(neuroglancer_credentials_provider_shared_common__WEBPACK_IMPORTED_MODULE_1__["CREDENTIALS_PROVIDER_RPC_ID"])
], SharedCredentialsProviderCounterpart);

function WithSharedCredentialsProviderCounterpart() {
    return function (Base) {
        return class extends Base {
            constructor(...args) {
                super(...args);
                const options = args[1];
                this.credentialsProvider =
                    this.rpc.getRef(options['credentialsProvider']);
            }
        };
    };
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/boss/api.ts":
/*!***********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/boss/api.ts ***!
  \***********************************************************************************************************/
/*! exports provided: credentialsKey, fetchWithBossCredentials */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "credentialsKey", function() { return credentialsKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fetchWithBossCredentials", function() { return fetchWithBossCredentials; });
/* harmony import */ var neuroglancer_credentials_provider_http_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/credentials_provider/http_request */ "../../../../../../neuroglancer/src/neuroglancer/credentials_provider/http_request.ts");
/* harmony import */ var neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/cancellation */ "../../../../../../neuroglancer/src/neuroglancer/util/cancellation.ts");
/**
 * @license
 * Copyright 2017 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Key used for retrieving the CredentialsProvider from a CredentialsManager.
 */
const credentialsKey = 'boss';
function fetchWithBossCredentials(credentialsProvider, input, init, transformResponse, cancellationToken = neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_1__["uncancelableToken"]) {
    return Object(neuroglancer_credentials_provider_http_request__WEBPACK_IMPORTED_MODULE_0__["fetchWithCredentials"])(credentialsProvider, input, init, transformResponse, credentials => {
        const headers = new Headers(init.headers);
        headers.set('Authorization', `Bearer ${credentials}`);
        return Object.assign({}, init, { headers });
    }, error => {
        const { status } = error;
        if (status === 403 || status === 401) {
            // Authorization needed.  Retry with refreshed token.
            return 'refresh';
        }
        if (status === 504) {
            // Gateway timeout can occur if the server takes too long to reply.  Retry.
            return 'retry';
        }
        throw error;
    }, cancellationToken);
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/boss/backend.ts":
/*!***************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/boss/backend.ts ***!
  \***************************************************************************************************************/
/*! exports provided: BossVolumeChunkSource, BossMeshSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BossVolumeChunkSource", function() { return BossVolumeChunkSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BossMeshSource", function() { return BossMeshSource; });
/* harmony import */ var neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/chunk_manager/backend */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/backend.ts");
/* harmony import */ var neuroglancer_credentials_provider_shared_counterpart__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/credentials_provider/shared_counterpart */ "../../../../../../neuroglancer/src/neuroglancer/credentials_provider/shared_counterpart.ts");
/* harmony import */ var neuroglancer_datasource_boss_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/datasource/boss/api */ "../../../../../../neuroglancer/src/neuroglancer/datasource/boss/api.ts");
/* harmony import */ var neuroglancer_datasource_boss_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/datasource/boss/base */ "../../../../../../neuroglancer/src/neuroglancer/datasource/boss/base.ts");
/* harmony import */ var neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! neuroglancer/mesh/backend */ "../../../../../../neuroglancer/src/neuroglancer/mesh/backend.ts");
/* harmony import */ var neuroglancer_sliceview_backend_chunk_decoders_bossNpz__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! neuroglancer/sliceview/backend_chunk_decoders/bossNpz */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/bossNpz.ts");
/* harmony import */ var neuroglancer_sliceview_backend_chunk_decoders_jpeg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! neuroglancer/sliceview/backend_chunk_decoders/jpeg */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/jpeg.ts");
/* harmony import */ var neuroglancer_sliceview_volume_backend__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! neuroglancer/sliceview/volume/backend */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/volume/backend.ts");
/* harmony import */ var neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! neuroglancer/util/endian */ "../../../../../../neuroglancer/src/neuroglancer/util/endian.ts");
/* harmony import */ var neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! neuroglancer/util/http_request */ "../../../../../../neuroglancer/src/neuroglancer/util/http_request.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/**
 * @license
 * Copyright 2017 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};











let chunkDecoders = new Map();
chunkDecoders.set('npz', neuroglancer_sliceview_backend_chunk_decoders_bossNpz__WEBPACK_IMPORTED_MODULE_5__["decodeBossNpzChunk"]);
chunkDecoders.set('jpeg', neuroglancer_sliceview_backend_chunk_decoders_jpeg__WEBPACK_IMPORTED_MODULE_6__["decodeJpegChunk"]);
let acceptHeaders = new Map();
acceptHeaders.set('npz', 'application/npygz');
acceptHeaders.set('jpeg', 'image/jpeg');
function BossSource(Base, parametersConstructor) {
    return Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["WithParameters"])(Object(neuroglancer_credentials_provider_shared_counterpart__WEBPACK_IMPORTED_MODULE_1__["WithSharedCredentialsProviderCounterpart"])()(Base), parametersConstructor);
}
let BossVolumeChunkSource = class BossVolumeChunkSource extends (BossSource(neuroglancer_sliceview_volume_backend__WEBPACK_IMPORTED_MODULE_7__["VolumeChunkSource"], neuroglancer_datasource_boss_base__WEBPACK_IMPORTED_MODULE_3__["VolumeChunkSourceParameters"])) {
    constructor() {
        super(...arguments);
        this.chunkDecoder = chunkDecoders.get(this.parameters.encoding);
    }
    async download(chunk, cancellationToken) {
        let { parameters } = this;
        let url = `${parameters.baseUrl}/latest/cutout/${parameters.collection}/${parameters.experiment}/${parameters.channel}/${parameters.resolution}`;
        {
            // chunkPosition must not be captured, since it will be invalidated by the next call to
            // computeChunkBounds.
            let chunkPosition = this.computeChunkBounds(chunk);
            let chunkDataSize = chunk.chunkDataSize;
            for (let i = 0; i < 3; ++i) {
                url += `/${chunkPosition[i]}:${chunkPosition[i] + chunkDataSize[i]}`;
            }
        }
        url += '/';
        if (parameters.window !== undefined) {
            url += `?window=${parameters.window[0]},${parameters.window[1]}`;
        }
        const response = await Object(neuroglancer_datasource_boss_api__WEBPACK_IMPORTED_MODULE_2__["fetchWithBossCredentials"])(this.credentialsProvider, url, { headers: { 'Accept': acceptHeaders.get(parameters.encoding) } }, neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_9__["responseArrayBuffer"], cancellationToken);
        await this.chunkDecoder(chunk, cancellationToken, response);
    }
};
BossVolumeChunkSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__["registerSharedObject"])()
], BossVolumeChunkSource);

function decodeManifestChunk(chunk, response) {
    return Object(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_4__["decodeJsonManifestChunk"])(chunk, response, 'fragments');
}
function decodeFragmentChunk(chunk, response) {
    let dv = new DataView(response);
    let numVertices = dv.getUint32(0, true);
    Object(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_4__["assignMeshFragmentData"])(chunk, Object(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_4__["decodeTriangleVertexPositionsAndIndices"])(response, neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_8__["Endianness"].LITTLE, /*vertexByteOffset=*/ 4, numVertices));
}
let BossMeshSource = class BossMeshSource extends (BossSource(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_4__["MeshSource"], neuroglancer_datasource_boss_base__WEBPACK_IMPORTED_MODULE_3__["MeshSourceParameters"])) {
    download(chunk, cancellationToken) {
        const { parameters } = this;
        return Object(neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_9__["cancellableFetchOk"])(`${parameters.baseUrl}${chunk.objectId}`, {}, neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_9__["responseArrayBuffer"], cancellationToken)
            .then(response => decodeManifestChunk(chunk, response));
    }
    downloadFragment(chunk, cancellationToken) {
        const { parameters } = this;
        return Object(neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_9__["cancellableFetchOk"])(`${parameters.baseUrl}${chunk.fragmentId}`, {}, neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_9__["responseArrayBuffer"], cancellationToken)
            .then(response => decodeFragmentChunk(chunk, response));
    }
};
BossMeshSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__["registerSharedObject"])()
], BossMeshSource);



/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/boss/base.ts":
/*!************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/boss/base.ts ***!
  \************************************************************************************************************/
/*! exports provided: BossSourceParameters, VolumeChunkSourceParameters, MeshSourceParameters */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BossSourceParameters", function() { return BossSourceParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VolumeChunkSourceParameters", function() { return VolumeChunkSourceParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshSourceParameters", function() { return MeshSourceParameters; });
/**
 * @license
 * Copyright 2017 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class BossSourceParameters {
}
class VolumeChunkSourceParameters extends BossSourceParameters {
    static stringify(parameters) {
        return `boss:volume:${parameters.baseUrl}/${parameters.collection}/${parameters.experiment}/${parameters.channel}/${parameters.resolution}/${parameters.encoding}`;
    }
}
VolumeChunkSourceParameters.RPC_ID = 'boss/VolumeChunkSource';
class MeshSourceParameters {
    static stringify(parameters) {
        return `boss:mesh:${parameters.baseUrl}`;
    }
}
MeshSourceParameters.RPC_ID = 'boss/MeshChunkSource';


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/brainmaps/api.ts":
/*!****************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/brainmaps/api.ts ***!
  \****************************************************************************************************************/
/*! exports provided: credentialsKey, makeRequest */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "credentialsKey", function() { return credentialsKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeRequest", function() { return makeRequest; });
/* harmony import */ var neuroglancer_credentials_provider_http_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/credentials_provider/http_request */ "../../../../../../neuroglancer/src/neuroglancer/credentials_provider/http_request.ts");
/* harmony import */ var neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/cancellation */ "../../../../../../neuroglancer/src/neuroglancer/util/cancellation.ts");
/* harmony import */ var neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/util/http_request */ "../../../../../../neuroglancer/src/neuroglancer/util/http_request.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * Key used for retrieving the CredentialsProvider from a CredentialsManager.
 */
const credentialsKey = 'google-brainmaps';
function makeRequest(instance, credentialsProvider, httpCall, cancellationToken = neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_1__["uncancelableToken"]) {
    return Object(neuroglancer_credentials_provider_http_request__WEBPACK_IMPORTED_MODULE_0__["fetchWithCredentials"])(credentialsProvider, `${instance.serverUrl}${httpCall.path}`, { method: httpCall.method, body: httpCall.payload }, httpCall.responseType === 'json' ? neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_2__["responseJson"] : neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_2__["responseArrayBuffer"], (credentials, init) => {
        const headers = new Headers(init.headers);
        headers.set('Authorization', `${credentials.tokenType} ${credentials.accessToken}`);
        return Object.assign({}, init, { headers });
    }, error => {
        const { status } = error;
        if (status === 401) {
            // 401: Authorization needed.  OAuth2 token may have expired.
            return 'refresh';
        }
        else if (status === 504 || status === 503) {
            // 503: Service unavailable.  Retry.
            // 504: Gateway timeout.  Can occur if the server takes too long to reply.  Retry.
            return 'retry';
        }
        throw error;
    }, cancellationToken);
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/brainmaps/backend.ts":
/*!********************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/brainmaps/backend.ts ***!
  \********************************************************************************************************************/
/*! exports provided: BrainmapsVolumeChunkSource, BrainmapsMultiscaleMeshSource, BrainmapsMeshSource, BrainmapsSkeletonSource, BrainmapsAnnotationSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrainmapsVolumeChunkSource", function() { return BrainmapsVolumeChunkSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrainmapsMultiscaleMeshSource", function() { return BrainmapsMultiscaleMeshSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrainmapsMeshSource", function() { return BrainmapsMeshSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrainmapsSkeletonSource", function() { return BrainmapsSkeletonSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrainmapsAnnotationSource", function() { return BrainmapsAnnotationSource; });
/* harmony import */ var neuroglancer_annotation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/annotation */ "../../../../../../neuroglancer/src/neuroglancer/annotation/index.ts");
/* harmony import */ var neuroglancer_annotation_backend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/annotation/backend */ "../../../../../../neuroglancer/src/neuroglancer/annotation/backend.ts");
/* harmony import */ var neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/chunk_manager/backend */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/backend.ts");
/* harmony import */ var neuroglancer_credentials_provider_shared_counterpart__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/credentials_provider/shared_counterpart */ "../../../../../../neuroglancer/src/neuroglancer/credentials_provider/shared_counterpart.ts");
/* harmony import */ var neuroglancer_datasource_brainmaps_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! neuroglancer/datasource/brainmaps/api */ "../../../../../../neuroglancer/src/neuroglancer/datasource/brainmaps/api.ts");
/* harmony import */ var neuroglancer_datasource_brainmaps_base__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! neuroglancer/datasource/brainmaps/base */ "../../../../../../neuroglancer/src/neuroglancer/datasource/brainmaps/base.ts");
/* harmony import */ var neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! neuroglancer/mesh/backend */ "../../../../../../neuroglancer/src/neuroglancer/mesh/backend.ts");
/* harmony import */ var neuroglancer_mesh_base__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! neuroglancer/mesh/base */ "../../../../../../neuroglancer/src/neuroglancer/mesh/base.ts");
/* harmony import */ var neuroglancer_skeleton_backend__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! neuroglancer/skeleton/backend */ "../../../../../../neuroglancer/src/neuroglancer/skeleton/backend.ts");
/* harmony import */ var neuroglancer_sliceview_backend_chunk_decoders_compressed_segmentation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! neuroglancer/sliceview/backend_chunk_decoders/compressed_segmentation */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/compressed_segmentation.ts");
/* harmony import */ var neuroglancer_sliceview_backend_chunk_decoders_jpeg__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! neuroglancer/sliceview/backend_chunk_decoders/jpeg */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/jpeg.ts");
/* harmony import */ var neuroglancer_sliceview_backend_chunk_decoders_raw__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! neuroglancer/sliceview/backend_chunk_decoders/raw */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/raw.ts");
/* harmony import */ var neuroglancer_sliceview_volume_backend__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! neuroglancer/sliceview/volume/backend */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/volume/backend.ts");
/* harmony import */ var neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! neuroglancer/util/endian */ "../../../../../../neuroglancer/src/neuroglancer/util/endian.ts");
/* harmony import */ var neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! neuroglancer/util/geom */ "../../../../../../neuroglancer/src/neuroglancer/util/geom.ts");
/* harmony import */ var neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! neuroglancer/util/json */ "../../../../../../neuroglancer/src/neuroglancer/util/json.ts");
/* harmony import */ var neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! neuroglancer/util/uint64 */ "../../../../../../neuroglancer/src/neuroglancer/util/uint64.ts");
/* harmony import */ var neuroglancer_util_zorder__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! neuroglancer/util/zorder */ "../../../../../../neuroglancer/src/neuroglancer/util/zorder.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



















const CHUNK_DECODERS = new Map([
    [
        neuroglancer_datasource_brainmaps_base__WEBPACK_IMPORTED_MODULE_5__["VolumeChunkEncoding"].RAW,
        neuroglancer_sliceview_backend_chunk_decoders_raw__WEBPACK_IMPORTED_MODULE_11__["decodeRawChunk"],
    ],
    [neuroglancer_datasource_brainmaps_base__WEBPACK_IMPORTED_MODULE_5__["VolumeChunkEncoding"].JPEG, neuroglancer_sliceview_backend_chunk_decoders_jpeg__WEBPACK_IMPORTED_MODULE_10__["decodeJpegChunk"]],
    [
        neuroglancer_datasource_brainmaps_base__WEBPACK_IMPORTED_MODULE_5__["VolumeChunkEncoding"].COMPRESSED_SEGMENTATION,
        neuroglancer_sliceview_backend_chunk_decoders_compressed_segmentation__WEBPACK_IMPORTED_MODULE_9__["decodeCompressedSegmentationChunk"],
    ]
]);
function applyChangeStack(changeStack, payload) {
    if (!changeStack) {
        return;
    }
    payload.change_spec = {
        change_stack_id: changeStack.changeStackId,
    };
    if (changeStack.timeStamp) {
        payload.change_spec.time_stamp = changeStack.timeStamp;
    }
    if (changeStack.skipEquivalences) {
        payload.change_spec.skip_equivalences = changeStack.skipEquivalences;
    }
}
function BrainmapsSource(Base, parametersConstructor) {
    return Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_2__["WithParameters"])(Object(neuroglancer_credentials_provider_shared_counterpart__WEBPACK_IMPORTED_MODULE_3__["WithSharedCredentialsProviderCounterpart"])()(Base), parametersConstructor);
}
const tempUint64 = new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_16__["Uint64"]();
let BrainmapsVolumeChunkSource = class BrainmapsVolumeChunkSource extends (BrainmapsSource(neuroglancer_sliceview_volume_backend__WEBPACK_IMPORTED_MODULE_12__["VolumeChunkSource"], neuroglancer_datasource_brainmaps_base__WEBPACK_IMPORTED_MODULE_5__["VolumeSourceParameters"])) {
    constructor() {
        super(...arguments);
        this.chunkDecoder = CHUNK_DECODERS.get(this.parameters.encoding);
    }
    applyEncodingParams(payload) {
        let { encoding } = this.parameters;
        switch (encoding) {
            case neuroglancer_datasource_brainmaps_base__WEBPACK_IMPORTED_MODULE_5__["VolumeChunkEncoding"].RAW:
                payload.subvolume_format = 'RAW';
                break;
            case neuroglancer_datasource_brainmaps_base__WEBPACK_IMPORTED_MODULE_5__["VolumeChunkEncoding"].JPEG:
                payload.subvolume_format = 'SINGLE_IMAGE';
                payload.image_format_options = {
                    image_format: 'JPEG',
                    jpeg_quality: 70,
                };
                return;
            case neuroglancer_datasource_brainmaps_base__WEBPACK_IMPORTED_MODULE_5__["VolumeChunkEncoding"].COMPRESSED_SEGMENTATION:
                payload.subvolume_format = 'RAW';
                payload.image_format_options = {
                    compressed_segmentation_block_size: Object(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3Key"])(this.spec.compressedSegmentationBlockSize),
                };
                break;
            default:
                throw new Error(`Invalid encoding: ${encoding}`);
        }
    }
    async download(chunk, cancellationToken) {
        let { parameters } = this;
        let path;
        // chunkPosition must not be captured, since it will be invalidated by the next call to
        // computeChunkBounds.
        let chunkPosition = this.computeChunkBounds(chunk);
        let chunkDataSize = chunk.chunkDataSize;
        path = `/v1/volumes/${parameters['volumeId']}/subvolume:binary`;
        let payload = {
            geometry: {
                corner: Object(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3Key"])(chunkPosition),
                size: Object(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3Key"])(chunkDataSize),
                scale: parameters.scaleIndex,
            },
        };
        this.applyEncodingParams(payload);
        applyChangeStack(parameters.changeSpec, payload);
        const response = await Object(neuroglancer_datasource_brainmaps_api__WEBPACK_IMPORTED_MODULE_4__["makeRequest"])(parameters['instance'], this.credentialsProvider, {
            method: 'POST',
            payload: JSON.stringify(payload),
            path,
            responseType: 'arraybuffer',
        }, cancellationToken);
        await this.chunkDecoder(chunk, cancellationToken, response);
    }
};
BrainmapsVolumeChunkSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_18__["registerSharedObject"])()
], BrainmapsVolumeChunkSource);

function getFragmentCorner(fragmentId, xBits, yBits, zBits) {
    const id = new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_16__["Uint64"]();
    if (!id.tryParseString(fragmentId, 16)) {
        throw new Error(`Couldn't parse fragmentId ${fragmentId} as hex-encoded Uint64`);
    }
    return Object(neuroglancer_util_zorder__WEBPACK_IMPORTED_MODULE_17__["decodeZIndexCompressed"])(id, xBits, yBits, zBits);
}
function decodeMultiscaleManifestChunk(chunk, response) {
    Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyObject"])(response);
    const source = chunk.source;
    const fragmentKeys = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyObjectProperty"])(response, 'fragmentKey', neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyStringArray"]);
    const supervoxelIds = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyObjectProperty"])(response, 'supervoxelId', neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyStringArray"]);
    const length = fragmentKeys.length;
    if (length !== supervoxelIds.length) {
        throw new Error('Expected fragmentKey and supervoxelId arrays to have the same length.');
    }
    const fragmentSupervoxelIds = new Map();
    fragmentKeys.forEach((fragmentId, i) => {
        let ids = fragmentSupervoxelIds.get(fragmentId);
        if (ids === undefined) {
            ids = [];
            fragmentSupervoxelIds.set(fragmentId, ids);
        }
        ids.push(supervoxelIds[i]);
    });
    const { chunkShape } = source.parameters.info;
    const gridShape = source.parameters.info.lods[0].gridShape;
    const xBits = Math.ceil(Math.log2(gridShape[0])), yBits = Math.ceil(Math.log2(gridShape[1])), zBits = Math.ceil(Math.log2(gridShape[2]));
    const fragmentIdAndCorners = Array.from(fragmentSupervoxelIds.entries()).map(([id, supervoxelIds]) => ({
        fragmentId: id,
        corner: getFragmentCorner(id, xBits, yBits, zBits),
        supervoxelIds
    }));
    fragmentIdAndCorners.sort((a, b) => {
        return Object(neuroglancer_util_zorder__WEBPACK_IMPORTED_MODULE_17__["zorder3LessThan"])(a.corner[0], a.corner[1], a.corner[2], b.corner[0], b.corner[1], b.corner[2]) ?
            -1 :
            1;
    });
    let clipLowerBound, clipUpperBound;
    let minNumLods = 0;
    let octree;
    if (length === 0) {
        clipLowerBound = clipUpperBound = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["kZeroVec"];
        octree = Uint32Array.of(0, 0, 0, 0, 0x80000000);
    }
    else {
        const minCoord = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].clone(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["kInfinityVec"]);
        const maxCoord = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].clone(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["kZeroVec"]);
        fragmentIdAndCorners.forEach(x => {
            const { corner } = x;
            for (let i = 0; i < 3; ++i) {
                minCoord[i] = Math.min(minCoord[i], corner[i]);
                maxCoord[i] = Math.max(maxCoord[i], corner[i]);
            }
        });
        minNumLods = 1;
        while ((maxCoord[0] >>> (minNumLods - 1)) != (minCoord[0] >>> (minNumLods - 1)) ||
            (maxCoord[1] >>> (minNumLods - 1)) != (minCoord[1] >>> (minNumLods - 1)) ||
            (maxCoord[2] >>> (minNumLods - 1)) != (minCoord[2] >>> (minNumLods - 1))) {
            ++minNumLods;
        }
        clipLowerBound = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].multiply(minCoord, minCoord, chunkShape);
        clipUpperBound = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].add(maxCoord, neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].multiply(maxCoord, maxCoord, chunkShape), chunkShape);
    }
    const { lods } = source.parameters.info;
    const lodScales = new Float32Array(Math.max(lods.length, minNumLods));
    for (let lodIndex = 0; lodIndex < lods.length; ++lodIndex) {
        lodScales[lodIndex] = lods[lodIndex].scale;
    }
    if (length !== 0) {
        const octreeTemp = new Uint32Array(fragmentIdAndCorners.length * lodScales.length * 5);
        fragmentIdAndCorners.forEach((x, i) => {
            octreeTemp.set(x.corner, i * 5);
            octreeTemp[i * 5] = x.corner[0];
        });
        let priorStart = 0;
        let priorEnd = fragmentIdAndCorners.length;
        for (let lod = 1; lod < lodScales.length; ++lod) {
            const curEnd = Object(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_6__["generateHigherOctreeLevel"])(octreeTemp, priorStart, priorEnd);
            priorStart = priorEnd;
            priorEnd = curEnd;
        }
        octree = octreeTemp.slice(0, priorEnd * 5);
    }
    const manifest = {
        chunkShape,
        chunkGridSpatialOrigin: neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["kZeroVec"],
        clipLowerBound,
        clipUpperBound,
        octree: octree,
        lodScales: lodScales,
        vertexOffsets: new Float32Array(lodScales.length * 3),
    };
    chunk.manifest = manifest;
    chunk.fragmentSupervoxelIds = fragmentIdAndCorners;
}
const maxMeshBatchSize = 100;
function decodeBatchMeshResponse(response, callback) {
    let length = response.byteLength;
    let index = 0;
    const dataView = new DataView(response);
    const headerSize = 
    /*object id*/ 8 + /*fragment key length*/ 8 + /*num vertices*/ 8 + /*num triangles*/ 8;
    while (index < length) {
        if (index + headerSize > length) {
            throw new Error(`Invalid batch mesh fragment response.`);
        }
        const objectIdLow = dataView.getUint32(index, /*littleEndian=*/ true);
        const objectIdHigh = dataView.getUint32(index + 4, /*littleEndian=*/ true);
        const objectIdString = new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_16__["Uint64"](objectIdLow, objectIdHigh).toString();
        const prefix = objectIdString + '\0';
        index += 8;
        const fragmentKeyLength = dataView.getUint32(index, /*littleEndian=*/ true);
        const fragmentKeyLengthHigh = dataView.getUint32(index + 4, /*littleEndian=*/ true);
        index += 8;
        if (fragmentKeyLengthHigh !== 0) {
            throw new Error(`Invalid batch mesh fragment response.`);
        }
        if (index + fragmentKeyLength + /* num vertices */ 8 + /*num indices*/ 8 > length) {
            throw new Error(`Invalid batch mesh fragment response.`);
        }
        const fragmentKey = new TextDecoder().decode(new Uint8Array(response, index, fragmentKeyLength));
        const fullKey = prefix + fragmentKey;
        index += fragmentKeyLength;
        const numVertices = dataView.getUint32(index, /*littleEndian=*/ true);
        const numVerticesHigh = dataView.getUint32(index + 4, /*littleEndian=*/ true);
        index += 8;
        const numTriangles = dataView.getUint32(index, /*littleEndian=*/ true);
        const numTrianglesHigh = dataView.getUint32(index + 4, /*littleEndian=*/ true);
        index += 8;
        if (numVerticesHigh !== 0 || numTrianglesHigh !== 0) {
            throw new Error(`Invalid batch mesh fragment response.`);
        }
        const endOffset = index + numTriangles * 12 + numVertices * 12;
        if (endOffset > length) {
            throw new Error(`Invalid batch mesh fragment response.`);
        }
        callback({
            fullKey,
            buffer: response,
            verticesOffset: index,
            numVertices,
            indicesOffset: index + 12 * numVertices,
            numIndices: numTriangles * 3,
        });
        index = endOffset;
    }
}
function combineBatchMeshFragments(fragments) {
    let totalVertices = 0, totalIndices = 0;
    for (let fragment of fragments) {
        totalVertices += fragment.numVertices;
        totalIndices += fragment.numIndices;
    }
    const vertexBuffer = new Float32Array(totalVertices * 3);
    const indexBuffer = new Uint32Array(totalIndices);
    let vertexOffset = 0;
    let indexOffset = 0;
    for (const fragment of fragments) {
        vertexBuffer.set(new Float32Array(fragment.buffer, fragment.verticesOffset, fragment.numVertices * 3), vertexOffset * 3);
        const { numIndices } = fragment;
        const sourceIndices = new Uint32Array(fragment.buffer, fragment.indicesOffset, numIndices);
        Object(neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_13__["convertEndian32"])(sourceIndices, neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_13__["Endianness"].LITTLE);
        for (let i = 0; i < numIndices; ++i) {
            indexBuffer[indexOffset++] = sourceIndices[i] + vertexOffset;
        }
        vertexOffset += fragment.numVertices;
    }
    Object(neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_13__["convertEndian32"])(vertexBuffer, neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_13__["Endianness"].LITTLE);
    return { vertexPositions: vertexBuffer, indices: indexBuffer };
}
function makeBatchMeshRequest(credentialsProvider, parameters, ids, cancellationToken) {
    const path = `/v1/objects/meshes:batch`;
    const batches = [];
    let prevObjectId;
    let batchSize = 0;
    for (const id of ids) {
        const splitIndex = id.indexOf('\0');
        const objectId = id.substring(0, splitIndex);
        const fragmentId = id.substring(splitIndex + 1);
        if (objectId !== prevObjectId) {
            batches.push({ object_id: objectId, fragment_keys: [] });
        }
        batches[batches.length - 1].fragment_keys.push(fragmentId);
        if (++batchSize === maxMeshBatchSize)
            break;
    }
    const payload = {
        volume_id: parameters.volumeId,
        mesh_name: parameters.meshName,
        batches: batches,
    };
    return Object(neuroglancer_datasource_brainmaps_api__WEBPACK_IMPORTED_MODULE_4__["makeRequest"])(parameters['instance'], credentialsProvider, {
        method: 'POST',
        path,
        payload: JSON.stringify(payload),
        responseType: 'arraybuffer',
    }, cancellationToken);
}
let BrainmapsMultiscaleMeshSource = class BrainmapsMultiscaleMeshSource extends (BrainmapsSource(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_6__["MultiscaleMeshSource"], neuroglancer_datasource_brainmaps_base__WEBPACK_IMPORTED_MODULE_5__["MultiscaleMeshSourceParameters"])) {
    constructor() {
        super(...arguments);
        this.listFragmentsParams = (() => {
            const { parameters } = this;
            const { changeSpec } = parameters;
            if (changeSpec !== undefined) {
                return `&header.changeStackId=${changeSpec.changeStackId}`;
            }
            return '';
        })();
    }
    download(chunk, cancellationToken) {
        let { parameters } = this;
        const path = `/v1/objects/${parameters['volumeId']}/meshes/` +
            `${parameters.info.lods[0].info.name}:listfragments?` +
            `object_id=${chunk.objectId}&return_supervoxel_ids=true` + this.listFragmentsParams;
        return Object(neuroglancer_datasource_brainmaps_api__WEBPACK_IMPORTED_MODULE_4__["makeRequest"])(parameters['instance'], this.credentialsProvider, {
            method: 'GET',
            path,
            responseType: 'json',
        }, cancellationToken)
            .then(response => decodeMultiscaleManifestChunk(chunk, response));
    }
    downloadFragment(chunk, cancellationToken) {
        const { parameters } = this;
        const manifestChunk = chunk.manifestChunk;
        const { fragmentSupervoxelIds } = manifestChunk;
        const manifest = manifestChunk.manifest;
        const { lod } = chunk;
        const { octree } = manifest;
        const numBaseChunks = fragmentSupervoxelIds.length;
        const row = chunk.chunkIndex;
        let startChunkIndex = row;
        while (startChunkIndex >= numBaseChunks) {
            startChunkIndex = octree[startChunkIndex * 5 + 3];
        }
        let endChunkIndex = row + 1;
        while (endChunkIndex > numBaseChunks) {
            endChunkIndex = octree[endChunkIndex * 5 - 1] & 0x7FFFFFFF;
        }
        const { relativeBlockShape, gridShape } = parameters.info.lods[lod];
        const xBits = Math.ceil(Math.log2(gridShape[0])), yBits = Math.ceil(Math.log2(gridShape[1])), zBits = Math.ceil(Math.log2(gridShape[2]));
        let ids = new Map();
        for (let chunkIndex = startChunkIndex; chunkIndex < endChunkIndex; ++chunkIndex) {
            // Determine number of x, y, and z bits to skip.
            const gridX = Math.floor(octree[chunkIndex * 5] / relativeBlockShape[0]), gridY = Math.floor(octree[chunkIndex * 5 + 1] / relativeBlockShape[1]), gridZ = Math.floor(octree[chunkIndex * 5 + 2] / relativeBlockShape[2]);
            const fragmentKey = Object(neuroglancer_util_zorder__WEBPACK_IMPORTED_MODULE_17__["encodeZIndexCompressed"])(tempUint64, xBits, yBits, zBits, gridX, gridY, gridZ)
                .toString(16)
                .padStart(16, '0');
            const entry = fragmentSupervoxelIds[chunkIndex];
            for (const supervoxelId of entry.supervoxelIds) {
                ids.set(supervoxelId + '\0' + fragmentKey, chunkIndex);
            }
        }
        let prevLod = Math.max(0, lod - 1);
        let fragments = [];
        const idArray = Array.from(ids);
        idArray.sort((a, b) => a[0].localeCompare(b[0]));
        ids = new Map(idArray);
        function copyMeshData() {
            fragments.sort((a, b) => a.chunkIndex - b.chunkIndex);
            let indexOffset = 0;
            const numSubChunks = 1 << (3 * (lod - prevLod));
            const subChunkOffsets = new Uint32Array(numSubChunks + 1);
            let prevSubChunkIndex = 0;
            for (const fragment of fragments) {
                const row = fragment.chunkIndex;
                const subChunkIndex = Object(neuroglancer_util_zorder__WEBPACK_IMPORTED_MODULE_17__["getOctreeChildIndex"])(octree[row * 5] >>> prevLod, octree[row * 5 + 1] >>> prevLod, octree[row * 5 + 2] >>> prevLod) &
                    (numSubChunks - 1);
                subChunkOffsets.fill(indexOffset, prevSubChunkIndex + 1, subChunkIndex + 1);
                prevSubChunkIndex = subChunkIndex;
                indexOffset += fragment.numIndices;
            }
            subChunkOffsets.fill(indexOffset, prevSubChunkIndex + 1, numSubChunks + 1);
            Object(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_6__["assignMultiscaleMeshFragmentData"])(chunk, Object.assign({}, combineBatchMeshFragments(fragments), { subChunkOffsets }), neuroglancer_mesh_base__WEBPACK_IMPORTED_MODULE_7__["VertexPositionFormat"].float32);
        }
        function decodeResponse(response) {
            decodeBatchMeshResponse(response, (fragment) => {
                const chunkIndex = ids.get(fragment.fullKey);
                if (!ids.delete(fragment.fullKey)) {
                    throw new Error(`Received unexpected fragment key: ${JSON.stringify(fragment.fullKey)}.`);
                }
                fragment.chunkIndex = chunkIndex;
                fragments.push(fragment);
            });
            if (ids.size !== 0) {
                // Partial response received.
                return makeBatchRequest();
            }
            copyMeshData();
        }
        const { credentialsProvider } = this;
        const meshName = parameters.info.lods[lod].info.name;
        function makeBatchRequest() {
            return makeBatchMeshRequest(credentialsProvider, { instance: parameters.instance, volumeId: parameters.volumeId, meshName }, ids.keys(), cancellationToken)
                .then(decodeResponse);
        }
        return makeBatchRequest();
    }
};
BrainmapsMultiscaleMeshSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_18__["registerSharedObject"])()
], BrainmapsMultiscaleMeshSource);

function groupFragmentsIntoBatches(ids) {
    const batches = [];
    let index = 0;
    const length = ids.length;
    while (index < length) {
        batches.push(JSON.stringify(ids.slice(index, index + maxMeshBatchSize)));
        index += maxMeshBatchSize;
    }
    return batches;
}
function decodeManifestChunkWithSupervoxelIds(chunk, response) {
    Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyObject"])(response);
    const fragmentKeys = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyObjectProperty"])(response, 'fragmentKey', neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyStringArray"]);
    const supervoxelIds = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyObjectProperty"])(response, 'supervoxelId', neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyStringArray"]);
    const length = fragmentKeys.length;
    if (length !== supervoxelIds.length) {
        throw new Error('Expected fragmentKey and supervoxelId arrays to have the same length.');
    }
    let fragmentIds = supervoxelIds.map((supervoxelId, index) => supervoxelId + '\0' + fragmentKeys[index]);
    chunk.fragmentIds = groupFragmentsIntoBatches(fragmentIds);
}
let BrainmapsMeshSource = class BrainmapsMeshSource extends (BrainmapsSource(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_6__["MeshSource"], neuroglancer_datasource_brainmaps_base__WEBPACK_IMPORTED_MODULE_5__["MeshSourceParameters"])) {
    constructor() {
        super(...arguments);
        this.listFragmentsParams = (() => {
            const { parameters } = this;
            const { changeSpec } = parameters;
            if (changeSpec !== undefined) {
                return `&header.changeStackId=${changeSpec.changeStackId}`;
            }
            return '';
        })();
    }
    download(chunk, cancellationToken) {
        let { parameters } = this;
        const path = `/v1/objects/${parameters['volumeId']}/meshes/` +
            `${parameters['meshName']}:listfragments?` +
            `object_id=${chunk.objectId}&return_supervoxel_ids=true` + this.listFragmentsParams;
        return Object(neuroglancer_datasource_brainmaps_api__WEBPACK_IMPORTED_MODULE_4__["makeRequest"])(parameters['instance'], this.credentialsProvider, {
            method: 'GET',
            path,
            responseType: 'json',
        }, cancellationToken)
            .then(response => decodeManifestChunkWithSupervoxelIds(chunk, response));
    }
    downloadFragment(chunk, cancellationToken) {
        let { parameters } = this;
        const ids = new Set(JSON.parse(chunk.fragmentId));
        let fragments = [];
        function copyMeshData() {
            Object(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_6__["assignMeshFragmentData"])(chunk, combineBatchMeshFragments(fragments));
        }
        function decodeResponse(response) {
            decodeBatchMeshResponse(response, fragment => {
                if (!ids.delete(fragment.fullKey)) {
                    throw new Error(`Received unexpected fragment key: ${JSON.stringify(fragment.fullKey)}.`);
                }
                fragments.push(fragment);
            });
            if (ids.size !== 0) {
                // Partial response received.
                return makeBatchRequest();
            }
            copyMeshData();
        }
        const { credentialsProvider } = this;
        function makeBatchRequest() {
            return makeBatchMeshRequest(credentialsProvider, parameters, ids, cancellationToken)
                .then(decodeResponse);
        }
        return makeBatchRequest();
    }
};
BrainmapsMeshSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_18__["registerSharedObject"])()
], BrainmapsMeshSource);

function decodeSkeletonChunk(chunk, response) {
    let dv = new DataView(response);
    let numVertices = dv.getUint32(0, true);
    let numVerticesHigh = dv.getUint32(4, true);
    if (numVerticesHigh !== 0) {
        throw new Error(`The number of vertices should not exceed 2^32-1.`);
    }
    let numEdges = dv.getUint32(8, true);
    let numEdgesHigh = dv.getUint32(12, true);
    if (numEdgesHigh !== 0) {
        throw new Error(`The number of edges should not exceed 2^32-1.`);
    }
    Object(neuroglancer_skeleton_backend__WEBPACK_IMPORTED_MODULE_8__["decodeSkeletonVertexPositionsAndIndices"])(chunk, response, neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_13__["Endianness"].LITTLE, /*vertexByteOffset=*/ 16, numVertices, 
    /*indexByteOffset=*/ undefined, /*numEdges=*/ numEdges);
}
let BrainmapsSkeletonSource = class BrainmapsSkeletonSource extends (BrainmapsSource(neuroglancer_skeleton_backend__WEBPACK_IMPORTED_MODULE_8__["SkeletonSource"], neuroglancer_datasource_brainmaps_base__WEBPACK_IMPORTED_MODULE_5__["SkeletonSourceParameters"])) {
    download(chunk, cancellationToken) {
        const { parameters } = this;
        let payload = {
            object_id: `${chunk.objectId}`,
        };
        const path = `/v1/objects/${parameters['volumeId']}` +
            `/meshes/${parameters.meshName}` +
            '/skeleton:binary';
        applyChangeStack(parameters.changeSpec, payload);
        return Object(neuroglancer_datasource_brainmaps_api__WEBPACK_IMPORTED_MODULE_4__["makeRequest"])(parameters['instance'], this.credentialsProvider, {
            method: 'POST',
            path,
            payload: JSON.stringify(payload),
            responseType: 'arraybuffer',
        }, cancellationToken)
            .then(response => decodeSkeletonChunk(chunk, response));
    }
};
BrainmapsSkeletonSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_18__["registerSharedObject"])()
], BrainmapsSkeletonSource);

const spatialAnnotationTypes = ['LOCATION', 'LINE', 'VOLUME'];
function parseCommaSeparatedPoint(x) {
    const pattern = /(-?[0-9]+),(-?[0-9]+),(-?[0-9]+)/;
    const cornerParts = x.match(pattern);
    if (cornerParts === null) {
        throw new Error(`Error parsing number triplet: ${JSON.stringify(x)}.`);
    }
    return neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].fromValues(parseFloat(cornerParts[1]), parseFloat(cornerParts[2]), parseFloat(cornerParts[3]));
}
function getIdPrefix(parameters) {
    return parameters.volumeId + ':' + parameters.changestack + ':';
}
function parseBrainmapsAnnotationId(idPrefix, fullId) {
    if (!fullId.startsWith(idPrefix)) {
        throw new Error(`Received annotation id ${JSON.stringify(fullId)} does not have expected prefix of ${JSON.stringify(idPrefix)}.`);
    }
    const id = fullId.substring(idPrefix.length);
    return id;
}
function parseObjectLabels(obj) {
    if (obj == null) {
        return undefined;
    }
    return Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["parseArray"])(obj, x => neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_16__["Uint64"].parseString('' + x, 10));
}
function parseAnnotation(entry, idPrefix, expectedId) {
    const corner = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyObjectProperty"])(entry, 'corner', x => parseCommaSeparatedPoint(Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyString"])(x)));
    const size = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyObjectProperty"])(entry, 'size', x => parseCommaSeparatedPoint(Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyString"])(x)));
    const description = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyObjectProperty"])(entry, 'payload', neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyOptionalString"]);
    const spatialAnnotationType = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyObjectProperty"])(entry, 'type', neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyString"]);
    const fullId = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyObjectProperty"])(entry, 'id', neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyString"]);
    const id = parseBrainmapsAnnotationId(idPrefix, fullId);
    const segments = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyObjectProperty"])(entry, 'objectLabels', parseObjectLabels);
    if (expectedId !== undefined && id !== expectedId) {
        throw new Error(`Received annotation has unexpected id ${JSON.stringify(fullId)}.`);
    }
    switch (spatialAnnotationType) {
        case 'LOCATION':
            if (neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].equals(size, neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["kZeroVec"])) {
                return {
                    type: neuroglancer_annotation__WEBPACK_IMPORTED_MODULE_0__["AnnotationType"].POINT,
                    id,
                    point: corner,
                    description,
                    segments,
                };
            }
            else {
                const radii = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].scale(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].create(), size, 0.5);
                const center = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].add(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].create(), corner, radii);
                return {
                    type: neuroglancer_annotation__WEBPACK_IMPORTED_MODULE_0__["AnnotationType"].ELLIPSOID,
                    id,
                    center,
                    radii,
                    description,
                    segments,
                };
            }
        case 'LINE':
            return {
                type: neuroglancer_annotation__WEBPACK_IMPORTED_MODULE_0__["AnnotationType"].LINE,
                id,
                pointA: corner,
                pointB: neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].add(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].create(), corner, size),
                description,
                segments,
            };
        case 'VOLUME':
            return {
                type: neuroglancer_annotation__WEBPACK_IMPORTED_MODULE_0__["AnnotationType"].AXIS_ALIGNED_BOUNDING_BOX,
                id,
                pointA: corner,
                pointB: neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].add(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].create(), corner, size),
                description,
                segments,
            };
        default:
            throw new Error(`Unknown spatial annotation type: ${JSON.stringify(spatialAnnotationType)}.`);
    }
}
function parseAnnotationResponse(response, idPrefix, expectedId) {
    Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyObject"])(response);
    const entry = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyObjectProperty"])(response, 'annotations', x => Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["parseFixedLengthArray"])([undefined], x, neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyObject"]))[0];
    return parseAnnotation(entry, idPrefix, expectedId);
}
function parseAnnotations(chunk, responses) {
    const serializer = new neuroglancer_annotation__WEBPACK_IMPORTED_MODULE_0__["AnnotationSerializer"]();
    const source = chunk.source.parent;
    const idPrefix = getIdPrefix(source.parameters);
    responses.forEach((response, responseIndex) => {
        try {
            Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyObject"])(response);
            const annotationsArray = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyObjectProperty"])(response, 'annotations', x => x === undefined ? [] : x);
            if (!Array.isArray(annotationsArray)) {
                throw new Error(`Expected array, but received ${JSON.stringify(typeof annotationsArray)}.`);
            }
            for (const entry of annotationsArray) {
                try {
                    serializer.add(parseAnnotation(entry, idPrefix));
                }
                catch (e) {
                    throw new Error(`Error parsing annotation: ${e.message}`);
                }
            }
        }
        catch (parseError) {
            throw new Error(`Error parsing ${spatialAnnotationTypes[responseIndex]} annotations: ${parseError.message}`);
        }
    });
    chunk.data = Object.assign(new neuroglancer_annotation_backend__WEBPACK_IMPORTED_MODULE_1__["AnnotationGeometryData"](), serializer.serialize());
}
function getSpatialAnnotationTypeFromId(id) {
    const index = id.indexOf('.');
    return id.substring(0, index);
}
function toCommaSeparated(v) {
    return `${Math.round(v[0])},${Math.round(v[1])},${Math.round(v[2])}`;
}
function getFullSpatialAnnotationId(parameters, id) {
    return `${parameters.volumeId}:${parameters.changestack}:${id}`;
}
function annotationToBrainmaps(annotation) {
    const payload = annotation.description || '';
    const objectLabels = annotation.segments === undefined ? undefined : annotation.segments.map(x => x.toString());
    switch (annotation.type) {
        case neuroglancer_annotation__WEBPACK_IMPORTED_MODULE_0__["AnnotationType"].LINE:
        case neuroglancer_annotation__WEBPACK_IMPORTED_MODULE_0__["AnnotationType"].AXIS_ALIGNED_BOUNDING_BOX: {
            const { pointA, pointB } = annotation;
            const minPoint = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].min(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].create(), pointA, pointB);
            const maxPoint = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].max(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].create(), pointA, pointB);
            const size = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].subtract(maxPoint, maxPoint, minPoint);
            return {
                type: annotation.type === neuroglancer_annotation__WEBPACK_IMPORTED_MODULE_0__["AnnotationType"].LINE ? 'LINE' : 'VOLUME',
                corner: toCommaSeparated(minPoint),
                size: toCommaSeparated(size),
                object_labels: objectLabels,
                payload,
            };
        }
        case neuroglancer_annotation__WEBPACK_IMPORTED_MODULE_0__["AnnotationType"].POINT: {
            return {
                type: 'LOCATION',
                corner: toCommaSeparated(annotation.point),
                size: '0,0,0',
                object_labels: objectLabels,
                payload,
            };
        }
        case neuroglancer_annotation__WEBPACK_IMPORTED_MODULE_0__["AnnotationType"].ELLIPSOID: {
            const corner = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].subtract(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].create(), annotation.center, annotation.radii);
            const size = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].scale(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].create(), annotation.radii, 2);
            return {
                type: 'LOCATION',
                corner: toCommaSeparated(corner),
                size: toCommaSeparated(size),
                object_labels: objectLabels,
                payload,
            };
        }
    }
}
let BrainmapsAnnotationSource = class BrainmapsAnnotationSource extends (BrainmapsSource(neuroglancer_annotation_backend__WEBPACK_IMPORTED_MODULE_1__["AnnotationSource"], neuroglancer_datasource_brainmaps_base__WEBPACK_IMPORTED_MODULE_5__["AnnotationSourceParameters"])) {
    downloadGeometry(chunk, cancellationToken) {
        const { parameters } = this;
        return Promise
            .all(spatialAnnotationTypes.map(spatialAnnotationType => Object(neuroglancer_datasource_brainmaps_api__WEBPACK_IMPORTED_MODULE_4__["makeRequest"])(parameters.instance, this.credentialsProvider, {
            method: 'POST',
            path: `/v1/changes/${parameters.volumeId}/${parameters.changestack}/spatials:get`,
            payload: JSON.stringify({
                type: spatialAnnotationType,
                ignore_payload: true,
            }),
            responseType: 'json',
        }, cancellationToken)))
            .then(values => {
            parseAnnotations(chunk, values);
        });
    }
    downloadSegmentFilteredGeometry(chunk, cancellationToken) {
        const { parameters } = this;
        return Promise
            .all(spatialAnnotationTypes.map(spatialAnnotationType => Object(neuroglancer_datasource_brainmaps_api__WEBPACK_IMPORTED_MODULE_4__["makeRequest"])(parameters.instance, this.credentialsProvider, {
            method: 'POST',
            path: `/v1/changes/${parameters.volumeId}/${parameters.changestack}/spatials:get`,
            payload: JSON.stringify({
                type: spatialAnnotationType,
                object_labels: [chunk.objectId.toString()],
                ignore_payload: true,
            }),
            responseType: 'json',
        }, cancellationToken)))
            .then(values => {
            parseAnnotations(chunk, values);
        });
    }
    downloadMetadata(chunk, cancellationToken) {
        const { parameters } = this;
        const id = chunk.key;
        return Object(neuroglancer_datasource_brainmaps_api__WEBPACK_IMPORTED_MODULE_4__["makeRequest"])(parameters.instance, this.credentialsProvider, {
            method: 'POST',
            path: `/v1/changes/${parameters.volumeId}/${parameters.changestack}/spatials:get`,
            payload: JSON.stringify({
                type: getSpatialAnnotationTypeFromId(id),
                id: getFullSpatialAnnotationId(parameters, id)
            }),
            responseType: 'json',
        }, cancellationToken)
            .then(response => {
            chunk.annotation = parseAnnotationResponse(response, getIdPrefix(parameters), id);
        }, () => {
            chunk.annotation = null;
        });
    }
    add(annotation) {
        const { parameters } = this;
        const brainmapsAnnotation = annotationToBrainmaps(annotation);
        return Object(neuroglancer_datasource_brainmaps_api__WEBPACK_IMPORTED_MODULE_4__["makeRequest"])(parameters.instance, this.credentialsProvider, {
            method: 'POST',
            path: `/v1/changes/${parameters.volumeId}/${parameters.changestack}/spatials:push`,
            payload: JSON.stringify({ annotations: [brainmapsAnnotation] }),
            responseType: 'json',
        })
            .then(response => {
            Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyObject"])(response);
            const ids = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyObjectProperty"])(response, 'ids', neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_15__["verifyStringArray"]);
            if (ids.length !== 1) {
                throw new Error(`Expected list of 1 id, but received ${JSON.stringify(ids)}.`);
            }
            const idPrefix = getIdPrefix(this.parameters);
            return parseBrainmapsAnnotationId(idPrefix, ids[0]);
        });
    }
    update(id, annotation) {
        const { parameters } = this;
        const brainmapsAnnotation = annotationToBrainmaps(annotation);
        brainmapsAnnotation.id = getFullSpatialAnnotationId(parameters, id);
        return Object(neuroglancer_datasource_brainmaps_api__WEBPACK_IMPORTED_MODULE_4__["makeRequest"])(parameters.instance, this.credentialsProvider, {
            method: 'POST',
            path: `/v1/changes/${parameters.volumeId}/${parameters.changestack}/spatials:push`,
            payload: JSON.stringify({ annotations: [brainmapsAnnotation] }),
            responseType: 'json',
        });
    }
    delete(id) {
        const { parameters } = this;
        return Object(neuroglancer_datasource_brainmaps_api__WEBPACK_IMPORTED_MODULE_4__["makeRequest"])(parameters.instance, this.credentialsProvider, {
            method: 'POST',
            path: `/v1/changes/${parameters.volumeId}/${parameters.changestack}/spatials:delete`,
            payload: JSON.stringify({
                type: getSpatialAnnotationTypeFromId(id),
                ids: [getFullSpatialAnnotationId(parameters, id)]
            }),
            responseType: 'json',
        });
    }
};
BrainmapsAnnotationSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_18__["registerSharedObject"])()
], BrainmapsAnnotationSource);



/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/brainmaps/base.ts":
/*!*****************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/brainmaps/base.ts ***!
  \*****************************************************************************************************************/
/*! exports provided: VolumeChunkEncoding, ChangeSpec, VolumeSourceParameters, MultiscaleMeshSourceParameters, MeshSourceParameters, SkeletonSourceParameters, AnnotationSourceParameters */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VolumeChunkEncoding", function() { return VolumeChunkEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChangeSpec", function() { return ChangeSpec; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VolumeSourceParameters", function() { return VolumeSourceParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiscaleMeshSourceParameters", function() { return MultiscaleMeshSourceParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshSourceParameters", function() { return MeshSourceParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SkeletonSourceParameters", function() { return SkeletonSourceParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationSourceParameters", function() { return AnnotationSourceParameters; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var VolumeChunkEncoding;
(function (VolumeChunkEncoding) {
    VolumeChunkEncoding[VolumeChunkEncoding["RAW"] = 0] = "RAW";
    VolumeChunkEncoding[VolumeChunkEncoding["JPEG"] = 1] = "JPEG";
    VolumeChunkEncoding[VolumeChunkEncoding["COMPRESSED_SEGMENTATION"] = 2] = "COMPRESSED_SEGMENTATION";
})(VolumeChunkEncoding || (VolumeChunkEncoding = {}));
class ChangeSpec {
}
class VolumeSourceParameters {
}
VolumeSourceParameters.RPC_ID = 'brainmaps/VolumeChunkSource';
class MultiscaleMeshSourceParameters {
}
MultiscaleMeshSourceParameters.RPC_ID = 'brainmaps/MultiscaleMeshSource';
class MeshSourceParameters {
}
MeshSourceParameters.RPC_ID = 'brainmaps/MeshSource';
class SkeletonSourceParameters {
}
SkeletonSourceParameters.RPC_ID = 'brainmaps/SkeletonSource';
class AnnotationSourceParameters {
}
AnnotationSourceParameters.RPC_ID = 'brainmaps/Annotation';


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/computed/backend.ts":
/*!*******************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/computed/backend.ts ***!
  \*******************************************************************************************************************/
/*! exports provided: VolumeComputationBackend, copyBufferOverlap, ComputedVolumeChunk, ComputedVolumeChunkSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VolumeComputationBackend", function() { return VolumeComputationBackend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copyBufferOverlap", function() { return copyBufferOverlap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComputedVolumeChunk", function() { return ComputedVolumeChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComputedVolumeChunkSource", function() { return ComputedVolumeChunkSource; });
/* harmony import */ var neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/chunk_manager/backend */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/backend.ts");
/* harmony import */ var neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/chunk_manager/base */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/base.ts");
/* harmony import */ var neuroglancer_datasource_computed_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/datasource/computed/base */ "../../../../../../neuroglancer/src/neuroglancer/datasource/computed/base.ts");
/* harmony import */ var neuroglancer_sliceview_backend_chunk_decoders_raw__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/sliceview/backend_chunk_decoders/raw */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/raw.ts");
/* harmony import */ var neuroglancer_sliceview_compressed_segmentation_decode_uint32__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! neuroglancer/sliceview/compressed_segmentation/decode_uint32 */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/compressed_segmentation/decode_uint32.ts");
/* harmony import */ var neuroglancer_sliceview_compressed_segmentation_decode_uint64__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! neuroglancer/sliceview/compressed_segmentation/decode_uint64 */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/compressed_segmentation/decode_uint64.ts");
/* harmony import */ var neuroglancer_sliceview_volume_backend__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! neuroglancer/sliceview/volume/backend */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/volume/backend.ts");
/* harmony import */ var neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! neuroglancer/util/cancellation */ "../../../../../../neuroglancer/src/neuroglancer/util/cancellation.ts");
/* harmony import */ var neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! neuroglancer/util/data_type */ "../../../../../../neuroglancer/src/neuroglancer/util/data_type.ts");
/* harmony import */ var neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! neuroglancer/util/geom */ "../../../../../../neuroglancer/src/neuroglancer/util/geom.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/**
 * @license
 * Copyright 2018 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};












class VolumeComputationBackend extends neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__["SharedObjectCounterpart"] {
    constructor(rpc, params) {
        super(rpc, params);
        this.params = params;
    }
    createOutputBuffer() {
        const { outputSpec } = this.params;
        return new ArrayBuffer(Object(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["prod3"])(outputSpec.size) * outputSpec.numChannels * neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_8__["DATA_TYPE_BYTES"][outputSpec.dataType]);
    }
}
/**
 * Computes the index relative to the origin of a larger 4d volume given the
 * index relative to a fully contained sub volume. In particular this allows
 * for iteration along a subregion of a volume using linear indices.
 * @param idx the linear index into a subregion
 * @param offset the subregion's offset relative to the overall volume
 * @param cropSize the subregion's size
 * @param size the overal volume's size
 */
function subBoxIndex(idx, offset, cropSize, size) {
    return idx % cropSize[0] + offset[0] +
        (Math.floor(idx / cropSize[0]) % cropSize[1] + offset[1]) * size[0] +
        (Math.floor(idx / (cropSize[0] * cropSize[1])) % cropSize[2] + offset[2]) * size[0] *
            size[1] +
        (Math.floor(idx / (cropSize[0] * cropSize[1] * cropSize[2]))) * size[0] * size[1] * size[2];
}
/**
 * Copies the overlapping region of the source array into the destination
 * array.
 * @param sourceCorner the corner (lower-bound) corresponding to the source
 *   array, in global coordinates.
 * @param sourceSize the source array's size
 * @param sourceView the source array
 * @param destCorner the corner corresponding to the destination array
 * @param destSize the destination array's size
 * @param destView the destination array
 * @param dataType the data type of both source and destintation arrays.
 */
function copyBufferOverlap(sourceCorner, sourceSize, sourceView, destCorner, destSize, destView, dataType) {
    // UINT64 data is packed two-at-a-time into a UINT32 array, so we handle it as a special case.
    let copyFunction = dataType === neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_8__["DataType"].UINT64 ? (j, k) => {
        destView[2 * k] = sourceView[2 * j];
        destView[2 * k + 1] = sourceView[2 * j + 1];
    } : (j, k) => {
        destView[k] = sourceView[j];
    };
    // Global Coordinates
    const commonLower = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].max(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create(), sourceCorner, destCorner);
    const sourceUpper = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].add(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create(), sourceCorner, sourceSize);
    const destUpper = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].add(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create(), destCorner, destSize);
    const commonUpper = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].min(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create(), sourceUpper, destUpper);
    const commonSize = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].subtract(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create(), commonUpper, commonLower);
    const sourceLower = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].subtract(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create(), commonLower, sourceCorner);
    const destLower = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].subtract(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create(), commonLower, destCorner);
    for (let i = 0; i < Object(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["prod3"])(commonSize); ++i) {
        const j = subBoxIndex(i, /*offset=*/ sourceLower, /*cropSize=*/ commonSize, /*size=*/ sourceSize);
        const k = subBoxIndex(i, /*offset=*/ destLower, /*cropSize=*/ commonSize, /*size=*/ destSize);
        copyFunction(j, k);
    }
}
/**
 * Computes a consistent key string from a chunk grid position.
 *
 * It's tempting to use chunk.key, in particular because these values will
 * often be the same, but we won't always have access to a fully-specified
 * chunk, and there's no contractual guarantee that its key will be equal to
 * the value returned here.
 * @param gridPosition chunk grid position
 */
function gridPositionKey(gridPosition) {
    return gridPosition.toLocaleString();
}
// In addition to acting as a VolumeChunk for the purposes of a ChunkManager
// object, also performs the book-keeping necessary to prepare the data buffer
// used as input by the computation that provides its data. This includes
// fetching chunk data from other datasources.
class ComputedVolumeChunk extends neuroglancer_sliceview_volume_backend__WEBPACK_IMPORTED_MODULE_6__["VolumeChunk"] {
    constructor() {
        super(...arguments);
        // True iff this chunk is actively computing.
        this.computing_ = false;
        // True iff this chunk has been initialized for computation.
        this.initialized_ = false;
        // A map from grid position string keys, as returned by gridPositionKey to
        // vec3 grid positions. This is used as an indirection to avoid storing
        // explicit references to VolumeChunks belonging to the origin source.
        this.originGridPositions_ = new Map();
        // Indicate to the ChunkManager that this is a computational Chunk.
        this.isComputational = true;
    }
    /**
     * Sets up computation parameters, computes overlapping origin chunks and
     * initializes the input buffer. Returns a Promise that will resolve when
     * computation completes, or reject if computation fails or is cancelled.
     * @param computationParams computation parameters
     * @param cancellationToken cancellation token
     */
    initializeComputation(computationParams, cancellationToken) {
        if (!this.source) {
            throw new Error('initializeComputation must be called after source is valid.');
        }
        if (!this.chunkDataSize) {
            throw new Error('initializeComputation must be called after computeChunkBounds.');
        }
        this.computationParams_ = computationParams;
        this.cancellationToken_ = cancellationToken;
        this.computing_ = false;
        this.inputBuffer_ = undefined;
        this.cancellationToken_.add(() => {
            this.fail_(neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_7__["CANCELED"]);
        });
        // Compute the input bounding box for this manager
        // These computations happen without regard for edge effects, which are
        // handled post-computation by cropping to this VolumeChunk's geometry.
        const { inputSpec, outputSpec } = this.computationParams_;
        const twos = [2.0, 2.0, 2.0];
        const outBoxLower = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].multiply(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create(), this.chunkGridPosition, outputSpec.size);
        const outputCenter = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].add(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create(), outBoxLower, neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].divide(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create(), outputSpec.size, twos));
        const scaleFactor = this.source.parameters.scaleFactor;
        const inputCenter = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].divide(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create(), outputCenter, scaleFactor);
        const inputSize = inputSpec.size;
        this.inputLower_ =
            neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].subtract(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create(), inputCenter, neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].divide(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create(), inputSize, twos));
        this.inputBuffer_ = new ArrayBuffer(this.systemMemoryBytes);
        this.setupSourceChunks_();
        this.initialized_ = true;
        return new Promise((resolve, reject) => {
            this.resolve_ = resolve;
            this.reject_ = reject;
        });
    }
    initializeVolumeChunk(key, chunkGridPosition) {
        super.initializeVolumeChunk(key, chunkGridPosition);
        const { inputSpec } = this.source.computation.params;
        const inputSize = inputSpec.size;
        const bufferLength = Object(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["prod3"])(inputSize) * inputSpec.numChannels;
        const originDataType = inputSpec.dataType;
        // Signal that we're about to take up memory. This value will be overwritten
        // post-computation by a call to decodeRawChunk.
        this.systemMemoryBytes = bufferLength * neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_8__["DATA_TYPE_BYTES"][originDataType];
    }
    /**
     * Listens to state changes on origin Chunks.
     * @param chunk an origin Chunk.
     */
    stateChanged(chunk) {
        const volumeChunk = chunk;
        switch (volumeChunk.state) {
            case neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__["ChunkState"].SYSTEM_MEMORY_WORKER: {
                this.copyOriginChunk_(volumeChunk);
                break;
            }
            case neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__["ChunkState"].FAILED:
            case neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__["ChunkState"].EXPIRED: {
                this.fail_(new Error('Data source chunk has expired.'));
                break;
            }
            case neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__["ChunkState"].SYSTEM_MEMORY:
            case neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__["ChunkState"].GPU_MEMORY: {
                // The data was moved to the frontend before we could intercept it, so
                // request it to be sent back.
                const gridKey = gridPositionKey(volumeChunk.chunkGridPosition);
                const chunkSize = volumeChunk.chunkDataSize;
                const originSource = this.source.originSource;
                const chunkCorner = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].multiply(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create(), volumeChunk.chunkGridPosition, originSource.spec.chunkDataSize);
                this.source.requestChunkData(this, volumeChunk)
                    .then((data) => {
                    const originGridPosition = this.originGridPositions_.get(gridKey);
                    const originChunk = originSource.getChunk(originGridPosition);
                    originChunk.unregisterListener(this);
                    this.originGridPositions_.delete(gridKey);
                    const inputSpec = this.computationParams_.inputSpec;
                    const destination = Object(neuroglancer_datasource_computed_base__WEBPACK_IMPORTED_MODULE_2__["getArrayView"])(this.inputBuffer_, inputSpec.dataType);
                    const numChannels = originSource.spec.numChannels;
                    const rawSource = this.maybeDecodeBuffer_(data, inputSpec.dataType, originChunk.chunkDataSize, numChannels);
                    copyBufferOverlap(chunkCorner, chunkSize, rawSource, this.inputLower_, inputSpec.size, destination, inputSpec.dataType);
                    setTimeout(() => this.checkDone_(), 0);
                })
                    .catch((error) => {
                    console.log(this.key, 'unable to retrieve frontend data for', volumeChunk.key);
                    this.fail_(error);
                });
                break;
            }
        }
    }
    /**
     * Returns a list of the grid positions corresponding to chunks on the origin
     * source that this chunk overlaps.
     */
    getOverlappingOriginGridPositions() {
        return this.originGridPositions_.values();
    }
    dispose() {
        super.dispose();
        this.cleanup_();
    }
    /**
     * Unregisters listeners and so forth that were originally registered by this
     * chunk.
     */
    cleanup_() {
        if (!this.initialized_ || !this.source) {
            return;
        }
        for (const chunkGridPosition of this.originGridPositions_.values()) {
            this.source.originSource.getChunk(chunkGridPosition).unregisterListener(this);
            this.source.cancelChunkDataRequest(gridPositionKey(chunkGridPosition), this.key);
        }
        this.originGridPositions_.clear();
        this.source.unregisterChunk(this);
    }
    /**
     * Handles failure conditions encountered while fetching data from the origin
     * source.
     * @param reason reason for failure
     */
    fail_(reason) {
        this.cleanup_();
        this.reject_(reason);
    }
    /**
     * Decompresses a compressed segmentation buffer, or simply passes it back if
     * raw.
     * @param buffer the possibly-compressed data buffer
     * @param dataType the buffer's datatype
     * @param size the buffer's size
     * @param numChannels the number of channels in the buffer
     */
    maybeDecodeBuffer_(buffer, dataType, size, numChannels) {
        const originSource = this.source.originSource;
        if (!originSource.spec.compressedSegmentationBlockSize) {
            return buffer;
        }
        const compressedBlockSize = originSource.spec.compressedSegmentationBlockSize;
        const size4 = [size[0], size[1], size[2], numChannels];
        if (dataType === neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_8__["DataType"].UINT32) {
            const decoded = new Uint32Array(Object(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["prod3"])(size) * numChannels);
            Object(neuroglancer_sliceview_compressed_segmentation_decode_uint32__WEBPACK_IMPORTED_MODULE_4__["decodeChannels"])(decoded, buffer, 0, size4, compressedBlockSize);
            return decoded;
        }
        if (dataType === neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_8__["DataType"].UINT64) {
            const decoded = new Uint32Array(Object(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["prod3"])(size) * numChannels * 2);
            Object(neuroglancer_sliceview_compressed_segmentation_decode_uint64__WEBPACK_IMPORTED_MODULE_5__["decodeChannels"])(decoded, buffer, 0, size4, compressedBlockSize);
            return decoded;
        }
        throw new Error(`Compression is unsupported for datatypes other than UINT32 and UINT64`);
    }
    /**
     * Copies an origin chunk's data into the appropriate location in the input
     * buffer.
     * @param originChunk origin Chunk
     */
    copyOriginChunk_(originChunk) {
        const inputSpec = this.computationParams_.inputSpec;
        const gridKey = gridPositionKey(originChunk.chunkGridPosition);
        this.originGridPositions_.delete(gridKey);
        const chunkSize = originChunk.chunkDataSize;
        const numChannels = inputSpec.numChannels;
        const chunkCorner = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].multiply(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create(), originChunk.chunkGridPosition, this.source.originSource.spec.chunkDataSize);
        let destination = Object(neuroglancer_datasource_computed_base__WEBPACK_IMPORTED_MODULE_2__["getArrayView"])(this.inputBuffer_, inputSpec.dataType);
        const source = this.maybeDecodeBuffer_((originChunk.data), inputSpec.dataType, chunkSize, numChannels);
        copyBufferOverlap(chunkCorner, chunkSize, source, this.inputLower_, inputSpec.size, destination, inputSpec.dataType);
        originChunk.unregisterListener(this);
        setTimeout(() => this.checkDone_(), 0);
    }
    /**
     * Peforms the computation over the input buffer, ensuring validity of the
     * eventual output data that will be set for this chunk. This includes
     * handling volume-boundary effects.
     */
    performComputation_() {
        if (this.cancellationToken_.isCanceled) {
            return Promise.reject(neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_7__["CANCELED"]);
        }
        const computation = this.source.computation;
        const { outputSpec } = this.computationParams_;
        const outputSize = outputSpec.size;
        const outputDataType = outputSpec.dataType;
        // Most of the time, the chunk data size corresponds to the output buffer
        // size, but a chunk at the upper bound of a volume will be clipped to the
        // volume bounds. Computations are guaranteed the same buffer sizes each
        // time, so we check for this situation and perform a crop-and-copy when
        // necessary.
        return computation.compute(this.inputBuffer_, this.cancellationToken_, this)
            .then((outputBuffer) => {
            this.inputBuffer_ = undefined;
            if (neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].equals(outputSize, this.chunkDataSize)) {
                return Object(neuroglancer_sliceview_backend_chunk_decoders_raw__WEBPACK_IMPORTED_MODULE_3__["decodeRawChunk"])(this, this.cancellationToken_, outputBuffer);
            }
            const outputBufferView = Object(neuroglancer_datasource_computed_base__WEBPACK_IMPORTED_MODULE_2__["getArrayView"])(outputBuffer, outputDataType);
            const chunkBuffer = new ArrayBuffer(Object(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["prod3"])(this.chunkDataSize) * outputSpec.numChannels * neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_8__["DATA_TYPE_BYTES"][outputDataType]);
            const chunkBufferView = Object(neuroglancer_datasource_computed_base__WEBPACK_IMPORTED_MODULE_2__["getArrayView"])(chunkBuffer, outputDataType);
            const outputCorner = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].multiply(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create(), this.chunkGridPosition, outputSize);
            copyBufferOverlap(outputCorner, outputSize, outputBufferView, outputCorner, this.chunkDataSize, chunkBufferView, outputDataType);
            return Object(neuroglancer_sliceview_backend_chunk_decoders_raw__WEBPACK_IMPORTED_MODULE_3__["decodeRawChunk"])(this, this.cancellationToken_, chunkBuffer);
        });
    }
    /**
     * Idempotently performs the computation, if the input buffer is ready. This
     * function should be called after a timeout in most cases, because it may
     * take a long time to return.
     */
    checkDone_() {
        if (this.computing_) {
            return;
        }
        if (this.originGridPositions_.size === 0) {
            this.computing_ = true;
            this.cleanup_();
            this.performComputation_()
                .then(() => {
                if (this.resolve_) {
                    this.resolve_();
                }
            })
                .catch((error) => {
                this.reject_(error);
            });
        }
    }
    /**
     * Computes the chunkGridPosition for each valid origin chunk that the input
     * field of this computational chunk overlaps, populating the origin grid
     * positions map. Also registers this chunk as a listener on the state
     * changes of the origin chunks.
     */
    setupSourceChunks_() {
        const originSource = this.source.originSource;
        const originChunkSize = originSource.spec.chunkDataSize;
        const inputSpec = this.computationParams_.inputSpec;
        const inputLower = this.inputLower_;
        const gridLower = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].floor(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create(), neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].divide(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create(), inputLower, originChunkSize));
        const inputSizeMinusOne = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].subtract(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create(), inputSpec.size, [1, 1, 1]);
        const inBoxUpper = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].add(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create(), inputLower, inputSizeMinusOne);
        neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].max(gridLower, gridLower, [0, 0, 0]);
        neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].min(inBoxUpper, inBoxUpper, originSource.spec.upperVoxelBound);
        const gridUpper = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].floor(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create(), neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].divide(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create(), inBoxUpper, originChunkSize));
        const gridPosition = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create();
        for (let z = gridLower[2]; z <= gridUpper[2]; ++z) {
            for (let y = gridLower[1]; y <= gridUpper[1]; ++y) {
                for (let x = gridLower[0]; x <= gridUpper[0]; ++x) {
                    gridPosition.set([x, y, z]);
                    const key = gridPositionKey(gridPosition);
                    this.originGridPositions_.set(key, neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].copy(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create(), gridPosition));
                }
            }
        }
        for (const chunkGridPosition of this.originGridPositions_.values()) {
            const chunk = originSource.getChunk(chunkGridPosition);
            chunk.registerListener(this);
            this.stateChanged(chunk);
        }
    }
}
let ComputedVolumeChunkSource = class ComputedVolumeChunkSource extends (Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["WithParameters"])(neuroglancer_sliceview_volume_backend__WEBPACK_IMPORTED_MODULE_6__["VolumeChunkSource"], neuroglancer_datasource_computed_base__WEBPACK_IMPORTED_MODULE_2__["ComputedVolumeChunkSourceParameters"])) {
    constructor(rpc, options) {
        super(rpc, options);
        // Computations that are waiting for input data.
        this.pendingComputations_ = new Map();
        // Promise callbacks for pending data requests that were made to the
        // front-end, which are necessary when source data has been previously
        // downloaded and moved to the GPU. The top-level map is keyed by the origin
        // chunk keys. The inner maps are keyed by the requestor.
        this.frontendRequestPromises_ = new Map();
        this.originSource = this.rpc.getRef(this.parameters.sourceRef);
        this.computation = this.rpc.getRef(this.parameters.computationRef);
        this.registerDisposer(this.chunkManager);
        this.registerDisposer(this.chunkManager.recomputeChunkPrioritiesLate.add(() => {
            this.updateChunkPriorities();
        }));
    }
    /**
     * Requests that the relevant chunks on the origin source are downloaded, so
     * their data may be available for computation.
     */
    updateChunkPriorities() {
        for (const outputChunk of this.pendingComputations_.values()) {
            if (outputChunk.priorityTier === neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__["ChunkPriorityTier"].RECENT) {
                continue;
            }
            for (const gridPosition of outputChunk.getOverlappingOriginGridPositions()) {
                const sourceChunk = this.originSource.getChunk(gridPosition);
                this.chunkManager.requestChunk(sourceChunk, outputChunk.priorityTier, outputChunk.priority, false);
            }
        }
    }
    /**
     * Unregisters a ComputedVolumeChunk from the list of pending computations.
     * @param chunk the computed volume chunk to unregister
     */
    unregisterChunk(chunk) {
        const key = chunk.key;
        this.pendingComputations_.delete(key);
    }
    /**
     * Requests chunk data that has already been moved to the frontend.
     * @param computedChunk the chunk to which data will be provided
     * @param dataChunk the chunk representing the source data.
     */
    requestChunkData(computedChunk, dataChunk) {
        return new Promise((resolve, reject) => {
            const originGridKey = gridPositionKey(dataChunk.chunkGridPosition);
            const computedChunkKey = computedChunk.key;
            if (this.frontendRequestPromises_.has(originGridKey)) {
                this.frontendRequestPromises_.get(originGridKey).set(computedChunkKey, { resolve, reject });
                return;
            }
            this.frontendRequestPromises_.set(originGridKey, new Map([[computedChunkKey, { resolve, reject }]]));
            this.chunkManager.queueManager.retrieveChunkData(dataChunk)
                .then((data) => {
                const promiseMap = this.frontendRequestPromises_.get(originGridKey);
                if (!promiseMap) {
                    // The chunk or chunks requesting this data chunk were cancelled.
                    return;
                }
                for (const promisePair of promiseMap.values()) {
                    promisePair.resolve(data);
                }
                this.frontendRequestPromises_.delete(originGridKey);
            })
                .catch((error) => {
                const promiseMap = this.frontendRequestPromises_.get(originGridKey);
                if (!promiseMap) {
                    return;
                }
                for (const promisePair of promiseMap.values()) {
                    promisePair.reject(error);
                }
                this.frontendRequestPromises_.delete(originGridKey);
            });
        });
    }
    /**
     * Cancels an outstanding chunk data request.
     * @param originGridKey the key corresponding to the requested chunk
     * @param requestKey the key corresponding to the requestor
     */
    cancelChunkDataRequest(originGridKey, requestKey) {
        if (this.frontendRequestPromises_.has(originGridKey)) {
            const map = this.frontendRequestPromises_.get(originGridKey);
            map.delete(requestKey);
            if (map.size === 0) {
                this.frontendRequestPromises_.delete(originGridKey);
            }
        }
    }
    download(chunk, cancellationToken) {
        const outputChunk = chunk;
        this.computeChunkBounds(outputChunk);
        this.pendingComputations_.set(chunk.key, outputChunk);
        const promise = outputChunk.initializeComputation(this.computation.params, cancellationToken);
        this.chunkManager.scheduleUpdateChunkPriorities();
        return promise;
    }
};
ComputedVolumeChunkSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__["registerSharedObject"])()
], ComputedVolumeChunkSource);

ComputedVolumeChunkSource.prototype.chunkConstructor = ComputedVolumeChunk;


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/computed/base.ts":
/*!****************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/computed/base.ts ***!
  \****************************************************************************************************************/
/*! exports provided: ComputedVolumeChunkSourceParameters, ComputationParameters, getArrayView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComputedVolumeChunkSourceParameters", function() { return ComputedVolumeChunkSourceParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComputationParameters", function() { return ComputationParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getArrayView", function() { return getArrayView; });
/* harmony import */ var neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/util/data_type */ "../../../../../../neuroglancer/src/neuroglancer/util/data_type.ts");
/**
 * @license
 * Copyright 2018 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class ComputedVolumeChunkSourceParameters {
}
ComputedVolumeChunkSourceParameters.RPC_ID = 'computed/ComputedVolumeChunkSourceParameters';
// Parameters that specify data type, volume type, and size for the input and
// output buffers relative to a computation. This information will ultimately
// pass to the VolumeComputationBackend that executes the computation. Extend
// this interface to add parameters - any additional parameters should be
// optional to allow direct assignment to work between types.
class ComputationParameters {
}
function getArrayView(buffer, type) {
    switch (type) {
        case neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_0__["DataType"].UINT8:
            return new Uint8Array(buffer);
        case neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_0__["DataType"].UINT16:
            return new Uint16Array(buffer);
        case neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_0__["DataType"].UINT32:
        case neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_0__["DataType"].UINT64:
            return new Uint32Array(buffer);
        case neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_0__["DataType"].FLOAT32:
            return new Float32Array(buffer);
    }
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/computed/example/backend.ts":
/*!***************************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/computed/example/backend.ts ***!
  \***************************************************************************************************************************/
/*! exports provided: ExampleComputation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExampleComputation", function() { return ExampleComputation; });
/* harmony import */ var neuroglancer_datasource_computed_backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/datasource/computed/backend */ "../../../../../../neuroglancer/src/neuroglancer/datasource/computed/backend.ts");
/* harmony import */ var neuroglancer_datasource_computed_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/datasource/computed/base */ "../../../../../../neuroglancer/src/neuroglancer/datasource/computed/base.ts");
/* harmony import */ var neuroglancer_datasource_computed_example_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/datasource/computed/example/base */ "../../../../../../neuroglancer/src/neuroglancer/datasource/computed/example/base.ts");
/* harmony import */ var neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/util/data_type */ "../../../../../../neuroglancer/src/neuroglancer/util/data_type.ts");
/* harmony import */ var neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! neuroglancer/util/geom */ "../../../../../../neuroglancer/src/neuroglancer/util/geom.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * @license
 * Copyright 2018 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






let ExampleComputation = class ExampleComputation extends neuroglancer_datasource_computed_backend__WEBPACK_IMPORTED_MODULE_0__["VolumeComputationBackend"] {
    compute(inputBuffer) {
        const { inputSpec, outputSpec } = this.params;
        const inputBufferView = Object(neuroglancer_datasource_computed_base__WEBPACK_IMPORTED_MODULE_1__["getArrayView"])(inputBuffer, inputSpec.dataType);
        const outputBuffer = this.createOutputBuffer();
        const outputBufferView = Object(neuroglancer_datasource_computed_base__WEBPACK_IMPORTED_MODULE_1__["getArrayView"])(outputBuffer, outputSpec.dataType);
        // const offset = vec3.floor(vec3.create(), vec3.divide(vec3.create(),
        // vec3.subtract(vec3.create(), inputSpec.size, outputSpec.size), [2, 2, 2]));
        const zeros = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].create();
        zeros.set([0, 0, 0]);
        Object(neuroglancer_datasource_computed_backend__WEBPACK_IMPORTED_MODULE_0__["copyBufferOverlap"])(zeros, inputSpec.size, inputBufferView, zeros, outputSpec.size, outputBufferView, outputSpec.dataType);
        if (inputSpec.dataType === neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_3__["DataType"].UINT8) {
            for (let i = 0; i < outputBufferView.length; ++i) {
                outputBufferView[i] = 255 - outputBufferView[i];
            }
        }
        return Promise.resolve(outputBuffer);
    }
};
ExampleComputation = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_5__["registerSharedObject"])(neuroglancer_datasource_computed_example_base__WEBPACK_IMPORTED_MODULE_2__["EXAMPLE_COMPUTATION_RPC_ID"])
], ExampleComputation);



/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/computed/example/base.ts":
/*!************************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/computed/example/base.ts ***!
  \************************************************************************************************************************/
/*! exports provided: EXAMPLE_COMPUTATION_RPC_ID, ExampleComputationParameters */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EXAMPLE_COMPUTATION_RPC_ID", function() { return EXAMPLE_COMPUTATION_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExampleComputationParameters", function() { return ExampleComputationParameters; });
/* harmony import */ var neuroglancer_datasource_computed_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/datasource/computed/base */ "../../../../../../neuroglancer/src/neuroglancer/datasource/computed/base.ts");
/**
 * @license
 * Copyright 2018 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const EXAMPLE_COMPUTATION_RPC_ID = 'Computation.ExampleComputation';
class ExampleComputationParameters extends neuroglancer_datasource_computed_base__WEBPACK_IMPORTED_MODULE_0__["ComputationParameters"] {
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/computed/tensorflow/backend.ts":
/*!******************************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/computed/tensorflow/backend.ts ***!
  \******************************************************************************************************************************/
/*! exports provided: TensorflowComputation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TensorflowComputation", function() { return TensorflowComputation; });
/* harmony import */ var neuroglancer_datasource_computed_backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/datasource/computed/backend */ "../../../../../../neuroglancer/src/neuroglancer/datasource/computed/backend.ts");
/* harmony import */ var neuroglancer_datasource_computed_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/datasource/computed/base */ "../../../../../../neuroglancer/src/neuroglancer/datasource/computed/base.ts");
/* harmony import */ var neuroglancer_datasource_computed_tensorflow_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/datasource/computed/tensorflow/base */ "../../../../../../neuroglancer/src/neuroglancer/datasource/computed/tensorflow/base.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/**
 * @license
 * Copyright 2019 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};




let TensorflowComputation = class TensorflowComputation extends neuroglancer_datasource_computed_backend__WEBPACK_IMPORTED_MODULE_0__["VolumeComputationBackend"] {
    /**
     * Converts an input data buffer into a TF.js-compatible normalized typed
     * array.
     * @param buffer the input data buffer
     * @param dtype TF.js-centric dtype string
     */
    convertInputBuffer_(buffer, dtype) {
        const inputArray = Object(neuroglancer_datasource_computed_base__WEBPACK_IMPORTED_MODULE_1__["getArrayView"])(buffer, this.params.inputSpec.dataType);
        let outputArray;
        switch (dtype) {
            case 'float32':
                outputArray = new Float32Array(inputArray.length);
                break;
            case 'int32':
                outputArray = new Int32Array(inputArray.length);
                break;
            default:
                throw new Error(`Unsupported dtype: ${dtype}`);
        }
        for (let i = 0; i < inputArray.length; ++i) {
            outputArray[i] = (inputArray[i] - this.params.mean) / this.params.stdDev;
        }
        return outputArray;
    }
    /**
     * Copies a TF.js typed array prediction output into a type-correct data
     * buffer, to be used as computational output in a ComputedVolumeChunk.
     * @param inputArray TF.js prediction output
     */
    convertOutputBuffer_(inputArray) {
        const buffer = this.createOutputBuffer();
        const outputArray = Object(neuroglancer_datasource_computed_base__WEBPACK_IMPORTED_MODULE_1__["getArrayView"])(buffer, this.params.outputSpec.dataType);
        outputArray.set(inputArray);
        return buffer;
    }
    compute(inputBuffer, cancellationToken, chunk) {
        this.addRef();
        const inferenceRequest = {
            inputBuffer: this.convertInputBuffer_(inputBuffer, this.params.inputDType),
            computationRef: this.rpcId,
            priority: chunk.priority
        };
        return this.rpc
            .promiseInvoke(neuroglancer_datasource_computed_tensorflow_base__WEBPACK_IMPORTED_MODULE_2__["TENSORFLOW_INFERENCE_RPC_ID"], { inferenceRequest }, cancellationToken)
            .then((result) => {
            this.dispose();
            return this.convertOutputBuffer_(result.outputBuffer);
        })
            .catch((e) => {
            this.dispose();
            throw e;
        });
    }
};
TensorflowComputation = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_3__["registerSharedObject"])(neuroglancer_datasource_computed_tensorflow_base__WEBPACK_IMPORTED_MODULE_2__["TENSORFLOW_COMPUTATION_RPC_ID"])
], TensorflowComputation);



/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/computed/tensorflow/base.ts":
/*!***************************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/computed/tensorflow/base.ts ***!
  \***************************************************************************************************************************/
/*! exports provided: TENSORFLOW_COMPUTATION_RPC_ID, TENSORFLOW_INFERENCE_RPC_ID, TensorflowComputationParameters */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TENSORFLOW_COMPUTATION_RPC_ID", function() { return TENSORFLOW_COMPUTATION_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TENSORFLOW_INFERENCE_RPC_ID", function() { return TENSORFLOW_INFERENCE_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TensorflowComputationParameters", function() { return TensorflowComputationParameters; });
/* harmony import */ var neuroglancer_datasource_computed_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/datasource/computed/base */ "../../../../../../neuroglancer/src/neuroglancer/datasource/computed/base.ts");
/**
 * @license
 * Copyright 2019 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const TENSORFLOW_COMPUTATION_RPC_ID = 'Computation.Tensorflow';
const TENSORFLOW_INFERENCE_RPC_ID = 'Computation.Tensorflow.Inference';
class TensorflowComputationParameters extends neuroglancer_datasource_computed_base__WEBPACK_IMPORTED_MODULE_0__["ComputationParameters"] {
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/csv/backend.ts":
/*!**************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/csv/backend.ts ***!
  \**************************************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var neuroglancer_async_computation_csv_vertex_attributes_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/async_computation/csv_vertex_attributes_request */ "../../../../../../neuroglancer/src/neuroglancer/async_computation/csv_vertex_attributes_request.ts");
/* harmony import */ var neuroglancer_async_computation_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/async_computation/request */ "../../../../../../neuroglancer/src/neuroglancer/async_computation/request.ts");
/* harmony import */ var neuroglancer_chunk_manager_generic_file_source__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/chunk_manager/generic_file_source */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/generic_file_source.ts");
/* harmony import */ var neuroglancer_single_mesh_backend__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/single_mesh/backend */ "../../../../../../neuroglancer/src/neuroglancer/single_mesh/backend.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * This needs to be a global function, because it identifies the instance of GenericSharedDataSource
 * to use.
 */
function parse(buffer, cancellationToken) {
    return Object(neuroglancer_async_computation_request__WEBPACK_IMPORTED_MODULE_1__["requestAsyncComputation"])(neuroglancer_async_computation_csv_vertex_attributes_request__WEBPACK_IMPORTED_MODULE_0__["parseCSVFromArrayBuffer"], cancellationToken, [buffer], buffer);
}
Object(neuroglancer_single_mesh_backend__WEBPACK_IMPORTED_MODULE_3__["registerSingleMeshVertexAttributesFactory"])('csv', {
    description: 'Comma separated value text file',
    getMeshVertexAttributes: (chunkManager, url, getPriority, cancellationToken) => neuroglancer_chunk_manager_generic_file_source__WEBPACK_IMPORTED_MODULE_2__["GenericSharedDataSource"].getUrl(chunkManager, parse, url, getPriority, cancellationToken)
});


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/dvid/backend.ts":
/*!***************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/dvid/backend.ts ***!
  \***************************************************************************************************************/
/*! exports provided: DVIDSkeletonSource, decodeFragmentChunk, DVIDMeshSource, DVIDVolumeChunkSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DVIDSkeletonSource", function() { return DVIDSkeletonSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeFragmentChunk", function() { return decodeFragmentChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DVIDMeshSource", function() { return DVIDMeshSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DVIDVolumeChunkSource", function() { return DVIDVolumeChunkSource; });
/* harmony import */ var neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/chunk_manager/backend */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/backend.ts");
/* harmony import */ var neuroglancer_datasource_dvid_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/datasource/dvid/base */ "../../../../../../neuroglancer/src/neuroglancer/datasource/dvid/base.ts");
/* harmony import */ var neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/mesh/backend */ "../../../../../../neuroglancer/src/neuroglancer/mesh/backend.ts");
/* harmony import */ var neuroglancer_skeleton_backend__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/skeleton/backend */ "../../../../../../neuroglancer/src/neuroglancer/skeleton/backend.ts");
/* harmony import */ var neuroglancer_skeleton_decode_swc_skeleton__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! neuroglancer/skeleton/decode_swc_skeleton */ "../../../../../../neuroglancer/src/neuroglancer/skeleton/decode_swc_skeleton.ts");
/* harmony import */ var neuroglancer_sliceview_backend_chunk_decoders_compressed_segmentation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! neuroglancer/sliceview/backend_chunk_decoders/compressed_segmentation */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/compressed_segmentation.ts");
/* harmony import */ var neuroglancer_sliceview_backend_chunk_decoders_jpeg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! neuroglancer/sliceview/backend_chunk_decoders/jpeg */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/jpeg.ts");
/* harmony import */ var neuroglancer_sliceview_volume_backend__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! neuroglancer/sliceview/volume/backend */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/volume/backend.ts");
/* harmony import */ var neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! neuroglancer/util/endian */ "../../../../../../neuroglancer/src/neuroglancer/util/endian.ts");
/* harmony import */ var neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! neuroglancer/util/http_request */ "../../../../../../neuroglancer/src/neuroglancer/util/http_request.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};











let DVIDSkeletonSource = class DVIDSkeletonSource extends (Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["WithParameters"])(neuroglancer_skeleton_backend__WEBPACK_IMPORTED_MODULE_3__["SkeletonSource"], neuroglancer_datasource_dvid_base__WEBPACK_IMPORTED_MODULE_1__["SkeletonSourceParameters"])) {
    download(chunk, cancellationToken) {
        const { parameters } = this;
        let bodyid = `${chunk.objectId}`;
        const url = `${parameters.baseUrl}/api/node/${parameters['nodeKey']}` +
            `/${parameters['dataInstanceKey']}/key/` + bodyid + '_swc';
        return Object(neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_9__["cancellableFetchOk"])(url, {}, neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_9__["responseArrayBuffer"], cancellationToken)
            .then(response => {
            let enc = new TextDecoder('utf-8');
            Object(neuroglancer_skeleton_decode_swc_skeleton__WEBPACK_IMPORTED_MODULE_4__["decodeSwcSkeletonChunk"])(chunk, enc.decode(response));
        });
    }
};
DVIDSkeletonSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__["registerSharedObject"])()
], DVIDSkeletonSource);

function decodeFragmentChunk(chunk, response) {
    let dv = new DataView(response);
    let numVertices = dv.getUint32(0, true);
    Object(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_2__["assignMeshFragmentData"])(chunk, Object(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_2__["decodeTriangleVertexPositionsAndIndices"])(response, neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_8__["Endianness"].LITTLE, /*vertexByteOffset=*/ 4, numVertices));
}
let DVIDMeshSource = class DVIDMeshSource extends (Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["WithParameters"])(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_2__["MeshSource"], neuroglancer_datasource_dvid_base__WEBPACK_IMPORTED_MODULE_1__["MeshSourceParameters"])) {
    download(chunk) {
        // DVID does not currently store meshes chunked, the main
        // use-case is for low-resolution 3D views.
        // for now, fragmentId is the body id
        chunk.fragmentIds = [`${chunk.objectId}`];
        return Promise.resolve(undefined);
    }
    downloadFragment(chunk, cancellationToken) {
        const { parameters } = this;
        const url = `${parameters.baseUrl}/api/node/${parameters['nodeKey']}/${parameters['dataInstanceKey']}/key/${chunk.fragmentId}.ngmesh`;
        return Object(neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_9__["cancellableFetchOk"])(url, {}, neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_9__["responseArrayBuffer"], cancellationToken)
            .then(response => decodeFragmentChunk(chunk, response));
    }
};
DVIDMeshSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__["registerSharedObject"])()
], DVIDMeshSource);

let DVIDVolumeChunkSource = class DVIDVolumeChunkSource extends (Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["WithParameters"])(neuroglancer_sliceview_volume_backend__WEBPACK_IMPORTED_MODULE_7__["VolumeChunkSource"], neuroglancer_datasource_dvid_base__WEBPACK_IMPORTED_MODULE_1__["VolumeChunkSourceParameters"])) {
    async download(chunk, cancellationToken) {
        let params = this.parameters;
        let path;
        {
            // chunkPosition must not be captured, since it will be invalidated by the next call to
            // computeChunkBounds.
            let chunkPosition = this.computeChunkBounds(chunk);
            let chunkDataSize = chunk.chunkDataSize;
            // if the volume is an image, get a jpeg
            path = this.getPath(chunkPosition, chunkDataSize);
        }
        const decoder = this.getDecoder(params);
        const response = await Object(neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_9__["cancellableFetchOk"])(`${params.baseUrl}${path}`, {}, neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_9__["responseArrayBuffer"], cancellationToken);
        await decoder(chunk, cancellationToken, (params.encoding === neuroglancer_datasource_dvid_base__WEBPACK_IMPORTED_MODULE_1__["VolumeChunkEncoding"].JPEG) ? response.slice(16) : response);
    }
    getPath(chunkPosition, chunkDataSize) {
        let params = this.parameters;
        if (params.encoding === neuroglancer_datasource_dvid_base__WEBPACK_IMPORTED_MODULE_1__["VolumeChunkEncoding"].JPEG) {
            return `/api/node/${params['nodeKey']}/${params['dataInstanceKey']}/subvolblocks/` +
                `${chunkDataSize[0]}_${chunkDataSize[1]}_${chunkDataSize[2]}/` +
                `${chunkPosition[0]}_${chunkPosition[1]}_${chunkPosition[2]}`;
        }
        else if (params.encoding === neuroglancer_datasource_dvid_base__WEBPACK_IMPORTED_MODULE_1__["VolumeChunkEncoding"].RAW) {
            return `/api/node/${params['nodeKey']}/${params['dataInstanceKey']}/raw/0_1_2/` +
                `${chunkDataSize[0]}_${chunkDataSize[1]}_${chunkDataSize[2]}/` +
                `${chunkPosition[0]}_${chunkPosition[1]}_${chunkPosition[2]}/jpeg`;
        }
        else if (params.encoding === neuroglancer_datasource_dvid_base__WEBPACK_IMPORTED_MODULE_1__["VolumeChunkEncoding"].COMPRESSED_SEGMENTATIONARRAY) {
            return `/api/node/${params['nodeKey']}/${params['dataInstanceKey']}/raw/0_1_2/` +
                `${chunkDataSize[0]}_${chunkDataSize[1]}_${chunkDataSize[2]}/` +
                `${chunkPosition[0]}_${chunkPosition[1]}_${chunkPosition[2]}?compression=googlegzip&scale=${params['dataScale']}`;
        }
        else {
            // encoding is COMPRESSED_SEGMENTATION
            return `/api/node/${params['nodeKey']}/${params['dataInstanceKey']}/raw/0_1_2/` +
                `${chunkDataSize[0]}_${chunkDataSize[1]}_${chunkDataSize[2]}/` +
                `${chunkPosition[0]}_${chunkPosition[1]}_${chunkPosition[2]}?compression=googlegzip`;
        }
    }
    getDecoder(params) {
        if ((params.encoding === neuroglancer_datasource_dvid_base__WEBPACK_IMPORTED_MODULE_1__["VolumeChunkEncoding"].JPEG) ||
            (params.encoding === neuroglancer_datasource_dvid_base__WEBPACK_IMPORTED_MODULE_1__["VolumeChunkEncoding"].RAW)) {
            return neuroglancer_sliceview_backend_chunk_decoders_jpeg__WEBPACK_IMPORTED_MODULE_6__["decodeJpegChunk"];
        }
        else {
            // encoding is COMPRESSED_SEGMENTATION
            return neuroglancer_sliceview_backend_chunk_decoders_compressed_segmentation__WEBPACK_IMPORTED_MODULE_5__["decodeCompressedSegmentationChunk"];
        }
    }
};
DVIDVolumeChunkSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__["registerSharedObject"])()
], DVIDVolumeChunkSource);



/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/dvid/base.ts":
/*!************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/dvid/base.ts ***!
  \************************************************************************************************************/
/*! exports provided: VolumeChunkEncoding, DVIDSourceParameters, VolumeChunkSourceParameters, SkeletonSourceParameters, MeshSourceParameters */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VolumeChunkEncoding", function() { return VolumeChunkEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DVIDSourceParameters", function() { return DVIDSourceParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VolumeChunkSourceParameters", function() { return VolumeChunkSourceParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SkeletonSourceParameters", function() { return SkeletonSourceParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshSourceParameters", function() { return MeshSourceParameters; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var VolumeChunkEncoding;
(function (VolumeChunkEncoding) {
    VolumeChunkEncoding[VolumeChunkEncoding["JPEG"] = 0] = "JPEG";
    VolumeChunkEncoding[VolumeChunkEncoding["RAW"] = 1] = "RAW";
    VolumeChunkEncoding[VolumeChunkEncoding["COMPRESSED_SEGMENTATION"] = 2] = "COMPRESSED_SEGMENTATION";
    VolumeChunkEncoding[VolumeChunkEncoding["COMPRESSED_SEGMENTATIONARRAY"] = 3] = "COMPRESSED_SEGMENTATIONARRAY";
})(VolumeChunkEncoding || (VolumeChunkEncoding = {}));
class DVIDSourceParameters {
}
class VolumeChunkSourceParameters extends DVIDSourceParameters {
}
VolumeChunkSourceParameters.RPC_ID = 'dvid/VolumeChunkSource';
class SkeletonSourceParameters extends DVIDSourceParameters {
}
SkeletonSourceParameters.RPC_ID = 'dvid/SkeletonSource';
class MeshSourceParameters extends DVIDSourceParameters {
}
MeshSourceParameters.RPC_ID = 'dvid/MeshSource';


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/graphene/backend.ts":
/*!*******************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/graphene/backend.ts ***!
  \*******************************************************************************************************************/
/*! exports provided: GrapheneVolumeChunkSource, decodeChunkedGraphChunk, GrapheneChunkedGraphChunkSource, decodeManifestChunk, decodeFragmentChunk, decodeDracoFragmentChunk, GrapheneMeshSource, GrapheneSkeletonSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GrapheneVolumeChunkSource", function() { return GrapheneVolumeChunkSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeChunkedGraphChunk", function() { return decodeChunkedGraphChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GrapheneChunkedGraphChunkSource", function() { return GrapheneChunkedGraphChunkSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeManifestChunk", function() { return decodeManifestChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeFragmentChunk", function() { return decodeFragmentChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeDracoFragmentChunk", function() { return decodeDracoFragmentChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GrapheneMeshSource", function() { return GrapheneMeshSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GrapheneSkeletonSource", function() { return GrapheneSkeletonSource; });
/* harmony import */ var neuroglancer_async_computation_decode_gzip_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/async_computation/decode_gzip_request */ "../../../../../../neuroglancer/src/neuroglancer/async_computation/decode_gzip_request.ts");
/* harmony import */ var neuroglancer_async_computation_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/async_computation/request */ "../../../../../../neuroglancer/src/neuroglancer/async_computation/request.ts");
/* harmony import */ var neuroglancer_authentication_backend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/authentication/backend */ "../../../../../../neuroglancer/src/neuroglancer/authentication/backend.ts");
/* harmony import */ var neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/chunk_manager/backend */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/backend.ts");
/* harmony import */ var neuroglancer_chunk_manager_generic_file_source__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! neuroglancer/chunk_manager/generic_file_source */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/generic_file_source.ts");
/* harmony import */ var neuroglancer_datasource_graphene_base__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! neuroglancer/datasource/graphene/base */ "../../../../../../neuroglancer/src/neuroglancer/datasource/graphene/base.ts");
/* harmony import */ var neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! neuroglancer/mesh/backend */ "../../../../../../neuroglancer/src/neuroglancer/mesh/backend.ts");
/* harmony import */ var neuroglancer_skeleton_backend__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! neuroglancer/skeleton/backend */ "../../../../../../neuroglancer/src/neuroglancer/skeleton/backend.ts");
/* harmony import */ var neuroglancer_skeleton_decode_precomputed_skeleton__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! neuroglancer/skeleton/decode_precomputed_skeleton */ "../../../../../../neuroglancer/src/neuroglancer/skeleton/decode_precomputed_skeleton.ts");
/* harmony import */ var neuroglancer_sliceview_backend_chunk_decoders_compressed_segmentation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! neuroglancer/sliceview/backend_chunk_decoders/compressed_segmentation */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/compressed_segmentation.ts");
/* harmony import */ var neuroglancer_sliceview_backend_chunk_decoders_jpeg__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! neuroglancer/sliceview/backend_chunk_decoders/jpeg */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/jpeg.ts");
/* harmony import */ var neuroglancer_sliceview_backend_chunk_decoders_raw__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! neuroglancer/sliceview/backend_chunk_decoders/raw */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/raw.ts");
/* harmony import */ var neuroglancer_sliceview_chunked_graph_backend__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! neuroglancer/sliceview/chunked_graph/backend */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/chunked_graph/backend.ts");
/* harmony import */ var neuroglancer_sliceview_volume_backend__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! neuroglancer/sliceview/volume/backend */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/volume/backend.ts");
/* harmony import */ var neuroglancer_util_byte_range_http_requests__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! neuroglancer/util/byte_range_http_requests */ "../../../../../../neuroglancer/src/neuroglancer/util/byte_range_http_requests.ts");
/* harmony import */ var neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! neuroglancer/util/endian */ "../../../../../../neuroglancer/src/neuroglancer/util/endian.ts");
/* harmony import */ var neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! neuroglancer/util/http_request */ "../../../../../../neuroglancer/src/neuroglancer/util/http_request.ts");
/* harmony import */ var neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! neuroglancer/util/json */ "../../../../../../neuroglancer/src/neuroglancer/util/json.ts");
/* harmony import */ var neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! neuroglancer/util/uint64 */ "../../../../../../neuroglancer/src/neuroglancer/util/uint64.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/**
 * @license
 * Copyright 2019 The Neuroglancer Authors
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};





















const DracoLoader = __webpack_require__(/*! dracoloader */ "../../../../../../neuroglancer/third_party/draco/draco_loader.js");
function getMinishardIndexDataSource(chunkManager, parameters) {
    const { url, sharding, layer } = parameters;
    if (sharding === undefined)
        return undefined;
    const source = neuroglancer_chunk_manager_generic_file_source__WEBPACK_IMPORTED_MODULE_4__["GenericSharedDataSource"].get(chunkManager, Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_17__["stableStringify"])({ type: 'graphene:shardedDataSource', url, sharding }), {
        download: async function (shardFileAndMiniShard, cancellationToken) {
            const parts = shardFileAndMiniShard.split(':');
            const shardFile = parts[0];
            const miniShard = neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"].parseString(parts[1]);
            const shardUrl = `${url}/initial/${layer}/${shardFile}`;
            // Retrive miniShard index start/end offsets.
            const shardIndexSize = new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"](16);
            neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"].lshift(shardIndexSize, shardIndexSize, sharding.minishardBits);
            // Multiply miniShard by 16.
            const shardIndexStart = neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"].lshift(new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"](), miniShard, 4);
            const shardIndexEnd = neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"].addUint32(new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"](), shardIndexStart, 16);
            const shardIndexResponse = await Object(neuroglancer_util_byte_range_http_requests__WEBPACK_IMPORTED_MODULE_14__["fetchHttpByteRange"])(shardUrl, shardIndexStart, shardIndexEnd, cancellationToken);
            if (shardIndexResponse.byteLength !== 16) {
                throw new Error(`Failed to retrieve miniShard offset`);
            }
            const shardIndexDv = new DataView(shardIndexResponse);
            const minishardStartOffset = new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"](shardIndexDv.getUint32(0, /*littleEndian=*/ true), shardIndexDv.getUint32(4, /*littleEndian=*/ true));
            const minishardEndOffset = new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"](shardIndexDv.getUint32(8, /*littleEndian=*/ true), shardIndexDv.getUint32(12, /*littleEndian=*/ true));
            if (neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"].equal(minishardStartOffset, minishardEndOffset)) {
                throw new Error('Object not found');
            }
            // The start/end offsets in the shard index are relative to the end of the shard
            // index.
            neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"].add(minishardStartOffset, minishardStartOffset, shardIndexSize);
            neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"].add(minishardEndOffset, minishardEndOffset, shardIndexSize);
            let minishardIndexResponse = await Object(neuroglancer_util_byte_range_http_requests__WEBPACK_IMPORTED_MODULE_14__["fetchHttpByteRange"])(shardUrl, minishardStartOffset, minishardEndOffset, cancellationToken);
            if (sharding.minishardIndexEncoding === neuroglancer_datasource_graphene_base__WEBPACK_IMPORTED_MODULE_5__["DataEncoding"].GZIP) {
                minishardIndexResponse =
                    (await Object(neuroglancer_async_computation_request__WEBPACK_IMPORTED_MODULE_1__["requestAsyncComputation"])(neuroglancer_async_computation_decode_gzip_request__WEBPACK_IMPORTED_MODULE_0__["decodeGzip"], cancellationToken, [minishardIndexResponse], new Uint8Array(minishardIndexResponse)))
                        .buffer;
            }
            if ((minishardIndexResponse.byteLength % 24) !== 0) {
                throw new Error(`Invalid miniShard index length: ${minishardIndexResponse.byteLength}`);
            }
            const minishardIndex = new Uint32Array(minishardIndexResponse);
            Object(neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_15__["convertEndian32"])(minishardIndex, neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_15__["Endianness"].LITTLE);
            const minishardIndexSize = minishardIndex.byteLength / 24;
            let prevEntryKeyLow = 0, prevEntryKeyHigh = 0;
            // Offsets in the miniShard index are relative to the end of the shard index.
            let prevStartLow = shardIndexSize.low, prevStartHigh = shardIndexSize.high;
            for (let i = 0; i < minishardIndexSize; ++i) {
                let entryKeyLow = prevEntryKeyLow + minishardIndex[i * 2];
                let entryKeyHigh = prevEntryKeyHigh + minishardIndex[i * 2 + 1];
                if (entryKeyLow >= 4294967296) {
                    entryKeyLow -= 4294967296;
                    entryKeyHigh += 1;
                }
                prevEntryKeyLow = minishardIndex[i * 2] = entryKeyLow;
                prevEntryKeyHigh = minishardIndex[i * 2 + 1] = entryKeyHigh;
                let startLow = prevStartLow + minishardIndex[(minishardIndexSize + i) * 2];
                let startHigh = prevStartHigh + minishardIndex[(minishardIndexSize + i) * 2 + 1];
                if (startLow >= 4294967296) {
                    startLow -= 4294967296;
                    startHigh += 1;
                }
                minishardIndex[(minishardIndexSize + i) * 2] = startLow;
                minishardIndex[(minishardIndexSize + i) * 2 + 1] = startHigh;
                const sizeLow = minishardIndex[(2 * minishardIndexSize + i) * 2];
                const sizeHigh = minishardIndex[(2 * minishardIndexSize + i) * 2 + 1];
                let endLow = startLow + sizeLow;
                let endHigh = startHigh + sizeHigh;
                if (endLow >= 4294967296) {
                    endLow -= 4294967296;
                    endHigh += 1;
                }
                prevStartLow = endLow;
                prevStartHigh = endHigh;
                minishardIndex[(2 * minishardIndexSize + i) * 2] = endLow;
                minishardIndex[(2 * minishardIndexSize + i) * 2 + 1] = endHigh;
            }
            return { data: { data: minishardIndex, shardUrl }, size: minishardIndex.byteLength };
        },
        encodeKey: (key) => key,
        sourceQueueLevel: 1,
    });
    source.sharding = sharding;
    return source;
}
function getGrapheneMinishardIndexDataSources(chunkManager, parameters) {
    const { url, sharding } = parameters;
    if (sharding === undefined)
        return undefined;
    const sources = new Array();
    for (const index in sharding) {
        const layer = Number(index);
        sources[layer] = getMinishardIndexDataSource(chunkManager, { url: url, sharding: sharding[layer], layer: layer });
    }
    return sources;
}
function findMinishardEntry(minishardIndex, key) {
    const minishardIndexData = minishardIndex.data;
    const minishardIndexSize = minishardIndexData.length / 6;
    const keyLow = key.low, keyHigh = key.high;
    for (let i = 0; i < minishardIndexSize; ++i) {
        if (minishardIndexData[i * 2] !== keyLow || minishardIndexData[i * 2 + 1] !== keyHigh) {
            continue;
        }
        const startOffset = new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"](minishardIndexData[(minishardIndexSize + i) * 2], minishardIndexData[(minishardIndexSize + i) * 2 + 1]);
        const endOffset = new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"](minishardIndexData[(2 * minishardIndexSize + i) * 2], minishardIndexData[(2 * minishardIndexSize + i) * 2 + 1]);
        return { startOffset, endOffset };
    }
    throw new Error(`Object not found in minishard: ${key}`);
}
async function getShardedData(minishardIndexSource, chunk, key, cancellationToken) {
    const parts = chunk.fragmentId.split(':');
    const getPriority = () => ({ priorityTier: chunk.priorityTier, priority: chunk.priority });
    const minishardIndex = await minishardIndexSource.getData(`${parts[3]}:${parts[4]}`, getPriority, cancellationToken);
    const { startOffset, endOffset } = findMinishardEntry(minishardIndex, key);
    let data = await Object(neuroglancer_util_byte_range_http_requests__WEBPACK_IMPORTED_MODULE_14__["fetchHttpByteRange"])(minishardIndex.shardUrl, startOffset, endOffset, cancellationToken);
    if (minishardIndexSource.sharding.dataEncoding === neuroglancer_datasource_graphene_base__WEBPACK_IMPORTED_MODULE_5__["DataEncoding"].GZIP) {
        data =
            (await Object(neuroglancer_async_computation_request__WEBPACK_IMPORTED_MODULE_1__["requestAsyncComputation"])(neuroglancer_async_computation_decode_gzip_request__WEBPACK_IMPORTED_MODULE_0__["decodeGzip"], cancellationToken, [data], new Uint8Array(data)))
                .buffer;
    }
    return { data, shardInfo: { shardUrl: minishardIndex.shardUrl, offset: startOffset } };
}
const chunkDecoders = new Map();
chunkDecoders.set(neuroglancer_datasource_graphene_base__WEBPACK_IMPORTED_MODULE_5__["VolumeChunkEncoding"].RAW, neuroglancer_sliceview_backend_chunk_decoders_raw__WEBPACK_IMPORTED_MODULE_11__["decodeRawChunk"]);
chunkDecoders.set(neuroglancer_datasource_graphene_base__WEBPACK_IMPORTED_MODULE_5__["VolumeChunkEncoding"].JPEG, neuroglancer_sliceview_backend_chunk_decoders_jpeg__WEBPACK_IMPORTED_MODULE_10__["decodeJpegChunk"]);
chunkDecoders.set(neuroglancer_datasource_graphene_base__WEBPACK_IMPORTED_MODULE_5__["VolumeChunkEncoding"].COMPRESSED_SEGMENTATION, neuroglancer_sliceview_backend_chunk_decoders_compressed_segmentation__WEBPACK_IMPORTED_MODULE_9__["decodeCompressedSegmentationChunk"]);
let GrapheneVolumeChunkSource = class GrapheneVolumeChunkSource extends (Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_3__["WithParameters"])(neuroglancer_sliceview_volume_backend__WEBPACK_IMPORTED_MODULE_13__["VolumeChunkSource"], neuroglancer_datasource_graphene_base__WEBPACK_IMPORTED_MODULE_5__["VolumeChunkSourceParameters"])) {
    constructor() {
        super(...arguments);
        this.chunkDecoder = chunkDecoders.get(this.parameters.encoding);
    }
    async download(chunk, cancellationToken) {
        const { parameters } = this;
        let url;
        {
            // chunkPosition must not be captured, since it will be invalidated by the next call to
            // computeChunkBounds.
            let chunkPosition = this.computeChunkBounds(chunk);
            let chunkDataSize = chunk.chunkDataSize;
            url = `${parameters.url}/${chunkPosition[0]}-${chunkPosition[0] + chunkDataSize[0]}_` +
                `${chunkPosition[1]}-${chunkPosition[1] + chunkDataSize[1]}_` +
                `${chunkPosition[2]}-${chunkPosition[2] + chunkDataSize[2]}`;
        }
        const response = await Object(neuroglancer_authentication_backend__WEBPACK_IMPORTED_MODULE_2__["authFetch"])(url, {}, neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_16__["responseArrayBuffer"], cancellationToken);
        await this.chunkDecoder(chunk, cancellationToken, response);
    }
};
GrapheneVolumeChunkSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_19__["registerSharedObject"])()
], GrapheneVolumeChunkSource);

function decodeChunkedGraphChunk(chunk, rootObjectKeys, response) {
    return Object(neuroglancer_sliceview_chunked_graph_backend__WEBPACK_IMPORTED_MODULE_12__["decodeSupervoxelArray"])(chunk, rootObjectKeys, response);
}
let GrapheneChunkedGraphChunkSource = class GrapheneChunkedGraphChunkSource extends (Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_3__["WithParameters"])(neuroglancer_sliceview_chunked_graph_backend__WEBPACK_IMPORTED_MODULE_12__["ChunkedGraphChunkSource"], neuroglancer_datasource_graphene_base__WEBPACK_IMPORTED_MODULE_5__["ChunkedGraphSourceParameters"])) {
    async download(chunk, cancellationToken) {
        let { parameters } = this;
        let chunkPosition = this.computeChunkBounds(chunk);
        let chunkDataSize = chunk.chunkDataSize;
        let bounds = `${chunkPosition[0]}-${chunkPosition[0] + chunkDataSize[0]}_` +
            `${chunkPosition[1]}-${chunkPosition[1] + chunkDataSize[1]}_` +
            `${chunkPosition[2]}-${chunkPosition[2] + chunkDataSize[2]}`;
        let promises = Array();
        let promise;
        const keysToRequest = [];
        for (const [key, val] of chunk.mappings.entries()) {
            if (val === null) {
                keysToRequest.push(key);
            }
        }
        if (keysToRequest.length > 0) {
            promise = Object(neuroglancer_authentication_backend__WEBPACK_IMPORTED_MODULE_2__["authFetch"])(`${parameters.url}/leaves_many?int64_as_str=1&bounds=${bounds}`, {
                method: 'POST',
                body: JSON.stringify({
                    'node_ids': keysToRequest,
                })
            }, neuroglancer_authentication_backend__WEBPACK_IMPORTED_MODULE_2__["responseIdentity"], cancellationToken, false);
            promises.push(this.withErrorMessage(promise, `Fetching leaves of segments in region ${bounds}: `)
                .then(res => decodeChunkedGraphChunk(chunk, keysToRequest, res))
                .catch(err => console.error(err)));
        }
        await Promise.all(promises);
    }
    async withErrorMessage(promise, errorPrefix) {
        const response = await promise;
        if (response.ok) {
            return response;
        }
        else {
            let msg;
            try {
                msg = (await response.json())['message'];
            }
            catch (_a) {
                msg = await response.text();
            }
            throw new Error(`[${response.status}] ${errorPrefix}${msg}`);
        }
    }
};
GrapheneChunkedGraphChunkSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_19__["registerSharedObject"])()
], GrapheneChunkedGraphChunkSource);

function decodeManifestChunk(chunk, response) {
    return Object(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_6__["decodeJsonManifestChunk"])(chunk, response, 'fragments');
}
function decodeFragmentChunk(chunk, response) {
    let dv = new DataView(response);
    let numVertices = dv.getUint32(0, true);
    Object(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_6__["assignMeshFragmentData"])(chunk, Object(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_6__["decodeTriangleVertexPositionsAndIndices"])(response, neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_15__["Endianness"].LITTLE, /*vertexByteOffset=*/ 4, numVertices));
}
function decodeDracoFragmentChunk(chunk, response, decoderModule) {
    Object(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_6__["assignMeshFragmentData"])(chunk, Object(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_6__["decodeTriangleVertexPositionsAndIndicesDraco"])(response, decoderModule));
}
async function getUnverifiedFragmentPromise(chunk, parameters, minishardIndexSources, cancellationToken) {
    if (chunk.fragmentId && chunk.fragmentId.charAt(0) === '~') {
        let objectId = neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"].parseString(chunk.key);
        let layer = Number(chunk.fragmentId.substr(1).split(':')[1]);
        let data;
        ({ data } =
            await getShardedData(minishardIndexSources[layer], chunk, objectId, cancellationToken));
        return Promise.resolve(data);
    }
    return Object(neuroglancer_authentication_backend__WEBPACK_IMPORTED_MODULE_2__["authFetch"])(`${parameters.fragmentUrl}/dynamic/${chunk.fragmentId}`, {}, neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_16__["responseArrayBuffer"], cancellationToken);
}
function getVerifiedFragmentPromise(chunk, parameters, cancellationToken) {
    if (chunk.fragmentId && chunk.fragmentId.charAt(0) === '~') {
        let parts = chunk.fragmentId.substr(1).split(':');
        let startOffset, endOffset;
        startOffset = Number(parts[1]);
        endOffset = startOffset + Number(parts[2]);
        return Object(neuroglancer_util_byte_range_http_requests__WEBPACK_IMPORTED_MODULE_14__["fetchHttpByteRange"])(`${parameters.fragmentUrl}/initial/${parts[0]}`, startOffset, endOffset, cancellationToken);
    }
    return Object(neuroglancer_authentication_backend__WEBPACK_IMPORTED_MODULE_2__["authFetch"])(`${parameters.fragmentUrl}/dynamic/${chunk.fragmentId}`, {}, neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_16__["responseArrayBuffer"], cancellationToken);
}
function getFragmentDownloadPromise(chunk, parameters, minishardIndexSources, cancellationToken) {
    let fragmentDownloadPromise;
    if (parameters.sharding) {
        if (chunk.verifyFragment !== undefined && !chunk.verifyFragment) {
            // Download shard fragments without verification
            fragmentDownloadPromise =
                getUnverifiedFragmentPromise(chunk, parameters, minishardIndexSources, cancellationToken);
        }
        else {
            // Download shard fragments with verification (response contains size and offset)
            fragmentDownloadPromise = getVerifiedFragmentPromise(chunk, parameters, cancellationToken);
        }
    }
    else {
        fragmentDownloadPromise = Object(neuroglancer_authentication_backend__WEBPACK_IMPORTED_MODULE_2__["authFetch"])(`${parameters.fragmentUrl}/${chunk.fragmentId}`, {}, neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_16__["responseArrayBuffer"], cancellationToken);
    }
    return fragmentDownloadPromise;
}
let GrapheneMeshSource = class GrapheneMeshSource extends (Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_3__["WithParameters"])(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_6__["MeshSource"], neuroglancer_datasource_graphene_base__WEBPACK_IMPORTED_MODULE_5__["MeshSourceParameters"])) {
    async download(chunk, cancellationToken) {
        const { parameters } = this;
        let url = `${parameters.manifestUrl}/manifest`;
        let manifestUrl = `${url}/${chunk.objectId}:${parameters.lod}?verify=1&prepend_seg_ids=1`;
        // speculative manifest isn't working all the time
        // race condition is the prime suspect so use verify=true
        chunk.verifyFragments = true;
        // parameters.sharding is a proxy for mesh format
        // if undefined, mesh format is old else new
        if (parameters.sharding !== undefined) {
            chunk.manifestType = neuroglancer_datasource_graphene_base__WEBPACK_IMPORTED_MODULE_5__["GRAPHENE_MANIFEST_SHARDED"];
            if (this.minishardIndexSources === undefined) {
                this.minishardIndexSources = getGrapheneMinishardIndexDataSources(this.chunkManager, { url: parameters.fragmentUrl, sharding: parameters.sharding });
            }
            if (!chunk.verifyFragments) {
                manifestUrl = `${url}/${chunk.objectId}:${parameters.lod}?verify=0&prepend_seg_ids=1`;
            }
        }
        await Object(neuroglancer_authentication_backend__WEBPACK_IMPORTED_MODULE_2__["authFetch"])(manifestUrl, {}, neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_16__["responseJson"], cancellationToken)
            .then(response => decodeManifestChunk(chunk, response));
    }
    async downloadFragment(chunk, cancellationToken) {
        const { parameters, minishardIndexSources } = this;
        const fragmentDownloadPromise = getFragmentDownloadPromise(chunk, parameters, minishardIndexSources, cancellationToken);
        const dracoModulePromise = DracoLoader.default;
        const readyToDecode = Promise.all([fragmentDownloadPromise, dracoModulePromise]);
        return readyToDecode.then(response => {
            try {
                decodeDracoFragmentChunk(chunk, response[0], response[1].decoderModule);
            }
            catch (err) {
                if (err instanceof TypeError) {
                    // not a draco mesh
                    decodeFragmentChunk(chunk, response[0]);
                }
            }
        }, error => {
            if (error instanceof neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_16__["HttpError"] && error.status == 404) {
                chunk.source.removeChunk(chunk);
            }
            Promise.reject(error);
        });
    }
};
GrapheneMeshSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_19__["registerSharedObject"])() //
], GrapheneMeshSource);

let GrapheneSkeletonSource = class GrapheneSkeletonSource extends (Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_3__["WithParameters"])(neuroglancer_skeleton_backend__WEBPACK_IMPORTED_MODULE_7__["SkeletonSource"], neuroglancer_datasource_graphene_base__WEBPACK_IMPORTED_MODULE_5__["SkeletonSourceParameters"])) {
    constructor() {
        super(...arguments);
        this.minishardIndexSource = getMinishardIndexDataSource(this.chunkManager, { url: this.parameters.url, sharding: this.parameters.metadata.sharding, layer: 0 });
    }
    async download(chunk, cancellationToken) {
        const { minishardIndexSource, parameters } = this;
        let response;
        if (minishardIndexSource === undefined) {
            response = await Object(neuroglancer_authentication_backend__WEBPACK_IMPORTED_MODULE_2__["authFetch"])(`${parameters.url}/${chunk.objectId}`, {}, neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_16__["responseArrayBuffer"], cancellationToken);
        }
        else {
            response =
                (await getShardedData(minishardIndexSource, chunk, chunk.objectId, cancellationToken))
                    .data;
        }
        Object(neuroglancer_skeleton_decode_precomputed_skeleton__WEBPACK_IMPORTED_MODULE_8__["decodeSkeletonChunk"])(chunk, response, parameters.metadata.vertexAttributes);
    }
};
GrapheneSkeletonSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_19__["registerSharedObject"])() //
], GrapheneSkeletonSource);

Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_19__["registerPromiseRPC"])(neuroglancer_datasource_graphene_base__WEBPACK_IMPORTED_MODULE_5__["GRAPHENE_MANIFEST_REFRESH_PROMISE"], function (x, cancellationToken) {
    let obj = this.get(x['rpcId']);
    let manifestChunk = obj.getChunk(neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"].parseString(x['segment']));
    return obj.download(manifestChunk, cancellationToken).then(() => {
        manifestChunk.downloadSucceeded();
        return { value: JSON.stringify(new Response()) };
    });
});


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/graphene/base.ts":
/*!****************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/graphene/base.ts ***!
  \****************************************************************************************************************/
/*! exports provided: PYCG_APP_VERSION, GRAPHENE_MANIFEST_SHARDED, GRAPHENE_MANIFEST_REFRESH_PROMISE, VolumeChunkEncoding, VolumeChunkSourceParameters, ChunkedGraphSourceParameters, MeshSourceParameters, DataEncoding, ShardingHashFunction, MultiscaleMeshMetadata, MultiscaleMeshSourceParameters, SkeletonSourceParameters */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PYCG_APP_VERSION", function() { return PYCG_APP_VERSION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GRAPHENE_MANIFEST_SHARDED", function() { return GRAPHENE_MANIFEST_SHARDED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GRAPHENE_MANIFEST_REFRESH_PROMISE", function() { return GRAPHENE_MANIFEST_REFRESH_PROMISE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VolumeChunkEncoding", function() { return VolumeChunkEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VolumeChunkSourceParameters", function() { return VolumeChunkSourceParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChunkedGraphSourceParameters", function() { return ChunkedGraphSourceParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshSourceParameters", function() { return MeshSourceParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataEncoding", function() { return DataEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShardingHashFunction", function() { return ShardingHashFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiscaleMeshMetadata", function() { return MultiscaleMeshMetadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiscaleMeshSourceParameters", function() { return MultiscaleMeshSourceParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SkeletonSourceParameters", function() { return SkeletonSourceParameters; });
/**
 * @license
 * Copyright 2019 The Neuroglancer Authors
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const PYCG_APP_VERSION = 1;
const GRAPHENE_MANIFEST_SHARDED = 'GrapheneSharded';
const GRAPHENE_MANIFEST_REFRESH_PROMISE = 'GrapheneMeshSource.RefreshManifestPromise';
var VolumeChunkEncoding;
(function (VolumeChunkEncoding) {
    VolumeChunkEncoding[VolumeChunkEncoding["RAW"] = 0] = "RAW";
    VolumeChunkEncoding[VolumeChunkEncoding["JPEG"] = 1] = "JPEG";
    VolumeChunkEncoding[VolumeChunkEncoding["COMPRESSED_SEGMENTATION"] = 2] = "COMPRESSED_SEGMENTATION";
})(VolumeChunkEncoding || (VolumeChunkEncoding = {}));
class VolumeChunkSourceParameters {
}
VolumeChunkSourceParameters.RPC_ID = 'graphene/VolumeChunkSource';
class ChunkedGraphSourceParameters {
}
ChunkedGraphSourceParameters.RPC_ID = 'graphene/ChunkedGraphSource';
class MeshSourceParameters {
}
MeshSourceParameters.RPC_ID = 'graphene/MeshSource';
var DataEncoding;
(function (DataEncoding) {
    DataEncoding[DataEncoding["RAW"] = 0] = "RAW";
    DataEncoding[DataEncoding["GZIP"] = 1] = "GZIP";
})(DataEncoding || (DataEncoding = {}));
var ShardingHashFunction;
(function (ShardingHashFunction) {
    ShardingHashFunction[ShardingHashFunction["IDENTITY"] = 0] = "IDENTITY";
    ShardingHashFunction[ShardingHashFunction["MURMURHASH3_X86_128"] = 1] = "MURMURHASH3_X86_128";
})(ShardingHashFunction || (ShardingHashFunction = {}));
class MultiscaleMeshMetadata {
}
class MultiscaleMeshSourceParameters {
}
MultiscaleMeshSourceParameters.RPC_ID = 'graphene/MultiscaleMeshSource';
class SkeletonSourceParameters {
}
SkeletonSourceParameters.RPC_ID = 'graphene/SkeletonSource';


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/n5/backend.ts":
/*!*************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/n5/backend.ts ***!
  \*************************************************************************************************************/
/*! exports provided: PrecomputedVolumeChunkSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrecomputedVolumeChunkSource", function() { return PrecomputedVolumeChunkSource; });
/* harmony import */ var neuroglancer_async_computation_decode_gzip_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/async_computation/decode_gzip_request */ "../../../../../../neuroglancer/src/neuroglancer/async_computation/decode_gzip_request.ts");
/* harmony import */ var neuroglancer_async_computation_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/async_computation/request */ "../../../../../../neuroglancer/src/neuroglancer/async_computation/request.ts");
/* harmony import */ var neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/chunk_manager/backend */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/backend.ts");
/* harmony import */ var neuroglancer_datasource_n5_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/datasource/n5/base */ "../../../../../../neuroglancer/src/neuroglancer/datasource/n5/base.ts");
/* harmony import */ var neuroglancer_sliceview_backend_chunk_decoders_raw__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! neuroglancer/sliceview/backend_chunk_decoders/raw */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/raw.ts");
/* harmony import */ var neuroglancer_sliceview_volume_backend__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! neuroglancer/sliceview/volume/backend */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/volume/backend.ts");
/* harmony import */ var neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! neuroglancer/util/endian */ "../../../../../../neuroglancer/src/neuroglancer/util/endian.ts");
/* harmony import */ var neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! neuroglancer/util/geom */ "../../../../../../neuroglancer/src/neuroglancer/util/geom.ts");
/* harmony import */ var neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! neuroglancer/util/http_request */ "../../../../../../neuroglancer/src/neuroglancer/util/http_request.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/**
 * @license
 * Copyright 2019 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};










async function decodeChunk(chunk, cancellationToken, response, encoding) {
    const dv = new DataView(response);
    const mode = dv.getUint16(0, /*littleEndian=*/ false);
    if (mode !== 0) {
        throw new Error(`Unsupported mode: ${mode}.`);
    }
    const numDimensions = dv.getUint16(2, /*littleEndian=*/ false);
    if (numDimensions !== 3) {
        throw new Error(`Number of dimensions must be 3.`);
    }
    let offset = 4;
    const shape = new Uint32Array(numDimensions);
    for (let i = 0; i < numDimensions; ++i) {
        shape[i] = dv.getUint32(offset, /*littleEndian=*/ false);
        offset += 4;
    }
    chunk.chunkDataSize = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_7__["vec3"].fromValues(shape[0], shape[1], shape[2]);
    let buffer = new Uint8Array(response, offset);
    if (encoding === neuroglancer_datasource_n5_base__WEBPACK_IMPORTED_MODULE_3__["VolumeChunkEncoding"].GZIP) {
        buffer = await Object(neuroglancer_async_computation_request__WEBPACK_IMPORTED_MODULE_1__["requestAsyncComputation"])(neuroglancer_async_computation_decode_gzip_request__WEBPACK_IMPORTED_MODULE_0__["decodeGzip"], cancellationToken, [buffer.buffer], buffer);
    }
    await Object(neuroglancer_sliceview_backend_chunk_decoders_raw__WEBPACK_IMPORTED_MODULE_4__["decodeRawChunk"])(chunk, cancellationToken, buffer.buffer, neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_6__["Endianness"].BIG, buffer.byteOffset, buffer.byteLength);
}
let PrecomputedVolumeChunkSource = class PrecomputedVolumeChunkSource extends (Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_2__["WithParameters"])(neuroglancer_sliceview_volume_backend__WEBPACK_IMPORTED_MODULE_5__["VolumeChunkSource"], neuroglancer_datasource_n5_base__WEBPACK_IMPORTED_MODULE_3__["VolumeChunkSourceParameters"])) {
    async download(chunk, cancellationToken) {
        const { parameters } = this;
        const { chunkGridPosition } = chunk;
        const url = `${parameters.url}/${chunkGridPosition[0]}/${chunkGridPosition[1]}/${chunkGridPosition[2]}`;
        const response = await Object(neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_8__["cancellableFetchOk"])(url, {}, neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_8__["responseArrayBuffer"], cancellationToken);
        await decodeChunk(chunk, cancellationToken, response, parameters.encoding);
    }
};
PrecomputedVolumeChunkSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_9__["registerSharedObject"])()
], PrecomputedVolumeChunkSource);



/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/n5/base.ts":
/*!**********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/n5/base.ts ***!
  \**********************************************************************************************************/
/*! exports provided: VolumeChunkEncoding, VolumeChunkSourceParameters */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VolumeChunkEncoding", function() { return VolumeChunkEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VolumeChunkSourceParameters", function() { return VolumeChunkSourceParameters; });
/**
 * @license
 * Copyright 2019 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var VolumeChunkEncoding;
(function (VolumeChunkEncoding) {
    VolumeChunkEncoding[VolumeChunkEncoding["RAW"] = 0] = "RAW";
    VolumeChunkEncoding[VolumeChunkEncoding["GZIP"] = 1] = "GZIP";
})(VolumeChunkEncoding || (VolumeChunkEncoding = {}));
class VolumeChunkSourceParameters {
}
VolumeChunkSourceParameters.RPC_ID = 'n5/VolumeChunkSource';


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/nifti/backend.ts":
/*!****************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/nifti/backend.ts ***!
  \****************************************************************************************************************/
/*! exports provided: NiftiFileData, NiftiVolumeChunkSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NiftiFileData", function() { return NiftiFileData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NiftiVolumeChunkSource", function() { return NiftiVolumeChunkSource; });
/* harmony import */ var neuroglancer_async_computation_decode_gzip_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/async_computation/decode_gzip_request */ "../../../../../../neuroglancer/src/neuroglancer/async_computation/decode_gzip_request.ts");
/* harmony import */ var neuroglancer_async_computation_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/async_computation/request */ "../../../../../../neuroglancer/src/neuroglancer/async_computation/request.ts");
/* harmony import */ var neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/chunk_manager/backend */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/backend.ts");
/* harmony import */ var neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/chunk_manager/base */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/base.ts");
/* harmony import */ var neuroglancer_chunk_manager_generic_file_source__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! neuroglancer/chunk_manager/generic_file_source */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/generic_file_source.ts");
/* harmony import */ var neuroglancer_datasource_nifti_base__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! neuroglancer/datasource/nifti/base */ "../../../../../../neuroglancer/src/neuroglancer/datasource/nifti/base.ts");
/* harmony import */ var neuroglancer_sliceview_backend_chunk_decoders_raw__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! neuroglancer/sliceview/backend_chunk_decoders/raw */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/raw.ts");
/* harmony import */ var neuroglancer_sliceview_volume_backend__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! neuroglancer/sliceview/volume/backend */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/volume/backend.ts");
/* harmony import */ var neuroglancer_sliceview_volume_base__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! neuroglancer/sliceview/volume/base */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/volume/base.ts");
/* harmony import */ var neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! neuroglancer/util/endian */ "../../../../../../neuroglancer/src/neuroglancer/util/endian.ts");
/* harmony import */ var neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! neuroglancer/util/geom */ "../../../../../../neuroglancer/src/neuroglancer/util/geom.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/* harmony import */ var nifti_reader_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! nifti-reader-js */ "../../../../../../neuroglancer/node_modules/nifti-reader-js/src/nifti.js");
/* harmony import */ var nifti_reader_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(nifti_reader_js__WEBPACK_IMPORTED_MODULE_12__);
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};













class NiftiFileData {
}
async function decodeNiftiFile(buffer, cancellationToken) {
    if (Object(nifti_reader_js__WEBPACK_IMPORTED_MODULE_12__["isCompressed"])(buffer)) {
        buffer = (await Object(neuroglancer_async_computation_request__WEBPACK_IMPORTED_MODULE_1__["requestAsyncComputation"])(neuroglancer_async_computation_decode_gzip_request__WEBPACK_IMPORTED_MODULE_0__["decodeGzip"], cancellationToken, [buffer], new Uint8Array(buffer)))
            .buffer;
    }
    let data = new NiftiFileData();
    data.uncompressedData = buffer;
    let header = Object(nifti_reader_js__WEBPACK_IMPORTED_MODULE_12__["readHeader"])(buffer);
    if (header === null) {
        throw new Error('Failed to parse NIFTI header.');
    }
    data.header = header;
    return { data, size: buffer.byteLength };
}
function getNiftiFileData(chunkManager, url, getPriority, cancellationToken) {
    return neuroglancer_chunk_manager_generic_file_source__WEBPACK_IMPORTED_MODULE_4__["GenericSharedDataSource"].getUrl(chunkManager, decodeNiftiFile, url, getPriority, cancellationToken);
}
const NIFTI_HEADER_INFO_PRIORITY = 1000;
function getNiftiHeaderInfo(chunkManager, url, cancellationToken) {
    return getNiftiFileData(chunkManager, url, () => ({ priorityTier: neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_3__["ChunkPriorityTier"].VISIBLE, priority: NIFTI_HEADER_INFO_PRIORITY }), cancellationToken)
        .then(data => data.header);
}
function convertAffine(affine) {
    return neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_10__["mat4"].fromValues(affine[0][0], affine[1][0], affine[2][0], affine[3][0], affine[0][1], affine[1][1], affine[2][1], affine[3][1], affine[0][2], affine[1][2], affine[2][2], affine[3][2], affine[0][3], affine[1][3], affine[2][3], affine[3][3]);
}
const DATA_TYPE_CONVERSIONS = new Map([
    [neuroglancer_datasource_nifti_base__WEBPACK_IMPORTED_MODULE_5__["NiftiDataType"].INT8, { dataType: neuroglancer_sliceview_volume_base__WEBPACK_IMPORTED_MODULE_8__["DataType"].UINT8, volumeType: neuroglancer_sliceview_volume_base__WEBPACK_IMPORTED_MODULE_8__["VolumeType"].IMAGE }],
    [neuroglancer_datasource_nifti_base__WEBPACK_IMPORTED_MODULE_5__["NiftiDataType"].UINT8, { dataType: neuroglancer_sliceview_volume_base__WEBPACK_IMPORTED_MODULE_8__["DataType"].UINT8, volumeType: neuroglancer_sliceview_volume_base__WEBPACK_IMPORTED_MODULE_8__["VolumeType"].IMAGE }],
    [neuroglancer_datasource_nifti_base__WEBPACK_IMPORTED_MODULE_5__["NiftiDataType"].INT16, { dataType: neuroglancer_sliceview_volume_base__WEBPACK_IMPORTED_MODULE_8__["DataType"].UINT16, volumeType: neuroglancer_sliceview_volume_base__WEBPACK_IMPORTED_MODULE_8__["VolumeType"].IMAGE }],
    [neuroglancer_datasource_nifti_base__WEBPACK_IMPORTED_MODULE_5__["NiftiDataType"].UINT16, { dataType: neuroglancer_sliceview_volume_base__WEBPACK_IMPORTED_MODULE_8__["DataType"].UINT16, volumeType: neuroglancer_sliceview_volume_base__WEBPACK_IMPORTED_MODULE_8__["VolumeType"].IMAGE }],
    [neuroglancer_datasource_nifti_base__WEBPACK_IMPORTED_MODULE_5__["NiftiDataType"].INT32, { dataType: neuroglancer_sliceview_volume_base__WEBPACK_IMPORTED_MODULE_8__["DataType"].UINT32, volumeType: neuroglancer_sliceview_volume_base__WEBPACK_IMPORTED_MODULE_8__["VolumeType"].SEGMENTATION }],
    [neuroglancer_datasource_nifti_base__WEBPACK_IMPORTED_MODULE_5__["NiftiDataType"].UINT32, { dataType: neuroglancer_sliceview_volume_base__WEBPACK_IMPORTED_MODULE_8__["DataType"].UINT32, volumeType: neuroglancer_sliceview_volume_base__WEBPACK_IMPORTED_MODULE_8__["VolumeType"].SEGMENTATION }],
    [neuroglancer_datasource_nifti_base__WEBPACK_IMPORTED_MODULE_5__["NiftiDataType"].INT64, { dataType: neuroglancer_sliceview_volume_base__WEBPACK_IMPORTED_MODULE_8__["DataType"].UINT64, volumeType: neuroglancer_sliceview_volume_base__WEBPACK_IMPORTED_MODULE_8__["VolumeType"].SEGMENTATION }],
    [neuroglancer_datasource_nifti_base__WEBPACK_IMPORTED_MODULE_5__["NiftiDataType"].UINT64, { dataType: neuroglancer_sliceview_volume_base__WEBPACK_IMPORTED_MODULE_8__["DataType"].UINT64, volumeType: neuroglancer_sliceview_volume_base__WEBPACK_IMPORTED_MODULE_8__["VolumeType"].SEGMENTATION }],
    [neuroglancer_datasource_nifti_base__WEBPACK_IMPORTED_MODULE_5__["NiftiDataType"].FLOAT32, { dataType: neuroglancer_sliceview_volume_base__WEBPACK_IMPORTED_MODULE_8__["DataType"].FLOAT32, volumeType: neuroglancer_sliceview_volume_base__WEBPACK_IMPORTED_MODULE_8__["VolumeType"].IMAGE }],
]);
Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_11__["registerPromiseRPC"])(neuroglancer_datasource_nifti_base__WEBPACK_IMPORTED_MODULE_5__["GET_NIFTI_VOLUME_INFO_RPC_ID"], function (x, cancellationToken) {
    const chunkManager = this.getRef(x['chunkManager']);
    const headerPromise = getNiftiHeaderInfo(chunkManager, x['url'], cancellationToken);
    chunkManager.dispose();
    return headerPromise.then(header => {
        let dataTypeInfo = DATA_TYPE_CONVERSIONS.get(header.datatypeCode);
        if (dataTypeInfo === undefined) {
            throw new Error(`Unsupported data type: ` +
                `${neuroglancer_datasource_nifti_base__WEBPACK_IMPORTED_MODULE_5__["NiftiDataType"][header.datatypeCode] || header.datatypeCode}.`);
        }
        if (header.dims[4] !== 1) {
            throw new Error(`Time series data not supported.`);
        }
        const spatialUnits = header.xyzt_units & nifti_reader_js__WEBPACK_IMPORTED_MODULE_12__["NIFTI1"].SPATIAL_UNITS_MASK;
        let unitsPerNm = 1;
        switch (spatialUnits) {
            case nifti_reader_js__WEBPACK_IMPORTED_MODULE_12__["NIFTI1"].UNITS_METER:
                unitsPerNm = 1e9;
                break;
            case nifti_reader_js__WEBPACK_IMPORTED_MODULE_12__["NIFTI1"].UNITS_MM:
                unitsPerNm = 1e6;
                break;
            case nifti_reader_js__WEBPACK_IMPORTED_MODULE_12__["NIFTI1"].UNITS_MICRON:
                unitsPerNm = 1e3;
                break;
        }
        const { quatern_b, quatern_c, quatern_d } = header;
        const quatern_a = Math.sqrt(1.0 - quatern_b * quatern_b - quatern_c * quatern_c - quatern_d * quatern_d);
        const qfac = header.pixDims[0] === -1 ? -1 : 1;
        let info = {
            description: header.description,
            affine: convertAffine(header.affine),
            dataType: dataTypeInfo.dataType,
            numChannels: header.dims[5],
            volumeType: dataTypeInfo.volumeType,
            voxelSize: neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_10__["vec3"].fromValues(unitsPerNm * header.pixDims[1], unitsPerNm * header.pixDims[2], unitsPerNm * header.pixDims[3]),
            volumeSize: neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_10__["vec3"].fromValues(header.dims[1], header.dims[2], header.dims[3]),
            qoffset: neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_10__["vec3"].fromValues(unitsPerNm * header.qoffset_x, unitsPerNm * header.qoffset_y, unitsPerNm * header.qoffset_z),
            qform_code: header.qform_code,
            sform_code: header.sform_code,
            qfac: qfac,
            quatern: neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_10__["quat"].fromValues(quatern_b, quatern_c, quatern_d, quatern_a),
        };
        return { value: info };
    });
});
let NiftiVolumeChunkSource = class NiftiVolumeChunkSource extends (Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_2__["WithParameters"])(neuroglancer_sliceview_volume_backend__WEBPACK_IMPORTED_MODULE_7__["VolumeChunkSource"], neuroglancer_datasource_nifti_base__WEBPACK_IMPORTED_MODULE_5__["VolumeSourceParameters"])) {
    async download(chunk, cancellationToken) {
        chunk.chunkDataSize = this.spec.chunkDataSize;
        const data = await getNiftiFileData(this.chunkManager, this.parameters.url, () => ({ priorityTier: chunk.priorityTier, priority: chunk.priority }), cancellationToken);
        const imageBuffer = Object(nifti_reader_js__WEBPACK_IMPORTED_MODULE_12__["readImage"])(data.header, data.uncompressedData);
        await Object(neuroglancer_sliceview_backend_chunk_decoders_raw__WEBPACK_IMPORTED_MODULE_6__["decodeRawChunk"])(chunk, cancellationToken, imageBuffer, data.header.littleEndian ? neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_9__["Endianness"].LITTLE : neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_9__["Endianness"].BIG);
    }
};
NiftiVolumeChunkSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_11__["registerSharedObject"])()
], NiftiVolumeChunkSource);



/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/nifti/base.ts":
/*!*************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/nifti/base.ts ***!
  \*************************************************************************************************************/
/*! exports provided: GET_NIFTI_VOLUME_INFO_RPC_ID, NiftiDataType, VolumeSourceParameters */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GET_NIFTI_VOLUME_INFO_RPC_ID", function() { return GET_NIFTI_VOLUME_INFO_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NiftiDataType", function() { return NiftiDataType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VolumeSourceParameters", function() { return VolumeSourceParameters; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const GET_NIFTI_VOLUME_INFO_RPC_ID = 'nifti/getNiftiVolumeInfo';
var NiftiDataType;
(function (NiftiDataType) {
    NiftiDataType[NiftiDataType["NONE"] = 0] = "NONE";
    NiftiDataType[NiftiDataType["BINARY"] = 1] = "BINARY";
    NiftiDataType[NiftiDataType["UINT8"] = 2] = "UINT8";
    NiftiDataType[NiftiDataType["INT16"] = 4] = "INT16";
    NiftiDataType[NiftiDataType["INT32"] = 8] = "INT32";
    NiftiDataType[NiftiDataType["FLOAT32"] = 16] = "FLOAT32";
    NiftiDataType[NiftiDataType["COMPLEX64"] = 32] = "COMPLEX64";
    NiftiDataType[NiftiDataType["FLOAT64"] = 64] = "FLOAT64";
    NiftiDataType[NiftiDataType["RGB24"] = 128] = "RGB24";
    NiftiDataType[NiftiDataType["INT8"] = 256] = "INT8";
    NiftiDataType[NiftiDataType["UINT16"] = 512] = "UINT16";
    NiftiDataType[NiftiDataType["UINT32"] = 768] = "UINT32";
    NiftiDataType[NiftiDataType["INT64"] = 1024] = "INT64";
    NiftiDataType[NiftiDataType["UINT64"] = 1280] = "UINT64";
    NiftiDataType[NiftiDataType["FLOAT128"] = 1536] = "FLOAT128";
    NiftiDataType[NiftiDataType["COMPLEX128"] = 1792] = "COMPLEX128";
    NiftiDataType[NiftiDataType["COMPLEX256"] = 2048] = "COMPLEX256";
})(NiftiDataType || (NiftiDataType = {}));
class VolumeSourceParameters {
}
VolumeSourceParameters.RPC_ID = 'nifti/VolumeChunkSource';


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/precomputed/backend.ts":
/*!**********************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/precomputed/backend.ts ***!
  \**********************************************************************************************************************/
/*! exports provided: PrecomputedVolumeChunkSource, decodeManifestChunk, decodeFragmentChunk, decodeDracoFragmentChunk, PrecomputedMeshSource, PrecomputedMultiscaleMeshSource, PrecomputedSkeletonSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrecomputedVolumeChunkSource", function() { return PrecomputedVolumeChunkSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeManifestChunk", function() { return decodeManifestChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeFragmentChunk", function() { return decodeFragmentChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeDracoFragmentChunk", function() { return decodeDracoFragmentChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrecomputedMeshSource", function() { return PrecomputedMeshSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrecomputedMultiscaleMeshSource", function() { return PrecomputedMultiscaleMeshSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrecomputedSkeletonSource", function() { return PrecomputedSkeletonSource; });
/* harmony import */ var neuroglancer_async_computation_decode_gzip_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/async_computation/decode_gzip_request */ "../../../../../../neuroglancer/src/neuroglancer/async_computation/decode_gzip_request.ts");
/* harmony import */ var neuroglancer_async_computation_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/async_computation/request */ "../../../../../../neuroglancer/src/neuroglancer/async_computation/request.ts");
/* harmony import */ var neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/chunk_manager/backend */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/backend.ts");
/* harmony import */ var neuroglancer_chunk_manager_generic_file_source__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/chunk_manager/generic_file_source */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/generic_file_source.ts");
/* harmony import */ var neuroglancer_datasource_precomputed_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! neuroglancer/datasource/precomputed/base */ "../../../../../../neuroglancer/src/neuroglancer/datasource/precomputed/base.ts");
/* harmony import */ var neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! neuroglancer/mesh/backend */ "../../../../../../neuroglancer/src/neuroglancer/mesh/backend.ts");
/* harmony import */ var neuroglancer_skeleton_backend__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! neuroglancer/skeleton/backend */ "../../../../../../neuroglancer/src/neuroglancer/skeleton/backend.ts");
/* harmony import */ var neuroglancer_skeleton_decode_precomputed_skeleton__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! neuroglancer/skeleton/decode_precomputed_skeleton */ "../../../../../../neuroglancer/src/neuroglancer/skeleton/decode_precomputed_skeleton.ts");
/* harmony import */ var neuroglancer_sliceview_backend_chunk_decoders_compressed_segmentation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! neuroglancer/sliceview/backend_chunk_decoders/compressed_segmentation */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/compressed_segmentation.ts");
/* harmony import */ var neuroglancer_sliceview_backend_chunk_decoders_jpeg__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! neuroglancer/sliceview/backend_chunk_decoders/jpeg */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/jpeg.ts");
/* harmony import */ var neuroglancer_sliceview_backend_chunk_decoders_raw__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! neuroglancer/sliceview/backend_chunk_decoders/raw */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/raw.ts");
/* harmony import */ var neuroglancer_sliceview_volume_backend__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! neuroglancer/sliceview/volume/backend */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/volume/backend.ts");
/* harmony import */ var neuroglancer_util_byte_range_http_requests__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! neuroglancer/util/byte_range_http_requests */ "../../../../../../neuroglancer/src/neuroglancer/util/byte_range_http_requests.ts");
/* harmony import */ var neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! neuroglancer/util/endian */ "../../../../../../neuroglancer/src/neuroglancer/util/endian.ts");
/* harmony import */ var neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! neuroglancer/util/geom */ "../../../../../../neuroglancer/src/neuroglancer/util/geom.ts");
/* harmony import */ var neuroglancer_util_hash__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! neuroglancer/util/hash */ "../../../../../../neuroglancer/src/neuroglancer/util/hash.ts");
/* harmony import */ var neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! neuroglancer/util/http_request */ "../../../../../../neuroglancer/src/neuroglancer/util/http_request.ts");
/* harmony import */ var neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! neuroglancer/util/json */ "../../../../../../neuroglancer/src/neuroglancer/util/json.ts");
/* harmony import */ var neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! neuroglancer/util/uint64 */ "../../../../../../neuroglancer/src/neuroglancer/util/uint64.ts");
/* harmony import */ var neuroglancer_util_zorder__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! neuroglancer/util/zorder */ "../../../../../../neuroglancer/src/neuroglancer/util/zorder.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/**
 * @license
 * Copyright 2018 The Neuroglancer Authors
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};





















const DracoLoader = __webpack_require__(/*! dracoloader */ "../../../../../../neuroglancer/third_party/draco/draco_loader.js");
const shardingHashFunctions = new Map([
    [
        neuroglancer_datasource_precomputed_base__WEBPACK_IMPORTED_MODULE_4__["ShardingHashFunction"].MURMURHASH3_X86_128,
        (out) => {
            Object(neuroglancer_util_hash__WEBPACK_IMPORTED_MODULE_15__["murmurHash3_x86_128Hash64Bits"])(out, 0, out.low, out.high);
        }
    ],
    [neuroglancer_datasource_precomputed_base__WEBPACK_IMPORTED_MODULE_4__["ShardingHashFunction"].IDENTITY, (_out) => { }],
]);
function getMinishardIndexDataSource(chunkManager, parameters) {
    const { url, sharding } = parameters;
    if (sharding === undefined)
        return undefined;
    const source = neuroglancer_chunk_manager_generic_file_source__WEBPACK_IMPORTED_MODULE_3__["GenericSharedDataSource"].get(chunkManager, Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_17__["stableStringify"])({ type: 'precomputed:shardedDataSource', url, sharding }), {
        download: async function (shardAndMinishard, cancellationToken) {
            const minishard = neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"].lowMask(new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"](), sharding.minishardBits);
            neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"].and(minishard, minishard, shardAndMinishard);
            const shard = neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"].lowMask(new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"](), sharding.shardBits);
            const temp = new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"]();
            neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"].rshift(temp, shardAndMinishard, sharding.minishardBits);
            neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"].and(shard, shard, temp);
            const shardUrl = `${url}/${shard.toString(16).padStart(Math.ceil(sharding.shardBits / 4), '0')}.shard`;
            // Retrive minishard index start/end offsets.
            const shardIndexSize = new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"](16);
            neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"].lshift(shardIndexSize, shardIndexSize, sharding.minishardBits);
            // Multiply minishard by 16.
            const shardIndexStart = neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"].lshift(new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"](), minishard, 4);
            const shardIndexEnd = neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"].addUint32(new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"](), shardIndexStart, 16);
            const shardIndexResponse = await Object(neuroglancer_util_byte_range_http_requests__WEBPACK_IMPORTED_MODULE_12__["fetchHttpByteRange"])(shardUrl, shardIndexStart, shardIndexEnd, cancellationToken);
            if (shardIndexResponse.byteLength !== 16) {
                throw new Error(`Failed to retrieve minishard offset`);
            }
            const shardIndexDv = new DataView(shardIndexResponse);
            const minishardStartOffset = new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"](shardIndexDv.getUint32(0, /*littleEndian=*/ true), shardIndexDv.getUint32(4, /*littleEndian=*/ true));
            const minishardEndOffset = new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"](shardIndexDv.getUint32(8, /*littleEndian=*/ true), shardIndexDv.getUint32(12, /*littleEndian=*/ true));
            if (neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"].equal(minishardStartOffset, minishardEndOffset)) {
                throw new Error('Object not found');
            }
            // The start/end offsets in the shard index are relative to the end of the shard
            // index.
            neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"].add(minishardStartOffset, minishardStartOffset, shardIndexSize);
            neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"].add(minishardEndOffset, minishardEndOffset, shardIndexSize);
            let minishardIndexResponse = await Object(neuroglancer_util_byte_range_http_requests__WEBPACK_IMPORTED_MODULE_12__["fetchHttpByteRange"])(shardUrl, minishardStartOffset, minishardEndOffset, cancellationToken);
            if (sharding.minishardIndexEncoding === neuroglancer_datasource_precomputed_base__WEBPACK_IMPORTED_MODULE_4__["DataEncoding"].GZIP) {
                minishardIndexResponse =
                    (await Object(neuroglancer_async_computation_request__WEBPACK_IMPORTED_MODULE_1__["requestAsyncComputation"])(neuroglancer_async_computation_decode_gzip_request__WEBPACK_IMPORTED_MODULE_0__["decodeGzip"], cancellationToken, [minishardIndexResponse], new Uint8Array(minishardIndexResponse)))
                        .buffer;
            }
            if ((minishardIndexResponse.byteLength % 24) !== 0) {
                throw new Error(`Invalid minishard index length: ${minishardIndexResponse.byteLength}`);
            }
            const minishardIndex = new Uint32Array(minishardIndexResponse);
            Object(neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_13__["convertEndian32"])(minishardIndex, neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_13__["Endianness"].LITTLE);
            const minishardIndexSize = minishardIndex.byteLength / 24;
            let prevEntryKeyLow = 0, prevEntryKeyHigh = 0;
            // Offsets in the minishard index are relative to the end of the shard index.
            let prevStartLow = shardIndexSize.low, prevStartHigh = shardIndexSize.high;
            for (let i = 0; i < minishardIndexSize; ++i) {
                let entryKeyLow = prevEntryKeyLow + minishardIndex[i * 2];
                let entryKeyHigh = prevEntryKeyHigh + minishardIndex[i * 2 + 1];
                if (entryKeyLow >= 4294967296) {
                    entryKeyLow -= 4294967296;
                    entryKeyHigh += 1;
                }
                prevEntryKeyLow = minishardIndex[i * 2] = entryKeyLow;
                prevEntryKeyHigh = minishardIndex[i * 2 + 1] = entryKeyHigh;
                let startLow = prevStartLow + minishardIndex[(minishardIndexSize + i) * 2];
                let startHigh = prevStartHigh + minishardIndex[(minishardIndexSize + i) * 2 + 1];
                if (startLow >= 4294967296) {
                    startLow -= 4294967296;
                    startHigh += 1;
                }
                minishardIndex[(minishardIndexSize + i) * 2] = startLow;
                minishardIndex[(minishardIndexSize + i) * 2 + 1] = startHigh;
                const sizeLow = minishardIndex[(2 * minishardIndexSize + i) * 2];
                const sizeHigh = minishardIndex[(2 * minishardIndexSize + i) * 2 + 1];
                let endLow = startLow + sizeLow;
                let endHigh = startHigh + sizeHigh;
                if (endLow >= 4294967296) {
                    endLow -= 4294967296;
                    endHigh += 1;
                }
                prevStartLow = endLow;
                prevStartHigh = endHigh;
                minishardIndex[(2 * minishardIndexSize + i) * 2] = endLow;
                minishardIndex[(2 * minishardIndexSize + i) * 2 + 1] = endHigh;
            }
            return { data: { data: minishardIndex, shardUrl }, size: minishardIndex.byteLength };
        },
        encodeKey: (key) => key.toString(),
        sourceQueueLevel: 1,
    });
    source.sharding = sharding;
    return source;
}
function findMinishardEntry(minishardIndex, key) {
    const minishardIndexData = minishardIndex.data;
    const minishardIndexSize = minishardIndexData.length / 6;
    const keyLow = key.low, keyHigh = key.high;
    for (let i = 0; i < minishardIndexSize; ++i) {
        if (minishardIndexData[i * 2] !== keyLow || minishardIndexData[i * 2 + 1] !== keyHigh) {
            continue;
        }
        const startOffset = new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"](minishardIndexData[(minishardIndexSize + i) * 2], minishardIndexData[(minishardIndexSize + i) * 2 + 1]);
        const endOffset = new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"](minishardIndexData[(2 * minishardIndexSize + i) * 2], minishardIndexData[(2 * minishardIndexSize + i) * 2 + 1]);
        return { startOffset, endOffset };
    }
    throw new Error(`Object not found in minishard: ${key}`);
}
async function getShardedData(minishardIndexSource, chunk, key, cancellationToken) {
    const { sharding } = minishardIndexSource;
    const hashFunction = shardingHashFunctions.get(sharding.hash);
    const hashCode = neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"].rshift(new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"](), key, sharding.preshiftBits);
    hashFunction(hashCode);
    const shardAndMinishard = neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"].lowMask(new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"](), sharding.minishardBits + sharding.shardBits);
    neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"].and(shardAndMinishard, shardAndMinishard, hashCode);
    const getPriority = () => ({ priorityTier: chunk.priorityTier, priority: chunk.priority });
    const minishardIndex = await minishardIndexSource.getData(shardAndMinishard, getPriority, cancellationToken);
    const { startOffset, endOffset } = findMinishardEntry(minishardIndex, key);
    let data = await Object(neuroglancer_util_byte_range_http_requests__WEBPACK_IMPORTED_MODULE_12__["fetchHttpByteRange"])(minishardIndex.shardUrl, startOffset, endOffset, cancellationToken);
    if (minishardIndexSource.sharding.dataEncoding === neuroglancer_datasource_precomputed_base__WEBPACK_IMPORTED_MODULE_4__["DataEncoding"].GZIP) {
        data =
            (await Object(neuroglancer_async_computation_request__WEBPACK_IMPORTED_MODULE_1__["requestAsyncComputation"])(neuroglancer_async_computation_decode_gzip_request__WEBPACK_IMPORTED_MODULE_0__["decodeGzip"], cancellationToken, [data], new Uint8Array(data)))
                .buffer;
    }
    return { data, shardInfo: { shardUrl: minishardIndex.shardUrl, offset: startOffset } };
}
const chunkDecoders = new Map();
chunkDecoders.set(neuroglancer_datasource_precomputed_base__WEBPACK_IMPORTED_MODULE_4__["VolumeChunkEncoding"].RAW, neuroglancer_sliceview_backend_chunk_decoders_raw__WEBPACK_IMPORTED_MODULE_10__["decodeRawChunk"]);
chunkDecoders.set(neuroglancer_datasource_precomputed_base__WEBPACK_IMPORTED_MODULE_4__["VolumeChunkEncoding"].JPEG, neuroglancer_sliceview_backend_chunk_decoders_jpeg__WEBPACK_IMPORTED_MODULE_9__["decodeJpegChunk"]);
chunkDecoders.set(neuroglancer_datasource_precomputed_base__WEBPACK_IMPORTED_MODULE_4__["VolumeChunkEncoding"].COMPRESSED_SEGMENTATION, neuroglancer_sliceview_backend_chunk_decoders_compressed_segmentation__WEBPACK_IMPORTED_MODULE_8__["decodeCompressedSegmentationChunk"]);
let PrecomputedVolumeChunkSource = class PrecomputedVolumeChunkSource extends (Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_2__["WithParameters"])(neuroglancer_sliceview_volume_backend__WEBPACK_IMPORTED_MODULE_11__["VolumeChunkSource"], neuroglancer_datasource_precomputed_base__WEBPACK_IMPORTED_MODULE_4__["VolumeChunkSourceParameters"])) {
    constructor() {
        super(...arguments);
        this.chunkDecoder = chunkDecoders.get(this.parameters.encoding);
        this.minishardIndexSource = getMinishardIndexDataSource(this.chunkManager, this.parameters);
        this.gridShape = (() => {
            const gridShape = new Uint32Array(3);
            const { upperVoxelBound, chunkDataSize } = this.spec;
            for (let i = 0; i < 3; ++i) {
                gridShape[i] = Math.ceil(upperVoxelBound[i] / chunkDataSize[i]);
            }
            return gridShape;
        })();
    }
    async download(chunk, cancellationToken) {
        const { parameters } = this;
        const { minishardIndexSource } = this;
        let response;
        if (minishardIndexSource === undefined) {
            let url;
            {
                // chunkPosition must not be captured, since it will be invalidated by the next call to
                // computeChunkBounds.
                let chunkPosition = this.computeChunkBounds(chunk);
                let chunkDataSize = chunk.chunkDataSize;
                url = `${parameters.url}/${chunkPosition[0]}-${chunkPosition[0] + chunkDataSize[0]}_` +
                    `${chunkPosition[1]}-${chunkPosition[1] + chunkDataSize[1]}_` +
                    `${chunkPosition[2]}-${chunkPosition[2] + chunkDataSize[2]}`;
            }
            response = await Object(neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_16__["cancellableFetchOk"])(url, {}, neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_16__["responseArrayBuffer"], cancellationToken);
        }
        else {
            this.computeChunkBounds(chunk);
            const { gridShape } = this;
            const { chunkGridPosition } = chunk;
            const xBits = Math.ceil(Math.log2(gridShape[0])), yBits = Math.ceil(Math.log2(gridShape[1])), zBits = Math.ceil(Math.log2(gridShape[2]));
            const chunkIndex = Object(neuroglancer_util_zorder__WEBPACK_IMPORTED_MODULE_19__["encodeZIndexCompressed"])(new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"](), xBits, yBits, zBits, chunkGridPosition[0], chunkGridPosition[1], chunkGridPosition[2]);
            response =
                (await getShardedData(minishardIndexSource, chunk, chunkIndex, cancellationToken)).data;
        }
        await this.chunkDecoder(chunk, cancellationToken, response);
    }
};
PrecomputedVolumeChunkSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_20__["registerSharedObject"])()
], PrecomputedVolumeChunkSource);

function decodeManifestChunk(chunk, response) {
    return Object(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_5__["decodeJsonManifestChunk"])(chunk, response, 'fragments');
}
function decodeFragmentChunk(chunk, response) {
    let dv = new DataView(response);
    let numVertices = dv.getUint32(0, true);
    Object(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_5__["assignMeshFragmentData"])(chunk, Object(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_5__["decodeTriangleVertexPositionsAndIndices"])(response, neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_13__["Endianness"].LITTLE, /*vertexByteOffset=*/ 4, numVertices));
}
function decodeDracoFragmentChunk(chunk, response, decoderModule) {
    Object(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_5__["assignMeshFragmentData"])(chunk, Object(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_5__["decodeTriangleVertexPositionsAndIndicesDraco"])(response, decoderModule));
}
let PrecomputedMeshSource = class PrecomputedMeshSource extends (Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_2__["WithParameters"])(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_5__["MeshSource"], neuroglancer_datasource_precomputed_base__WEBPACK_IMPORTED_MODULE_4__["MeshSourceParameters"])) {
    download(chunk, cancellationToken) {
        const { parameters } = this;
        return Object(neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_16__["cancellableFetchOk"])(`${parameters.url}/${chunk.objectId}:${parameters.lod}`, {}, neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_16__["responseJson"], cancellationToken)
            .then(response => decodeManifestChunk(chunk, response));
    }
    downloadFragment(chunk, cancellationToken) {
        const { parameters } = this;
        const fragmentDownloadPromise = Object(neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_16__["cancellableFetchOk"])(`${parameters.url}/${chunk.fragmentId}`, {}, neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_16__["responseArrayBuffer"], cancellationToken);
        const dracoModulePromise = DracoLoader.default;
        const readyToDecode = Promise.all([fragmentDownloadPromise, dracoModulePromise]);
        return readyToDecode.then(response => {
            try {
                decodeDracoFragmentChunk(chunk, response[0], response[1].decoderModule);
            }
            catch (err) {
                if (err instanceof TypeError) {
                    // not a draco mesh
                    decodeFragmentChunk(chunk, response[0]);
                }
            }
        }, error => {
            Promise.reject(error);
        });
    }
};
PrecomputedMeshSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_20__["registerSharedObject"])()
], PrecomputedMeshSource);

function decodeMultiscaleManifestChunk(chunk, response) {
    if (response.byteLength < 28 || response.byteLength % 4 !== 0) {
        throw new Error(`Invalid index file size: ${response.byteLength}`);
    }
    const dv = new DataView(response);
    let offset = 0;
    const chunkShape = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].fromValues(dv.getFloat32(offset, /*littleEndian=*/ true), dv.getFloat32(offset + 4, /*littleEndian=*/ true), dv.getFloat32(offset + 8, /*littleEndian=*/ true));
    offset += 12;
    const gridOrigin = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].fromValues(dv.getFloat32(offset, /*littleEndian=*/ true), dv.getFloat32(offset + 4, /*littleEndian=*/ true), dv.getFloat32(offset + 8, /*littleEndian=*/ true));
    offset += 12;
    const numStoredLods = dv.getUint32(offset, /*littleEndian=*/ true);
    offset += 4;
    if (response.byteLength < offset + (4 + 4 + 4 * 3) * numStoredLods) {
        throw new Error(`Invalid index file size for ${numStoredLods} lods: ${response.byteLength}`);
    }
    const storedLodScales = new Float32Array(response, offset, numStoredLods);
    offset += 4 * numStoredLods;
    Object(neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_13__["convertEndian32"])(storedLodScales, neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_13__["Endianness"].LITTLE);
    const vertexOffsets = new Float32Array(response, offset, numStoredLods * 3);
    Object(neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_13__["convertEndian32"])(vertexOffsets, neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_13__["Endianness"].LITTLE);
    offset += 12 * numStoredLods;
    const numFragmentsPerLod = new Uint32Array(response, offset, numStoredLods);
    offset += 4 * numStoredLods;
    Object(neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_13__["convertEndian32"])(numFragmentsPerLod, neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_13__["Endianness"].LITTLE);
    const totalFragments = numFragmentsPerLod.reduce((a, b) => a + b);
    if (response.byteLength !== offset + 16 * totalFragments) {
        throw new Error(`Invalid index file size for ${numStoredLods} lods and ` +
            `${totalFragments} total fragments: ${response.byteLength}`);
    }
    const fragmentInfo = new Uint32Array(response, offset);
    Object(neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_13__["convertEndian32"])(fragmentInfo, neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_13__["Endianness"].LITTLE);
    const clipUpperBound = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].fromValues(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
    const clipLowerBound = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].fromValues(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);
    let numLods = Math.max(1, storedLodScales.length);
    {
        let fragmentBase = 0;
        for (let lodIndex = 0; lodIndex < numStoredLods; ++lodIndex) {
            const numFragments = numFragmentsPerLod[lodIndex];
            for (let i = 0; i < 3; ++i) {
                let upperBoundValue = Number.NEGATIVE_INFINITY;
                let lowerBoundValue = Number.POSITIVE_INFINITY;
                const base = fragmentBase + numFragments * i;
                for (let j = 0; j < numFragments; ++j) {
                    const v = fragmentInfo[base + j];
                    upperBoundValue = Math.max(upperBoundValue, v);
                    lowerBoundValue = Math.min(lowerBoundValue, v);
                }
                if (numFragments != 0) {
                    while ((upperBoundValue >>> (numLods - lodIndex - 1)) !=
                        (lowerBoundValue >>> (numLods - lodIndex - 1))) {
                        ++numLods;
                    }
                    if (lodIndex === 0) {
                        clipLowerBound[i] = Math.min(clipLowerBound[i], (1 << lodIndex) * lowerBoundValue);
                        clipUpperBound[i] =
                            Math.max(clipUpperBound[i], (1 << lodIndex) * (upperBoundValue + 1));
                    }
                }
            }
            fragmentBase += numFragments * 4;
        }
    }
    let maxFragments = 0;
    {
        let prevNumFragments = 0;
        let prevLodIndex = 0;
        for (let lodIndex = 0; lodIndex < numStoredLods; ++lodIndex) {
            const numFragments = numFragmentsPerLod[lodIndex];
            maxFragments += prevNumFragments * (lodIndex - prevLodIndex);
            prevLodIndex = lodIndex;
            prevNumFragments = numFragments;
            maxFragments += numFragments;
        }
        maxFragments += (numLods - 1 - prevLodIndex) * prevNumFragments;
    }
    const octreeTemp = new Uint32Array(5 * maxFragments);
    const offsetsTemp = new Float64Array(maxFragments + 1);
    let octree;
    {
        let priorStart = 0;
        let baseRow = 0;
        let dataOffset = 0;
        let fragmentBase = 0;
        for (let lodIndex = 0; lodIndex < numStoredLods; ++lodIndex) {
            const numFragments = numFragmentsPerLod[lodIndex];
            // Copy in indices
            for (let j = 0; j < numFragments; ++j) {
                for (let i = 0; i < 3; ++i) {
                    octreeTemp[5 * (baseRow + j) + i] = fragmentInfo[fragmentBase + j + i * numFragments];
                }
                const dataSize = fragmentInfo[fragmentBase + j + 3 * numFragments];
                dataOffset += dataSize;
                offsetsTemp[baseRow + j + 1] = dataOffset;
                if (dataSize === 0) {
                    // Mark node as empty.
                    octreeTemp[5 * (baseRow + j) + 4] = 0x80000000;
                }
            }
            fragmentBase += 4 * numFragments;
            if (lodIndex !== 0) {
                // Connect with prior level
                Object(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_5__["computeOctreeChildOffsets"])(octreeTemp, priorStart, baseRow, baseRow + numFragments);
            }
            priorStart = baseRow;
            baseRow += numFragments;
            while (lodIndex + 1 < numLods &&
                (lodIndex + 1 >= storedLodScales.length || storedLodScales[lodIndex + 1] === 0)) {
                const curEnd = Object(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_5__["generateHigherOctreeLevel"])(octreeTemp, priorStart, baseRow);
                offsetsTemp.fill(dataOffset, baseRow + 1, curEnd + 1);
                priorStart = baseRow;
                baseRow = curEnd;
                ++lodIndex;
            }
        }
        octree = octreeTemp.slice(0, 5 * baseRow);
        chunk.offsets = offsetsTemp.slice(0, baseRow + 1);
    }
    const source = chunk.source;
    const { lodScaleMultiplier } = source.parameters.metadata;
    const lodScales = new Float32Array(numLods);
    lodScales.set(storedLodScales, 0);
    for (let i = 0; i < storedLodScales.length; ++i) {
        lodScales[i] *= lodScaleMultiplier;
    }
    chunk.manifest = {
        chunkShape,
        chunkGridSpatialOrigin: gridOrigin,
        clipLowerBound: neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].add(clipLowerBound, gridOrigin, neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].multiply(clipLowerBound, clipLowerBound, chunkShape)),
        clipUpperBound: neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].add(clipUpperBound, gridOrigin, neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_14__["vec3"].multiply(clipUpperBound, clipUpperBound, chunkShape)),
        octree,
        lodScales,
        vertexOffsets,
    };
}
async function decodeMultiscaleFragmentChunk(chunk, response) {
    const { lod } = chunk;
    const source = chunk.manifestChunk.source;
    const m = await __webpack_require__.e(/*! import() | draco */ "draco").then(__webpack_require__.bind(null, /*! neuroglancer/mesh/draco */ "../../../../../../neuroglancer/src/neuroglancer/mesh/draco/index.ts"));
    const rawMesh = await m.decodeDracoPartitioned(new Uint8Array(response), source.parameters.metadata.vertexQuantizationBits, lod !== 0);
    Object(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_5__["assignMultiscaleMeshFragmentData"])(chunk, rawMesh, source.format.vertexPositionFormat);
}
let PrecomputedMultiscaleMeshSource = class PrecomputedMultiscaleMeshSource extends (Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_2__["WithParameters"])(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_5__["MultiscaleMeshSource"], neuroglancer_datasource_precomputed_base__WEBPACK_IMPORTED_MODULE_4__["MultiscaleMeshSourceParameters"])) {
    constructor() {
        super(...arguments);
        this.minishardIndexSource = getMinishardIndexDataSource(this.chunkManager, { url: this.parameters.url, sharding: this.parameters.metadata.sharding });
    }
    async download(chunk, cancellationToken) {
        const { parameters, minishardIndexSource } = this;
        let data;
        if (minishardIndexSource === undefined) {
            data = await Object(neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_16__["cancellableFetchOk"])(`${parameters.url}/${chunk.objectId}.index`, {}, neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_16__["responseArrayBuffer"], cancellationToken);
        }
        else {
            ({ data, shardInfo: chunk.shardInfo } =
                await getShardedData(minishardIndexSource, chunk, chunk.objectId, cancellationToken));
        }
        await decodeMultiscaleManifestChunk(chunk, data);
    }
    async downloadFragment(chunk, cancellationToken) {
        const { parameters } = this;
        const manifestChunk = chunk.manifestChunk;
        const chunkIndex = chunk.chunkIndex;
        const { shardInfo, offsets } = manifestChunk;
        const startOffset = offsets[chunkIndex];
        const endOffset = offsets[chunkIndex + 1];
        let requestUrl;
        let adjustedStartOffset, adjustedEndOffset;
        if (shardInfo !== undefined) {
            requestUrl = shardInfo.shardUrl;
            const fullDataSize = offsets[offsets.length - 1];
            let startLow = shardInfo.offset.low - fullDataSize + startOffset;
            let startHigh = shardInfo.offset.high;
            let endLow = startLow + endOffset - startOffset;
            let endHigh = startHigh;
            while (startLow < 0) {
                startLow += 4294967296;
                startHigh -= 1;
            }
            while (endLow < 0) {
                endLow += 4294967296;
                endHigh -= 1;
            }
            while (endLow > 4294967296) {
                endLow -= 4294967296;
                endHigh += 1;
            }
            adjustedStartOffset = new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"](startLow, startHigh);
            adjustedEndOffset = new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_18__["Uint64"](endLow, endHigh);
        }
        else {
            requestUrl = `${parameters.url}/${manifestChunk.objectId}`;
            adjustedStartOffset = startOffset;
            adjustedEndOffset = endOffset;
        }
        const response = await Object(neuroglancer_util_byte_range_http_requests__WEBPACK_IMPORTED_MODULE_12__["fetchHttpByteRange"])(requestUrl, adjustedStartOffset, adjustedEndOffset, cancellationToken);
        await decodeMultiscaleFragmentChunk(chunk, response);
    }
};
PrecomputedMultiscaleMeshSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_20__["registerSharedObject"])() //
], PrecomputedMultiscaleMeshSource);

let PrecomputedSkeletonSource = class PrecomputedSkeletonSource extends (Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_2__["WithParameters"])(neuroglancer_skeleton_backend__WEBPACK_IMPORTED_MODULE_6__["SkeletonSource"], neuroglancer_datasource_precomputed_base__WEBPACK_IMPORTED_MODULE_4__["SkeletonSourceParameters"])) {
    constructor() {
        super(...arguments);
        this.minishardIndexSource = getMinishardIndexDataSource(this.chunkManager, { url: this.parameters.url, sharding: this.parameters.metadata.sharding });
    }
    async download(chunk, cancellationToken) {
        const { minishardIndexSource, parameters } = this;
        let response;
        if (minishardIndexSource === undefined) {
            response = await Object(neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_16__["cancellableFetchOk"])(`${parameters.url}/${chunk.objectId}`, {}, neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_16__["responseArrayBuffer"], cancellationToken);
        }
        else {
            response =
                (await getShardedData(minishardIndexSource, chunk, chunk.objectId, cancellationToken))
                    .data;
        }
        Object(neuroglancer_skeleton_decode_precomputed_skeleton__WEBPACK_IMPORTED_MODULE_7__["decodeSkeletonChunk"])(chunk, response, parameters.metadata.vertexAttributes);
    }
};
PrecomputedSkeletonSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_20__["registerSharedObject"])() //
], PrecomputedSkeletonSource);



/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/precomputed/base.ts":
/*!*******************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/precomputed/base.ts ***!
  \*******************************************************************************************************************/
/*! exports provided: VolumeChunkEncoding, VolumeChunkSourceParameters, MeshSourceParameters, DataEncoding, ShardingHashFunction, MultiscaleMeshMetadata, MultiscaleMeshSourceParameters, SkeletonSourceParameters */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VolumeChunkEncoding", function() { return VolumeChunkEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VolumeChunkSourceParameters", function() { return VolumeChunkSourceParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshSourceParameters", function() { return MeshSourceParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataEncoding", function() { return DataEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShardingHashFunction", function() { return ShardingHashFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiscaleMeshMetadata", function() { return MultiscaleMeshMetadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiscaleMeshSourceParameters", function() { return MultiscaleMeshSourceParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SkeletonSourceParameters", function() { return SkeletonSourceParameters; });
/**
 * @license
 * Copyright 2018 The Neuroglancer Authors
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var VolumeChunkEncoding;
(function (VolumeChunkEncoding) {
    VolumeChunkEncoding[VolumeChunkEncoding["RAW"] = 0] = "RAW";
    VolumeChunkEncoding[VolumeChunkEncoding["JPEG"] = 1] = "JPEG";
    VolumeChunkEncoding[VolumeChunkEncoding["COMPRESSED_SEGMENTATION"] = 2] = "COMPRESSED_SEGMENTATION";
})(VolumeChunkEncoding || (VolumeChunkEncoding = {}));
class VolumeChunkSourceParameters {
}
VolumeChunkSourceParameters.RPC_ID = 'precomputed/VolumeChunkSource';
class MeshSourceParameters {
}
MeshSourceParameters.RPC_ID = 'precomputed/MeshSource';
var DataEncoding;
(function (DataEncoding) {
    DataEncoding[DataEncoding["RAW"] = 0] = "RAW";
    DataEncoding[DataEncoding["GZIP"] = 1] = "GZIP";
})(DataEncoding || (DataEncoding = {}));
var ShardingHashFunction;
(function (ShardingHashFunction) {
    ShardingHashFunction[ShardingHashFunction["IDENTITY"] = 0] = "IDENTITY";
    ShardingHashFunction[ShardingHashFunction["MURMURHASH3_X86_128"] = 1] = "MURMURHASH3_X86_128";
})(ShardingHashFunction || (ShardingHashFunction = {}));
class MultiscaleMeshMetadata {
}
class MultiscaleMeshSourceParameters {
}
MultiscaleMeshSourceParameters.RPC_ID = 'precomputed/MultiscaleMeshSource';
class SkeletonSourceParameters {
}
SkeletonSourceParameters.RPC_ID = 'precomputed/SkeletonSource';


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/render/backend.ts":
/*!*****************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/render/backend.ts ***!
  \*****************************************************************************************************************/
/*! exports provided: TileChunkSource, PointMatchSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TileChunkSource", function() { return TileChunkSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointMatchSource", function() { return PointMatchSource; });
/* harmony import */ var neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/chunk_manager/backend */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/backend.ts");
/* harmony import */ var neuroglancer_datasource_render_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/datasource/render/base */ "../../../../../../neuroglancer/src/neuroglancer/datasource/render/base.ts");
/* harmony import */ var neuroglancer_sliceview_backend_chunk_decoders_jpeg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/sliceview/backend_chunk_decoders/jpeg */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/jpeg.ts");
/* harmony import */ var neuroglancer_sliceview_backend_chunk_decoders_raw__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/sliceview/backend_chunk_decoders/raw */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/raw.ts");
/* harmony import */ var neuroglancer_sliceview_vector_graphics_backend__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! neuroglancer/sliceview/vector_graphics/backend */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/vector_graphics/backend.ts");
/* harmony import */ var neuroglancer_sliceview_volume_backend__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! neuroglancer/sliceview/volume/backend */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/volume/backend.ts");
/* harmony import */ var neuroglancer_util_float32array_builder__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! neuroglancer/util/float32array_builder */ "../../../../../../neuroglancer/src/neuroglancer/util/float32array_builder.ts");
/* harmony import */ var neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! neuroglancer/util/geom */ "../../../../../../neuroglancer/src/neuroglancer/util/geom.ts");
/* harmony import */ var neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! neuroglancer/util/http_request */ "../../../../../../neuroglancer/src/neuroglancer/util/http_request.ts");
/* harmony import */ var neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! neuroglancer/util/json */ "../../../../../../neuroglancer/src/neuroglancer/util/json.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/* harmony import */ var neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! neuroglancer/util/endian */ "../../../../../../neuroglancer/src/neuroglancer/util/endian.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};












const chunkDecoders = new Map();
chunkDecoders.set('jpg', neuroglancer_sliceview_backend_chunk_decoders_jpeg__WEBPACK_IMPORTED_MODULE_2__["decodeJpegChunk"]);
chunkDecoders.set('raw16', (chunk, cancellationToken, response) => {
    return Object(neuroglancer_sliceview_backend_chunk_decoders_raw__WEBPACK_IMPORTED_MODULE_3__["decodeRawChunk"])(chunk, cancellationToken, response, neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_11__["Endianness"].BIG);
});
let TileChunkSource = class TileChunkSource extends (Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["WithParameters"])(neuroglancer_sliceview_volume_backend__WEBPACK_IMPORTED_MODULE_5__["VolumeChunkSource"], neuroglancer_datasource_render_base__WEBPACK_IMPORTED_MODULE_1__["TileChunkSourceParameters"])) {
    constructor() {
        super(...arguments);
        this.chunkDecoder = chunkDecoders.get(this.parameters.encoding);
        this.queryString = (() => {
            let { parameters } = this;
            let query_params = [];
            if (parameters.channel !== undefined) {
                query_params.push('channels=' + parameters.channel);
            }
            if (parameters.minIntensity !== undefined) {
                query_params.push(`minIntensity=${JSON.stringify(parameters.minIntensity)}`);
            }
            if (parameters.maxIntensity !== undefined) {
                query_params.push(`maxIntensity=${JSON.stringify(parameters.maxIntensity)}`);
            }
            if (parameters.maxTileSpecsToRender !== undefined) {
                query_params.push(`maxTileSpecsToRender=${JSON.stringify(parameters.maxTileSpecsToRender)}`);
            }
            if (parameters.filter !== undefined) {
                query_params.push(`filter=${JSON.stringify(parameters.filter)}`);
            }
            return query_params.join('&');
        })();
    }
    async download(chunk, cancellationToken) {
        let { parameters } = this;
        let { chunkGridPosition } = chunk;
        // Calculate scale.
        let scale = 1.0 / Math.pow(2, parameters.level);
        // Needed by JPEG decoder.
        chunk.chunkDataSize = this.spec.chunkDataSize;
        let xTileSize = chunk.chunkDataSize[0] * Math.pow(2, parameters.level);
        let yTileSize = chunk.chunkDataSize[1] * Math.pow(2, parameters.level);
        // Convert grid position to global coordinates position.
        let chunkPosition = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_7__["vec3"].create();
        chunkPosition[0] = chunkGridPosition[0] * xTileSize;
        chunkPosition[1] = chunkGridPosition[1] * yTileSize;
        chunkPosition[2] = chunkGridPosition[2];
        // GET
        // /v1/owner/{owner}/project/{project}/stack/{stack}/z/{z}/box/{x},{y},{width},{height},{scale}/jpeg-image
        let imageMethod;
        if (parameters.encoding === 'raw16') {
            imageMethod = 'raw16-image';
        }
        else {
            imageMethod = 'jpeg-image';
        }
        let path = `/render-ws/v1/owner/${parameters.owner}/project/${parameters.project}/stack/${parameters.stack}/z/${chunkPosition[2]}/box/${chunkPosition[0]},${chunkPosition[1]},${xTileSize},${yTileSize},${scale}/${imageMethod}`;
        const response = await Object(neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_8__["cancellableFetchOk"])(`${parameters.baseUrl}${path}?${this.queryString}`, {}, neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_8__["responseArrayBuffer"], cancellationToken);
        await this.chunkDecoder(chunk, cancellationToken, response);
    }
};
TileChunkSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__["registerSharedObject"])()
], TileChunkSource);

function decodeSectionIDs(response) {
    let sectionIDs = [];
    Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_9__["parseArray"])(response, x => {
        Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_9__["verifyObject"])(x);
        sectionIDs.push(Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_9__["verifyString"])(x['sectionId']));
    });
    return sectionIDs;
}
function createConversionObject(tileId, xcoord, ycoord) {
    return { 'tileId': tileId, 'local': [xcoord, ycoord] };
}
function conversionObjectToWorld(conversionObjectArray, parameters, cancellationToken) {
    const url = `${parameters.baseUrl}/render-ws/v1/owner/${parameters.owner}/project/${parameters.project}/` +
        `stack/${parameters.stack}/local-to-world-coordinates`;
    return Object(neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_8__["cancellableFetchOk"])(url, {
        method: 'PUT',
        body: JSON.stringify(conversionObjectArray),
        headers: { 'Content-Type': 'application/json' }
    }, neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_8__["responseJson"], cancellationToken);
}
function decodePointMatches(chunk, response, parameters, cancellationToken) {
    let conversionObjects = new Array();
    Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_9__["parseArray"])(response, (matchObj) => {
        let pId = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_9__["verifyString"])(matchObj['pId']);
        let qId = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_9__["verifyString"])(matchObj['qId']);
        let matches = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_9__["verifyObject"])(matchObj['matches']);
        let pMatches = matches['p']; // [[x],[y]]
        let qMatches = matches['q'];
        // Create conversion objects
        for (let i = 0; i < pMatches[0].length; i++) {
            // Create pConversion
            conversionObjects.push(createConversionObject(pId, pMatches[0][i], pMatches[1][i]));
            // Create qConversion
            conversionObjects.push(createConversionObject(qId, qMatches[0][i], qMatches[1][i]));
        }
    });
    return conversionObjectToWorld(conversionObjects, parameters, cancellationToken)
        .then(allConvertedCoordinates => {
        let vertexPositions = new neuroglancer_util_float32array_builder__WEBPACK_IMPORTED_MODULE_6__["Float32ArrayBuilder"]();
        for (let i = 0; i < allConvertedCoordinates.length; i++) {
            let convertedCoordinate = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_9__["verifyObject"])(allConvertedCoordinates[i]);
            let point = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_9__["verify3dVec"])(convertedCoordinate['world']);
            vertexPositions.appendArray(point);
        }
        chunk.vertexPositions = vertexPositions.view;
    });
}
function getPointMatches(chunk, sectionIds, parameters, cancellationToken) {
    let path;
    if (sectionIds.length === 1) {
        path = `/render-ws/v1/owner/${parameters.owner}/matchCollection/` +
            `${parameters.matchCollection}/group/${sectionIds[0]}/matchesWith/${sectionIds[0]}`;
    }
    else if (sectionIds.length === 2) {
        path = `/render-ws/v1/owner/${parameters.owner}/matchCollection/` +
            `${parameters.matchCollection}/group/${sectionIds[0]}/matchesWith/${sectionIds[1]}`;
    }
    else {
        throw new Error(`Invalid section Id vector of length: ${JSON.stringify(sectionIds.length)}`);
    }
    return Object(neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_8__["cancellableFetchOk"])(`${parameters.baseUrl}${path}`, {}, neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_8__["responseJson"], cancellationToken)
        .then(response => {
        return decodePointMatches(chunk, response, parameters, cancellationToken);
    });
}
function downloadPointMatchChunk(chunk, path, parameters, cancellationToken) {
    return Object(neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_8__["cancellableFetchOk"])(`${parameters.baseUrl}${path}`, {}, neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_8__["responseJson"], cancellationToken)
        .then(response => {
        return getPointMatches(chunk, decodeSectionIDs(response), parameters, cancellationToken);
    });
}
let PointMatchSource = class PointMatchSource extends (Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["WithParameters"])(neuroglancer_sliceview_vector_graphics_backend__WEBPACK_IMPORTED_MODULE_4__["VectorGraphicsChunkSource"], neuroglancer_datasource_render_base__WEBPACK_IMPORTED_MODULE_1__["PointMatchChunkSourceParameters"])) {
    download(chunk, cancellationToken) {
        let { parameters } = this;
        let { chunkGridPosition } = chunk;
        // Get section IDs
        let path = `/render-ws/v1/owner/${parameters.owner}/project/${parameters.project}/` +
            `stack/${parameters.stack}/sectionData?minZ=${chunkGridPosition[2]}&` +
            `maxZ=${chunkGridPosition[2] + parameters.zoffset}`;
        return downloadPointMatchChunk(chunk, path, parameters, cancellationToken);
    }
};
PointMatchSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__["registerSharedObject"])()
], PointMatchSource);



/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/render/base.ts":
/*!**************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/render/base.ts ***!
  \**************************************************************************************************************/
/*! exports provided: RenderBaseSourceParameters, RenderSourceParameters, TileChunkSourceParameters, PointMatchChunkSourceParameters */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RenderBaseSourceParameters", function() { return RenderBaseSourceParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RenderSourceParameters", function() { return RenderSourceParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TileChunkSourceParameters", function() { return TileChunkSourceParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointMatchChunkSourceParameters", function() { return PointMatchChunkSourceParameters; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class RenderBaseSourceParameters {
}
class RenderSourceParameters extends RenderBaseSourceParameters {
}
class TileChunkSourceParameters extends RenderSourceParameters {
}
TileChunkSourceParameters.RPC_ID = 'render/TileChunkSource';
class PointMatchChunkSourceParameters extends RenderSourceParameters {
}
PointMatchChunkSourceParameters.RPC_ID = 'render/PointMatchSource';


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/datasource/vtk/backend.ts":
/*!**************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/datasource/vtk/backend.ts ***!
  \**************************************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var neuroglancer_async_computation_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/async_computation/request */ "../../../../../../neuroglancer/src/neuroglancer/async_computation/request.ts");
/* harmony import */ var neuroglancer_async_computation_vtk_mesh_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/async_computation/vtk_mesh_request */ "../../../../../../neuroglancer/src/neuroglancer/async_computation/vtk_mesh_request.ts");
/* harmony import */ var neuroglancer_chunk_manager_generic_file_source__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/chunk_manager/generic_file_source */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/generic_file_source.ts");
/* harmony import */ var neuroglancer_single_mesh_backend__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/single_mesh/backend */ "../../../../../../neuroglancer/src/neuroglancer/single_mesh/backend.ts");
/* harmony import */ var neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! neuroglancer/util/data_type */ "../../../../../../neuroglancer/src/neuroglancer/util/data_type.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * This needs to be a global function, because it identifies the instance of GenericSharedDataSource
 * to use.
 */
function parse(buffer, cancellationToken) {
    return Object(neuroglancer_async_computation_request__WEBPACK_IMPORTED_MODULE_0__["requestAsyncComputation"])(neuroglancer_async_computation_vtk_mesh_request__WEBPACK_IMPORTED_MODULE_1__["parseVTKFromArrayBuffer"], cancellationToken, [buffer], buffer);
}
Object(neuroglancer_single_mesh_backend__WEBPACK_IMPORTED_MODULE_3__["registerSingleMeshFactory"])('vtk', {
    description: 'VTK',
    getMesh: (chunkManager, url, getPriority, cancellationToken) => neuroglancer_chunk_manager_generic_file_source__WEBPACK_IMPORTED_MODULE_2__["GenericSharedDataSource"].getUrl(chunkManager, parse, url, getPriority, cancellationToken)
        .then(mesh => {
        let result = {
            info: {
                numTriangles: mesh.numTriangles,
                numVertices: mesh.numVertices,
                vertexAttributes: [],
            },
            indices: mesh.indices,
            vertexPositions: mesh.vertexPositions,
            vertexAttributes: [],
        };
        for (const attribute of mesh.vertexAttributes) {
            result.info.vertexAttributes.push({
                name: attribute.name,
                dataType: neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_4__["DataType"].FLOAT32,
                numComponents: attribute.numComponents,
            });
            result.vertexAttributes.push(attribute.data);
        }
        return result;
    })
});


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/gpu_hash/hash_function.ts":
/*!**************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/gpu_hash/hash_function.ts ***!
  \**************************************************************************************************************/
/*! exports provided: hashCombine */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hashCombine", function() { return hashCombine; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const k1 = 0xcc9e2d51;
const k2 = 0x1b873593;
// MurmurHash excluding the final mixing steps.
function hashCombine(state, value) {
    value >>>= 0;
    state >>>= 0;
    value = Math.imul(value, k1) >>> 0;
    value = ((value << 15) | (value >>> 17)) >>> 0;
    value = Math.imul(value, k2) >>> 0;
    state = (state ^ value) >>> 0;
    state = ((state << 13) | (state >>> 19)) >>> 0;
    state = ((state * 5) + 0xe6546b64) >>> 0;
    return state;
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/gpu_hash/hash_table.ts":
/*!***********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/gpu_hash/hash_table.ts ***!
  \***********************************************************************************************************/
/*! exports provided: NUM_ALTERNATIVES, HashTableBase, HashSetUint64, HashMapUint64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUM_ALTERNATIVES", function() { return NUM_ALTERNATIVES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HashTableBase", function() { return HashTableBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HashSetUint64", function() { return HashSetUint64; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HashMapUint64", function() { return HashMapUint64; });
/* harmony import */ var neuroglancer_gpu_hash_hash_function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/gpu_hash/hash_function */ "../../../../../../neuroglancer/src/neuroglancer/gpu_hash/hash_function.ts");
/* harmony import */ var neuroglancer_util_random__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/random */ "../../../../../../neuroglancer/src/neuroglancer/util/random.ts");
/* harmony import */ var neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/util/uint64 */ "../../../../../../neuroglancer/src/neuroglancer/util/uint64.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



const NUM_ALTERNATIVES = 3;
// For 3 hash functions, a DEFAULT_LOAD_FACTOR of 0.8 reliably avoids
// expensive rehashing caused by unresolvable collisions.
const DEFAULT_LOAD_FACTOR = 0.8;
const DEBUG = false;
// Key that needs to be inserted.  Temporary variables used during insert.  These can safely be
// global because control never leaves functions defined in this module while these are in use.
let pendingLow = 0, pendingHigh = 0, backupPendingLow = 0, backupPendingHigh = 0;
class HashTableBase {
    constructor(hashSeeds = HashTableBase.generateHashSeeds(NUM_ALTERNATIVES)) {
        this.hashSeeds = hashSeeds;
        this.loadFactor = DEFAULT_LOAD_FACTOR;
        this.size = 0;
        this.emptyLow = 4294967295;
        this.emptyHigh = 4294967295;
        this.maxRehashAttempts = 5;
        this.maxAttempts = 5;
        this.generation = 0;
        this.mungedEmptyKey = -1;
        // Minimum size must be greater than 2 * hashSeeds.length.  Otherwise, tableWithMungedEmptyKey
        // may loop infinitely.
        let initialSize = 8;
        while (initialSize < 2 * hashSeeds.length) {
            initialSize *= 2;
        }
        this.allocate(initialSize);
    }
    updateHashFunctions(numHashes) {
        this.hashSeeds = HashTableBase.generateHashSeeds(numHashes);
        this.mungedEmptyKey = -1;
    }
    /**
     * Invokes callback with a modified version of the hash table data array.
     *
     * Replaces all slots that appear to be valid entries for (emptyLow, emptyHigh), i.e. slots that
     * contain (emptyLow, emptyHigh) and to which (emptyLow, emptyHigh) hashes, with (mungedEmptyKey,
     * mungedEmptyKey).
     *
     * mungedEmptyKey is chosen to be a 32-bit value with the property that the 64-bit value
     * (mungedEmptyKey, mungedEmptyKey) does not hash to any of the same slots as (emptyLow,
     * emptyHigh).
     *
     * This allows the modified data array to be used for lookups without special casing the empty
     * key.
     */
    tableWithMungedEmptyKey(callback) {
        const numHashes = this.hashSeeds.length;
        const emptySlots = new Array(numHashes);
        for (let i = 0; i < numHashes; ++i) {
            emptySlots[i] = this.getHash(i, this.emptyLow, this.emptyHigh);
        }
        let { mungedEmptyKey } = this;
        if (mungedEmptyKey === -1) {
            chooseMungedEmptyKey: while (true) {
                mungedEmptyKey = (Math.random() * 0x1000000) >>> 0;
                for (let i = 0; i < numHashes; ++i) {
                    let h = this.getHash(i, mungedEmptyKey, mungedEmptyKey);
                    for (let j = 0; j < numHashes; ++j) {
                        if (emptySlots[j] === h) {
                            continue chooseMungedEmptyKey;
                        }
                    }
                }
                this.mungedEmptyKey = mungedEmptyKey;
                break;
            }
        }
        let { table, emptyLow, emptyHigh } = this;
        for (let i = 0; i < numHashes; ++i) {
            let h = emptySlots[i];
            if (table[h] === emptyLow && table[h + 1] === emptyHigh) {
                table[h] = mungedEmptyKey;
                table[h + 1] = mungedEmptyKey;
            }
        }
        try {
            callback(table);
        }
        finally {
            for (let i = 0; i < numHashes; ++i) {
                let h = emptySlots[i];
                if (table[h] === mungedEmptyKey && table[h + 1] === mungedEmptyKey) {
                    table[h] = emptyLow;
                    table[h + 1] = emptyHigh;
                }
            }
        }
    }
    static generateHashSeeds(numAlternatives = NUM_ALTERNATIVES) {
        return Object(neuroglancer_util_random__WEBPACK_IMPORTED_MODULE_1__["getRandomValues"])(new Uint32Array(numAlternatives));
    }
    getHash(hashIndex, low, high) {
        let hash = this.hashSeeds[hashIndex];
        hash = Object(neuroglancer_gpu_hash_hash_function__WEBPACK_IMPORTED_MODULE_0__["hashCombine"])(hash, low);
        hash = Object(neuroglancer_gpu_hash_hash_function__WEBPACK_IMPORTED_MODULE_0__["hashCombine"])(hash, high);
        return this.entryStride * (hash & (this.tableSize - 1));
    }
    /**
     * Iterates over the Uint64 keys contained in the hash set.
     *
     * Creates a new Uint64 object at every iteration (otherwise spread and Array.from() fail)
     */
    *keys() {
        let { emptyLow, emptyHigh, entryStride } = this;
        let { table } = this;
        for (let i = 0, length = table.length; i < length; i += entryStride) {
            let low = table[i], high = table[i + 1];
            if (low !== emptyLow || high !== emptyHigh) {
                yield new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_2__["Uint64"](low, high);
            }
        }
    }
    indexOfPair(low, high) {
        let { table, emptyLow, emptyHigh } = this;
        if (low === emptyLow && high === emptyHigh) {
            return -1;
        }
        for (let i = 0, numHashes = this.hashSeeds.length; i < numHashes; ++i) {
            let h = this.getHash(i, low, high);
            if (table[h] === low && table[h + 1] === high) {
                return h;
            }
        }
        return -1;
    }
    /**
     * Returns the offset into the hash table of the specified element, or -1 if the element is not
     * present.
     */
    indexOf(x) {
        return this.indexOfPair(x.low, x.high);
    }
    /**
     * Changes the empty key to a value that is not equal to the current empty key and is not present
     * in the table.
     *
     * This is called when an attempt is made to insert the empty key.
     */
    chooseAnotherEmptyKey() {
        let { emptyLow, emptyHigh, table, entryStride } = this;
        let newLow, newHigh;
        while (true) {
            newLow = (Math.random() * 0x100000000) >>> 0;
            newHigh = (Math.random() * 0x100000000) >>> 0;
            if (newLow === emptyLow && newHigh === emptyHigh) {
                continue;
            }
            if (this.hasPair(newLow, newHigh)) {
                continue;
            }
            break;
        }
        this.emptyLow = newLow;
        this.emptyHigh = newHigh;
        // Replace empty keys in the table.
        for (let h = 0, length = table.length; h < length; h += entryStride) {
            if (table[h] === emptyLow && table[h + 1] === emptyHigh) {
                table[h] = newLow;
                table[h + 1] = newHigh;
            }
        }
    }
    /**
     * Returns true iff the specified element is present.
     */
    has(x) {
        return this.indexOf(x) !== -1;
    }
    /**
     * Returns true iff the specified element is present.
     */
    hasPair(low, high) {
        return this.indexOfPair(low, high) !== -1;
    }
    delete(x) {
        let index = this.indexOf(x);
        if (index !== -1) {
            let { table } = this;
            table[index] = this.emptyLow;
            table[index + 1] = this.emptyHigh;
            ++this.generation;
            this.size--;
            return true;
        }
        return false;
    }
    clearTable() {
        let { table, entryStride, emptyLow, emptyHigh } = this;
        let length = table.length;
        for (let h = 0; h < length; h += entryStride) {
            table[h] = emptyLow;
            table[h + 1] = emptyHigh;
        }
    }
    clear() {
        if (this.size === 0) {
            return false;
        }
        this.size = 0;
        ++this.generation;
        this.clearTable();
        return true;
    }
    reserve(x) {
        if (x > this.capacity) {
            this.backupPending();
            this.grow(x);
            this.restorePending();
            return true;
        }
        return false;
    }
    swapPending(table, offset) {
        let tempLow = pendingLow, tempHigh = pendingHigh;
        this.storePending(table, offset);
        table[offset] = tempLow;
        table[offset + 1] = tempHigh;
    }
    storePending(table, offset) {
        pendingLow = table[offset];
        pendingHigh = table[offset + 1];
    }
    backupPending() {
        backupPendingLow = pendingLow;
        backupPendingHigh = pendingHigh;
    }
    restorePending() {
        pendingLow = backupPendingLow;
        pendingHigh = backupPendingHigh;
    }
    tryToInsert() {
        if (DEBUG) {
            console.log(`tryToInsert: ${pendingLow}, ${pendingHigh}`);
        }
        let attempt = 0;
        let { emptyLow, emptyHigh, maxAttempts, table } = this;
        let numHashes = this.hashSeeds.length;
        let tableIndex = Math.floor(Math.random() * numHashes);
        while (true) {
            let h = this.getHash(tableIndex, pendingLow, pendingHigh);
            this.swapPending(table, h);
            if (pendingLow === emptyLow && pendingHigh === emptyHigh) {
                return true;
            }
            if (++attempt === maxAttempts) {
                break;
            }
            tableIndex = (tableIndex + Math.floor(Math.random() * (numHashes - 1)) + 1) % numHashes;
        }
        return false;
    }
    allocate(tableSize) {
        this.tableSize = tableSize;
        let { entryStride } = this;
        this.table = new Uint32Array(tableSize * entryStride);
        this.maxAttempts = tableSize;
        this.clearTable();
        this.capacity = tableSize * this.loadFactor;
        this.mungedEmptyKey = -1;
    }
    rehash(oldTable, tableSize) {
        if (DEBUG) {
            console.log('rehash begin');
        }
        this.allocate(tableSize);
        this.updateHashFunctions(this.hashSeeds.length);
        let { emptyLow, emptyHigh, entryStride } = this;
        for (let h = 0, length = oldTable.length; h < length; h += entryStride) {
            let low = oldTable[h], high = oldTable[h + 1];
            if (low !== emptyLow || high !== emptyHigh) {
                this.storePending(oldTable, h);
                if (!this.tryToInsert()) {
                    if (DEBUG) {
                        console.log('rehash failed');
                    }
                    return false;
                }
            }
        }
        if (DEBUG) {
            console.log('rehash end');
        }
        return true;
    }
    grow(desiredTableSize) {
        if (DEBUG) {
            console.log(`grow: ${desiredTableSize}`);
        }
        let oldTable = this.table;
        let { tableSize } = this;
        while (tableSize < desiredTableSize) {
            tableSize *= 2;
        }
        while (true) {
            for (let rehashAttempt = 0; rehashAttempt < this.maxRehashAttempts; ++rehashAttempt) {
                if (this.rehash(oldTable, tableSize)) {
                    if (DEBUG) {
                        console.log(`grow end`);
                    }
                    return;
                }
            }
            tableSize *= 2;
        }
    }
    insertInternal() {
        ++this.generation;
        if (pendingLow === this.emptyLow && pendingHigh === this.emptyHigh) {
            this.chooseAnotherEmptyKey();
        }
        if (++this.size > this.capacity) {
            this.backupPending();
            this.grow(this.tableSize * 2);
            this.restorePending();
        }
        while (!this.tryToInsert()) {
            this.backupPending();
            this.grow(this.tableSize);
            this.restorePending();
        }
    }
}
class HashSetUint64 extends HashTableBase {
    add(x) {
        let { low, high } = x;
        if (this.hasPair(low, high)) {
            return false;
        }
        if (DEBUG) {
            console.log(`add: ${low},${high}`);
        }
        pendingLow = low;
        pendingHigh = high;
        this.insertInternal();
        return true;
    }
    /**
     * Iterates over the keys.
     * Creates a new Uint64 object at every iteration (otherwise spread and Array.from() fail)
     */
    [Symbol.iterator]() {
        return this.keys();
    }
}
HashSetUint64.prototype.entryStride = 2;
// Value that needs to be inserted.  Temporary variables used during insert.  These can safely be
// global because control never leaves functions defined in this module while these are in use.
let pendingValueLow = 0, pendingValueHigh = 0, backupPendingValueLow = 0, backupPendingValueHigh = 0;
class HashMapUint64 extends HashTableBase {
    set(key, value) {
        let { low, high } = key;
        if (this.hasPair(low, high)) {
            return false;
        }
        if (DEBUG) {
            console.log(`add: ${low},${high} -> ${value.low},${value.high}`);
        }
        pendingLow = low;
        pendingHigh = high;
        pendingValueLow = value.low;
        pendingValueHigh = value.high;
        this.insertInternal();
        return true;
    }
    get(key, value) {
        let h = this.indexOf(key);
        if (h === -1) {
            return false;
        }
        let { table } = this;
        value.low = table[h + 2];
        value.high = table[h + 3];
        return true;
    }
    swapPending(table, offset) {
        let tempLow = pendingValueLow, tempHigh = pendingValueHigh;
        super.swapPending(table, offset);
        table[offset + 2] = tempLow;
        table[offset + 3] = tempHigh;
    }
    storePending(table, offset) {
        super.storePending(table, offset);
        pendingValueLow = table[offset + 2];
        pendingValueHigh = table[offset + 3];
    }
    backupPending() {
        super.backupPending();
        backupPendingValueLow = pendingValueLow;
        backupPendingValueHigh = pendingValueHigh;
    }
    restorePending() {
        super.restorePending();
        pendingValueLow = backupPendingValueLow;
        pendingValueHigh = backupPendingValueHigh;
    }
    /**
     * Iterates over entries.
     * Creates new Uint64 objects at every iteration (otherwise spread and Array.from() fail)
     */
    [Symbol.iterator]() {
        return this.entries();
    }
    /**
     * Iterates over entries.
     * Creates new Uint64 objects at every iteration (otherwise spread and Array.from() fail)
     */
    *entries() {
        let { emptyLow, emptyHigh, entryStride } = this;
        let { table } = this;
        for (let i = 0, length = table.length; i < length; i += entryStride) {
            let low = table[i], high = table[i + 1];
            if (low !== emptyLow || high !== emptyHigh) {
                let key = new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_2__["Uint64"](low, high);
                let value = new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_2__["Uint64"](table[i + 2], table[i + 3]);
                yield [key, value];
            }
        }
    }
}
HashMapUint64.prototype.entryStride = 4;


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/mesh/backend.ts":
/*!****************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/mesh/backend.ts ***!
  \****************************************************************************************************/
/*! exports provided: ManifestChunk, FragmentChunk, decodeJsonManifestChunk, computeVertexNormals, encodeNormals32fx3ToOctahedron8x2, decodeVertexPositionsAndIndices, decodeTriangleVertexPositionsAndIndices, decodeTriangleVertexPositionsAndIndicesDraco, MeshSource, FragmentSource, MeshLayer, MultiscaleManifestChunk, MultiscaleFragmentChunk, MultiscaleMeshSource, MultiscaleFragmentSource, MultiscaleMeshLayer, assignMeshFragmentData, assignMultiscaleMeshFragmentData, generateHigherOctreeLevel, computeOctreeChildOffsets */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ManifestChunk", function() { return ManifestChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FragmentChunk", function() { return FragmentChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeJsonManifestChunk", function() { return decodeJsonManifestChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeVertexNormals", function() { return computeVertexNormals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encodeNormals32fx3ToOctahedron8x2", function() { return encodeNormals32fx3ToOctahedron8x2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeVertexPositionsAndIndices", function() { return decodeVertexPositionsAndIndices; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeTriangleVertexPositionsAndIndices", function() { return decodeTriangleVertexPositionsAndIndices; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeTriangleVertexPositionsAndIndicesDraco", function() { return decodeTriangleVertexPositionsAndIndicesDraco; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshSource", function() { return MeshSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FragmentSource", function() { return FragmentSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MeshLayer", function() { return MeshLayer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiscaleManifestChunk", function() { return MultiscaleManifestChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiscaleFragmentChunk", function() { return MultiscaleFragmentChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiscaleMeshSource", function() { return MultiscaleMeshSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiscaleFragmentSource", function() { return MultiscaleFragmentSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiscaleMeshLayer", function() { return MultiscaleMeshLayer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assignMeshFragmentData", function() { return assignMeshFragmentData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assignMultiscaleMeshFragmentData", function() { return assignMultiscaleMeshFragmentData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "generateHigherOctreeLevel", function() { return generateHigherOctreeLevel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeOctreeChildOffsets", function() { return computeOctreeChildOffsets; });
/* harmony import */ var neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/chunk_manager/backend */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/backend.ts");
/* harmony import */ var neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/chunk_manager/base */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/base.ts");
/* harmony import */ var neuroglancer_mesh_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/mesh/base */ "../../../../../../neuroglancer/src/neuroglancer/mesh/base.ts");
/* harmony import */ var neuroglancer_mesh_multiscale__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/mesh/multiscale */ "../../../../../../neuroglancer/src/neuroglancer/mesh/multiscale.ts");
/* harmony import */ var neuroglancer_mesh_triangle_strips__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! neuroglancer/mesh/triangle_strips */ "../../../../../../neuroglancer/src/neuroglancer/mesh/triangle_strips.ts");
/* harmony import */ var neuroglancer_segmentation_display_state_backend__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! neuroglancer/segmentation_display_state/backend */ "../../../../../../neuroglancer/src/neuroglancer/segmentation_display_state/backend.ts");
/* harmony import */ var neuroglancer_segmentation_display_state_base__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! neuroglancer/segmentation_display_state/base */ "../../../../../../neuroglancer/src/neuroglancer/segmentation_display_state/base.ts");
/* harmony import */ var neuroglancer_trackable_value__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! neuroglancer/trackable_value */ "../../../../../../neuroglancer/src/neuroglancer/trackable_value.ts");
/* harmony import */ var neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! neuroglancer/util/endian */ "../../../../../../neuroglancer/src/neuroglancer/util/endian.ts");
/* harmony import */ var neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! neuroglancer/util/geom */ "../../../../../../neuroglancer/src/neuroglancer/util/geom.ts");
/* harmony import */ var neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! neuroglancer/util/json */ "../../../../../../neuroglancer/src/neuroglancer/util/json.ts");
/* harmony import */ var neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! neuroglancer/util/uint64 */ "../../../../../../neuroglancer/src/neuroglancer/util/uint64.ts");
/* harmony import */ var neuroglancer_util_zorder__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! neuroglancer/util/zorder */ "../../../../../../neuroglancer/src/neuroglancer/util/zorder.ts");
/* harmony import */ var neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! neuroglancer/visibility_priority/backend */ "../../../../../../neuroglancer/src/neuroglancer/visibility_priority/backend.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/* harmony import */ var neuroglancer_datasource_graphene_base__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! neuroglancer/datasource/graphene/base */ "../../../../../../neuroglancer/src/neuroglancer/datasource/graphene/base.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

















const MESH_OBJECT_MANIFEST_CHUNK_PRIORITY = 100;
const MESH_OBJECT_FRAGMENT_CHUNK_PRIORITY = 50;
const CONVERT_TO_TRIANGLE_STRIPS = false;
// Chunk that contains the list of fragments that make up a single object.
class ManifestChunk extends neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["Chunk"] {
    constructor() {
        super();
        this.objectId = new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_11__["Uint64"]();
    }
    // We can't save a reference to objectId, because it may be a temporary
    // object.
    initializeManifestChunk(key, objectId, verifyFragments) {
        // default behaviour for manifest is to verify fragments exist
        super.initialize(key);
        this.objectId.assign(objectId);
        this.verifyFragments = verifyFragments;
    }
    freeSystemMemory() {
        this.fragmentIds = null;
    }
    serialize(msg, transfers) {
        super.serialize(msg, transfers);
        msg.fragmentIds = this.fragmentIds;
    }
    downloadSucceeded() {
        // We can't easily determine the memory usage of the JSON manifest.  Just use 100 bytes as a
        // default value.
        this.systemMemoryBytes = 100;
        this.gpuMemoryBytes = 0;
        super.downloadSucceeded();
        if (this.priorityTier < neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__["ChunkPriorityTier"].RECENT) {
            this.source.chunkManager.scheduleUpdateChunkPriorities();
        }
    }
    toString() {
        return this.objectId.toString();
    }
    extractFragmentKey(fragmentId) {
        if (this.manifestType === neuroglancer_datasource_graphene_base__WEBPACK_IMPORTED_MODULE_15__["GRAPHENE_MANIFEST_SHARDED"]) {
            return this.extractGrapheneFragmentKey(fragmentId);
        }
        return { key: fragmentId, id: fragmentId };
    }
    extractGrapheneFragmentKey(fragmentId) {
        // extract segment ID from fragment ID
        // use it as key, the rest is information for reading the fragment
        // ignores tilde at 0 index
        let parts = fragmentId.substr(1).split(/:(.+)/);
        let key = parts[0];
        fragmentId = parts[1];
        return { key: key, id: fragmentId };
    }
}
function serializeMeshData(data, msg, transfers) {
    const { vertexPositions, indices, vertexNormals, strips } = data;
    msg['vertexPositions'] = vertexPositions;
    msg['indices'] = indices;
    msg['strips'] = strips;
    msg['vertexNormals'] = vertexNormals;
    let vertexPositionsBuffer = vertexPositions.buffer;
    transfers.push(vertexPositionsBuffer);
    let indicesBuffer = indices.buffer;
    if (indicesBuffer !== vertexPositionsBuffer) {
        transfers.push(indicesBuffer);
    }
    transfers.push(vertexNormals.buffer);
}
function getMeshDataSize(data) {
    let { vertexPositions, indices, vertexNormals } = data;
    return vertexPositions.byteLength + indices.byteLength + vertexNormals.byteLength;
}
/**
 * Chunk that contains the mesh for a single fragment of a single object.
 */
class FragmentChunk extends neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["Chunk"] {
    constructor() {
        super();
        this.manifestChunk = null;
        this.fragmentId = null;
        this.meshData = null;
    }
    initializeFragmentChunk(key, manifestChunk, fragmentId, verifyFragment) {
        super.initialize(key);
        this.manifestChunk = manifestChunk;
        this.fragmentId = fragmentId;
        this.verifyFragment = verifyFragment;
    }
    freeSystemMemory() {
        this.manifestChunk = null;
        this.meshData = null;
        this.fragmentId = null;
    }
    serialize(msg, transfers) {
        super.serialize(msg, transfers);
        serializeMeshData(this.meshData, msg, transfers);
        this.meshData = null;
    }
    downloadSucceeded() {
        this.systemMemoryBytes = this.gpuMemoryBytes = getMeshDataSize(this.meshData);
        super.downloadSucceeded();
    }
}
/**
 * Assigns chunk.fragmentKeys to response[keysPropertyName].
 *
 * Verifies that response[keysPropertyName] is an array of strings.
 */
function decodeJsonManifestChunk(chunk, response, keysPropertyName) {
    Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_10__["verifyObject"])(response);
    chunk.fragmentIds = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_10__["verifyObjectProperty"])(response, keysPropertyName, neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_10__["verifyStringArray"]);
}
/**
 * Computes normal vectors for each vertex of a triangular mesh.
 *
 * The normal vector for each triangle with vertices (v0, v1, v2) is computed as the (normalized)
 * cross product of (v1 - v0, v2 - v1).  The normal vector for each vertex is obtained by averaging
 * the normal vector of each of the triangles that contains it.
 *
 * @param positions The vertex positions in [x0, y0, z0, x1, y1, z1, ...] format.
 * @param indices The indices of the triangle vertices.  Each triplet of consecutive values
 *     specifies a triangle.
 */
function computeVertexNormals(positions, indices) {
    const faceNormal = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create();
    const v1v0 = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create();
    const v2v1 = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].create();
    let vertexNormals = new Float32Array(positions.length);
    let numIndices = indices.length;
    for (let i = 0; i < numIndices; i += 3) {
        let i0 = indices[i] * 3, i1 = indices[i + 1] * 3, i2 = indices[i + 2] * 3;
        for (let j = 0; j < 3; ++j) {
            v1v0[j] = positions[i1 + j] - positions[i0 + j];
            v2v1[j] = positions[i2 + j] - positions[i1 + j];
        }
        neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].cross(faceNormal, v1v0, v2v1);
        neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].normalize(faceNormal, faceNormal);
        for (let k = 0; k < 3; ++k) {
            let index = indices[i + k];
            let offset = index * 3;
            for (let j = 0; j < 3; ++j) {
                vertexNormals[offset + j] += faceNormal[j];
            }
        }
    }
    // Normalize all vertex normals.
    let numVertices = vertexNormals.length;
    for (let i = 0; i < numVertices; i += 3) {
        let vec = vertexNormals.subarray(i, i + 3);
        neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["vec3"].normalize(vec, vec);
    }
    return vertexNormals;
}
/**
 * Converts a floating-point number in the range `[-1, 1]` to an integer in the range `[-127, 127]`.
 */
function snorm8(x) {
    return Math.min(Math.max(-127, x * 127 + 0.5), 127) >>> 0;
}
function signNotZero(x) {
    return x < 0 ? -1 : 1;
}
/**
 * Encodes normal vectors represented as 3x32-bit floating vectors into a 2x8-bit octahedron
 * representation.
 *
 * Zina H. Cigolle, Sam Donow, Daniel Evangelakos, Michael Mara, Morgan McGuire, and Quirin Meyer,
 * Survey of Efficient Representations for Independent Unit Vectors, Journal of Computer Graphics
 * Techniques (JCGT), vol. 3, no. 2, 1-30, 2014
 *
 * Available online http://jcgt.org/published/0003/02/01/
 *
 * @param out[out] Row-major array of shape `[n, 2]` set to octahedron representation.
 * @param normals[in] Row-major array of shape `[n, 3]` specifying unit normal vectors.
 */
function encodeNormals32fx3ToOctahedron8x2(out, normals) {
    const length = normals.length;
    let outIndex = 0;
    for (let i = 0; i < length; i += 3) {
        const x = normals[i], y = normals[i + 1], z = normals[i + 2];
        const invL1Norm = 1 / (Math.abs(x) + Math.abs(y) + Math.abs(z));
        if (z < 0) {
            out[outIndex] = snorm8((1 - Math.abs(y * invL1Norm)) * signNotZero(x));
            out[outIndex + 1] = snorm8((1 - Math.abs(x * invL1Norm)) * signNotZero(y));
        }
        else {
            out[outIndex] = snorm8(x * invL1Norm);
            out[outIndex + 1] = snorm8(y * invL1Norm);
        }
        outIndex += 2;
    }
}
/**
 * Extracts vertex positions and indices of the specified endianness from `data'.
 *
 * The vertexByteOffset specifies the byte offset into `data' of the start of the vertex position
 * data.  The vertex data must consist of verticesPerPrimitive * numVertices 32-bit float values.
 *
 * If indexByteOffset is not specified, it defaults to the end of the vertex position data.  If
 * numPrimitives is not specified, it is assumed that the index data continues until the end of the
 * array.
 */
function decodeVertexPositionsAndIndices(verticesPerPrimitive, data, endianness, vertexByteOffset, numVertices, indexByteOffset, numPrimitives) {
    let vertexPositions = new Float32Array(data, vertexByteOffset, numVertices * 3);
    Object(neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_8__["convertEndian32"])(vertexPositions, endianness);
    if (indexByteOffset === undefined) {
        indexByteOffset = vertexByteOffset + 12 * numVertices;
    }
    let numIndices;
    if (numPrimitives !== undefined) {
        numIndices = numPrimitives * verticesPerPrimitive;
    }
    // For compatibility with Firefox, length argument must not be undefined.
    let indices = numIndices === undefined ? new Uint32Array(data, indexByteOffset) :
        new Uint32Array(data, indexByteOffset, numIndices);
    if (indices.length % verticesPerPrimitive !== 0) {
        throw new Error(`Number of indices is not a multiple of ${verticesPerPrimitive}: ${indices.length}.`);
    }
    Object(neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_8__["convertEndian32"])(indices, endianness);
    return { vertexPositions, indices };
}
/**
 * Extracts vertex positions and triangle vertex indices of the specified endianness from `data'.
 *
 * Vertex normals are computed.
 *
 * See decodeVertexPositionsAndIndices above.
 */
function decodeTriangleVertexPositionsAndIndices(data, endianness, vertexByteOffset, numVertices, indexByteOffset, numTriangles) {
    return decodeVertexPositionsAndIndices(
    /*verticesPerPrimitive=*/ 3, data, endianness, vertexByteOffset, numVertices, indexByteOffset, numTriangles);
}
function decodeTriangleVertexPositionsAndIndicesDraco(data, decoderModule) {
    const decoder = new decoderModule.Decoder();
    const buffer = new decoderModule.DecoderBuffer();
    buffer.Init(new Int8Array(data), data.byteLength);
    const mesh = new decoderModule.Mesh();
    const decodeStatus = decoder.DecodeBufferToMesh(buffer, mesh);
    if (!decodeStatus.ok()) {
        // Not a draco mesh
        throw new TypeError('Draco decoding failed');
    }
    const decoderAttr = decoderModule.POSITION;
    const attrId = decoder.GetAttributeId(mesh, decoderAttr);
    if (attrId < 0) {
        // Draco mesh has no position attribute, which we need
        throw new Error('Invalid Draco mesh');
    }
    decoderModule.destroy(buffer);
    const numFaces = mesh.num_faces();
    const numIndices = numFaces * 3;
    const numPoints = mesh.num_points();
    const indices = new Uint32Array(numIndices);
    // Add Faces to mesh
    const ia = new decoderModule.DracoInt32Array();
    for (let i = 0; i < numFaces; ++i) {
        decoder.GetFaceFromMesh(mesh, i, ia);
        const index = i * 3;
        indices[index] = ia.GetValue(0);
        indices[index + 1] = ia.GetValue(1);
        indices[index + 2] = ia.GetValue(2);
    }
    decoderModule.destroy(ia);
    const stride = 3;
    const numValues = numPoints * stride;
    const attribute = decoder.GetAttribute(mesh, attrId);
    const attributeData = new decoderModule.DracoFloat32Array();
    decoder.GetAttributeFloatForAllPoints(mesh, attribute, attributeData);
    // Get vertex coordinates from mesh
    const vertexPositions = new Float32Array(numValues);
    for (let i = 0; i < numValues; ++i) {
        vertexPositions[i] = attributeData.GetValue(i);
    }
    decoderModule.destroy(attributeData);
    return { vertexPositions, indices };
}
class MeshSource extends neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["ChunkSource"] {
    constructor(rpc, options) {
        super(rpc, options);
        let fragmentSource = this.fragmentSource =
            this.registerDisposer(rpc.getRef(options['fragmentSource']));
        fragmentSource.meshSource = this;
    }
    getChunk(objectId, verifyFragments) {
        const key = Object(neuroglancer_segmentation_display_state_base__WEBPACK_IMPORTED_MODULE_6__["getObjectKey"])(objectId);
        let chunk = this.chunks.get(key);
        if (chunk === undefined) {
            chunk = this.getNewChunk_(ManifestChunk);
            chunk.initializeManifestChunk(key, objectId, verifyFragments);
            this.addChunk(chunk);
        }
        return chunk;
    }
    getFragmentChunk(manifestChunk, fragmentId) {
        let fragmentSource = this.fragmentSource;
        let extractInfo = manifestChunk.extractFragmentKey(fragmentId);
        let key = extractInfo.key;
        fragmentId = extractInfo.id;
        let chunk = fragmentSource.chunks.get(key);
        if (chunk === undefined) {
            let verifyFragment = manifestChunk.verifyFragments;
            // if not set explicitly, assume verify true
            if (verifyFragment === undefined)
                verifyFragment = true;
            chunk = fragmentSource.getNewChunk_(FragmentChunk);
            chunk.initializeFragmentChunk(key, manifestChunk, fragmentId, verifyFragment);
            fragmentSource.addChunk(chunk);
        }
        return chunk;
    }
}
let FragmentSource = class FragmentSource extends neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["ChunkSource"] {
    constructor() {
        super(...arguments);
        this.meshSource = null;
    }
    download(chunk, cancellationToken) {
        return this.meshSource.downloadFragment(chunk, cancellationToken);
    }
};
FragmentSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_14__["registerSharedObject"])(neuroglancer_mesh_base__WEBPACK_IMPORTED_MODULE_2__["FRAGMENT_SOURCE_RPC_ID"])
], FragmentSource);

let MeshLayer = class MeshLayer extends neuroglancer_segmentation_display_state_backend__WEBPACK_IMPORTED_MODULE_5__["SegmentationLayerSharedObjectCounterpart"] {
    constructor(rpc, options) {
        super(rpc, options);
        this.viewStates = new neuroglancer_trackable_value__WEBPACK_IMPORTED_MODULE_7__["WatchableSet"]();
        this.viewStatesDisposers = new Map();
        this.source = this.registerDisposer(rpc.getRef(options['source']));
        this.registerDisposer(this.chunkManager.recomputeChunkPriorities.add(() => {
            this.updateChunkPriorities();
        }));
        const scheduleUpdateChunkPriorities = () => {
            this.chunkManager.scheduleUpdateChunkPriorities();
        };
        this.registerDisposer(this.viewStates.changed.add(() => {
            const { viewStatesDisposers } = this;
            const { viewStates } = this;
            for (const [viewState, disposer] of viewStatesDisposers) {
                if (!viewStates.has(viewState)) {
                    disposer();
                }
            }
            for (const viewState of viewStates) {
                if (!viewStatesDisposers.has(viewState)) {
                    viewState.viewport.changed.add(scheduleUpdateChunkPriorities);
                    viewState.visibility.changed.add(scheduleUpdateChunkPriorities);
                    viewStatesDisposers.set(viewState, () => {
                        viewState.viewport.changed.remove(scheduleUpdateChunkPriorities);
                        viewState.visibility.changed.remove(scheduleUpdateChunkPriorities);
                    });
                }
            }
        }));
        this.registerDisposer(() => {
            for (const disposer of this.viewStatesDisposers.values()) {
                disposer();
            }
        });
    }
    updateChunkPriorities() {
        const visibility = this.visibility.value;
        if (visibility === Number.NEGATIVE_INFINITY) {
            return;
        }
        const priorityTier = Object(neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_13__["getPriorityTier"])(visibility);
        const basePriority = Object(neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_13__["getBasePriority"])(visibility);
        const { source, chunkManager } = this;
        Object(neuroglancer_segmentation_display_state_base__WEBPACK_IMPORTED_MODULE_6__["forEachVisibleSegment3D"])(this, objectId => {
            // if objectId exists in rootSegmentsAfterEdit, do not verify mesh fragments existence
            const manifestChunk = source.getChunk(objectId, !this.rootSegmentsAfterEdit.has(objectId));
            chunkManager.requestChunk(manifestChunk, priorityTier, basePriority + MESH_OBJECT_MANIFEST_CHUNK_PRIORITY);
            const state = manifestChunk.state;
            if (state === neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__["ChunkState"].SYSTEM_MEMORY_WORKER || state === neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__["ChunkState"].SYSTEM_MEMORY ||
                state === neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__["ChunkState"].GPU_MEMORY) {
                for (let fragmentId of manifestChunk.fragmentIds) {
                    let fragmentChunk = source.getFragmentChunk(manifestChunk, fragmentId);
                    chunkManager.requestChunk(fragmentChunk, priorityTier, basePriority + MESH_OBJECT_FRAGMENT_CHUNK_PRIORITY);
                }
            }
        });
        this.rootSegmentsAfterEdit.clear();
    }
};
MeshLayer = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_14__["registerSharedObject"])(neuroglancer_mesh_base__WEBPACK_IMPORTED_MODULE_2__["MESH_LAYER_RPC_ID"])
], MeshLayer);

// Chunk that contains the list of fragments that make up a single object.
class MultiscaleManifestChunk extends neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["Chunk"] {
    constructor() {
        super();
        this.objectId = new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_11__["Uint64"]();
    }
    // We can't save a reference to objectId, because it may be a temporary
    // object.
    initializeManifestChunk(key, objectId) {
        super.initialize(key);
        this.objectId.assign(objectId);
    }
    freeSystemMemory() {
        this.manifest = undefined;
    }
    serialize(msg, transfers) {
        super.serialize(msg, transfers);
        msg.manifest = this.manifest;
    }
    downloadSucceeded() {
        this.systemMemoryBytes = this.manifest.octree.byteLength;
        this.gpuMemoryBytes = 0;
        super.downloadSucceeded();
        if (this.priorityTier < neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__["ChunkPriorityTier"].RECENT) {
            this.source.chunkManager.scheduleUpdateChunkPriorities();
        }
    }
    toString() {
        return this.objectId.toString();
    }
}
/**
 * Chunk that contains the mesh for a single fragment of a single object.
 */
class MultiscaleFragmentChunk extends neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["Chunk"] {
    constructor() {
        super();
        this.subChunkOffsets = null;
        this.meshData = null;
        this.lod = 0;
        this.chunkIndex = 0;
        this.manifestChunk = null;
    }
    freeSystemMemory() {
        this.meshData = this.subChunkOffsets = null;
    }
    serialize(msg, transfers) {
        super.serialize(msg, transfers);
        serializeMeshData(this.meshData, msg, transfers);
        const { subChunkOffsets } = this;
        msg['subChunkOffsets'] = subChunkOffsets;
        transfers.push(subChunkOffsets.buffer);
        this.meshData = this.subChunkOffsets = null;
    }
    downloadSucceeded() {
        const { subChunkOffsets } = this;
        this.systemMemoryBytes = this.gpuMemoryBytes = getMeshDataSize(this.meshData);
        this.systemMemoryBytes += subChunkOffsets.byteLength;
        super.downloadSucceeded();
    }
}
class MultiscaleMeshSource extends neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["ChunkSource"] {
    constructor(rpc, options) {
        super(rpc, options);
        let fragmentSource = this.fragmentSource =
            this.registerDisposer(rpc.getRef(options['fragmentSource']));
        this.format = options['format'];
        fragmentSource.meshSource = this;
    }
    getChunk(objectId) {
        const key = Object(neuroglancer_segmentation_display_state_base__WEBPACK_IMPORTED_MODULE_6__["getObjectKey"])(objectId);
        let chunk = this.chunks.get(key);
        if (chunk === undefined) {
            chunk = this.getNewChunk_(MultiscaleManifestChunk);
            chunk.initializeManifestChunk(key, objectId);
            this.addChunk(chunk);
        }
        return chunk;
    }
    getFragmentChunk(manifestChunk, lod, chunkIndex) {
        let key = `${manifestChunk.key}/${lod}:${chunkIndex}`;
        let fragmentSource = this.fragmentSource;
        let chunk = fragmentSource.chunks.get(key);
        if (chunk === undefined) {
            chunk = fragmentSource.getNewChunk_(MultiscaleFragmentChunk);
            chunk.initialize(key);
            chunk.lod = lod;
            chunk.chunkIndex = chunkIndex;
            chunk.manifestChunk = manifestChunk;
            fragmentSource.addChunk(chunk);
        }
        return chunk;
    }
}
let MultiscaleFragmentSource = class MultiscaleFragmentSource extends neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["ChunkSource"] {
    constructor() {
        super(...arguments);
        this.meshSource = null;
    }
    download(chunk, cancellationToken) {
        return this.meshSource.downloadFragment(chunk, cancellationToken);
    }
};
MultiscaleFragmentSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_14__["registerSharedObject"])(neuroglancer_mesh_base__WEBPACK_IMPORTED_MODULE_2__["MULTISCALE_FRAGMENT_SOURCE_RPC_ID"])
], MultiscaleFragmentSource);

let MultiscaleMeshLayer = class MultiscaleMeshLayer extends neuroglancer_segmentation_display_state_backend__WEBPACK_IMPORTED_MODULE_5__["SegmentationLayerSharedObjectCounterpart"] {
    constructor(rpc, options) {
        super(rpc, options);
        this.viewStates = new neuroglancer_trackable_value__WEBPACK_IMPORTED_MODULE_7__["WatchableSet"]();
        this.viewStatesDisposers = new Map();
        this.source = this.registerDisposer(rpc.getRef(options['source']));
        this.registerDisposer(this.chunkManager.recomputeChunkPriorities.add(() => {
            this.updateChunkPriorities();
        }));
        const scheduleUpdateChunkPriorities = () => {
            this.chunkManager.scheduleUpdateChunkPriorities();
        };
        this.registerDisposer(this.viewStates.changed.add(() => {
            const { viewStatesDisposers } = this;
            const { viewStates } = this;
            for (const [viewState, disposer] of viewStatesDisposers) {
                if (!viewStates.has(viewState)) {
                    disposer();
                }
            }
            for (const viewState of viewStates) {
                if (!viewStatesDisposers.has(viewState)) {
                    viewState.viewport.changed.add(scheduleUpdateChunkPriorities);
                    viewState.visibility.changed.add(scheduleUpdateChunkPriorities);
                    viewStatesDisposers.set(viewState, () => {
                        viewState.viewport.changed.remove(scheduleUpdateChunkPriorities);
                        viewState.visibility.changed.remove(scheduleUpdateChunkPriorities);
                    });
                }
            }
        }));
        this.registerDisposer(() => {
            for (const disposer of this.viewStatesDisposers.values()) {
                disposer();
            }
        });
    }
    updateChunkPriorities() {
        const maxVisibility = this.visibility.value;
        if (maxVisibility === Number.NEGATIVE_INFINITY) {
            return;
        }
        const manifestChunks = new Array();
        {
            const priorityTier = Object(neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_13__["getPriorityTier"])(maxVisibility);
            const basePriority = Object(neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_13__["getBasePriority"])(maxVisibility);
            const { source, chunkManager } = this;
            Object(neuroglancer_segmentation_display_state_base__WEBPACK_IMPORTED_MODULE_6__["forEachVisibleSegment3D"])(this, objectId => {
                const manifestChunk = source.getChunk(objectId);
                chunkManager.requestChunk(manifestChunk, priorityTier, basePriority + MESH_OBJECT_MANIFEST_CHUNK_PRIORITY);
                const state = manifestChunk.state;
                if (state === neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__["ChunkState"].SYSTEM_MEMORY_WORKER || state === neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__["ChunkState"].SYSTEM_MEMORY ||
                    state === neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__["ChunkState"].GPU_MEMORY) {
                    manifestChunks.push(manifestChunk);
                }
            });
        }
        if (manifestChunks.length === 0) {
            return;
        }
        const { source, chunkManager } = this;
        for (const viewState of this.viewStates) {
            const visibility = viewState.visibility.value;
            if (visibility === Number.NEGATIVE_INFINITY) {
                continue;
            }
            const priorityTier = Object(neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_13__["getPriorityTier"])(visibility);
            const basePriority = Object(neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_13__["getBasePriority"])(visibility);
            const viewport = viewState.viewport.value;
            const modelViewProjection = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["mat4"].create();
            neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["mat4"].multiply(modelViewProjection, viewport.viewProjectionMat, neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["mat4"].multiply(modelViewProjection, this.objectToDataTransform.value, source.format.transform));
            const clippingPlanes = Object(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_9__["getFrustrumPlanes"])(new Float32Array(24), modelViewProjection);
            const detailCutoff = this.renderScaleTarget.value;
            for (const manifestChunk of manifestChunks) {
                const maxLod = manifestChunk.manifest.lodScales.length - 1;
                Object(neuroglancer_mesh_multiscale__WEBPACK_IMPORTED_MODULE_3__["getDesiredMultiscaleMeshChunks"])(manifestChunk.manifest, modelViewProjection, clippingPlanes, detailCutoff, viewport.width, viewport.height, (lod, chunkIndex, _renderScale, empty) => {
                    if (empty)
                        return;
                    let fragmentChunk = source.getFragmentChunk(manifestChunk, lod, chunkIndex);
                    chunkManager.requestChunk(fragmentChunk, priorityTier, basePriority + MESH_OBJECT_FRAGMENT_CHUNK_PRIORITY - maxLod + lod);
                });
            }
        }
    }
};
MultiscaleMeshLayer = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_14__["registerSharedObject"])(neuroglancer_mesh_base__WEBPACK_IMPORTED_MODULE_2__["MULTISCALE_MESH_LAYER_RPC_ID"])
], MultiscaleMeshLayer);

function convertMeshData(data, vertexPositionFormat) {
    const normals = computeVertexNormals(data.vertexPositions, data.indices);
    const encodedNormals = new Uint8Array(normals.length / 3 * 2);
    encodeNormals32fx3ToOctahedron8x2(encodedNormals, normals);
    let encodedIndices;
    let strips;
    if (CONVERT_TO_TRIANGLE_STRIPS) {
        encodedIndices = Object(neuroglancer_mesh_triangle_strips__WEBPACK_IMPORTED_MODULE_4__["computeTriangleStrips"])(data.indices, data.subChunkOffsets);
        strips = true;
    }
    else {
        if (data.indices.BYTES_PER_ELEMENT === 4 && data.vertexPositions.length / 3 < 65535) {
            encodedIndices = new Uint16Array(data.indices.length);
            encodedIndices.set(data.indices);
        }
        else {
            encodedIndices = data.indices;
        }
        strips = false;
    }
    let encodedVertexPositions;
    if (vertexPositionFormat === neuroglancer_mesh_base__WEBPACK_IMPORTED_MODULE_2__["VertexPositionFormat"].uint10) {
        const vertexPositions = data.vertexPositions;
        const numVertices = vertexPositions.length / 3;
        encodedVertexPositions = new Uint32Array(numVertices);
        for (let inputIndex = 0, outputIndex = 0; outputIndex < numVertices; inputIndex += 3, ++outputIndex) {
            encodedVertexPositions[outputIndex] =
                ((vertexPositions[inputIndex] & 1023) | ((vertexPositions[inputIndex + 1] & 1023) << 10) |
                    ((vertexPositions[inputIndex + 2] & 1023) << 20));
        }
    }
    else if (vertexPositionFormat === neuroglancer_mesh_base__WEBPACK_IMPORTED_MODULE_2__["VertexPositionFormat"].uint16) {
        const vertexPositions = data.vertexPositions;
        if (vertexPositions.BYTES_PER_ELEMENT === 2) {
            encodedVertexPositions = vertexPositions;
        }
        else {
            encodedVertexPositions = new Uint16Array(vertexPositions.length);
            encodedVertexPositions.set(vertexPositions);
        }
    }
    else {
        encodedVertexPositions = data.vertexPositions;
    }
    return {
        vertexPositions: encodedVertexPositions,
        vertexNormals: encodedNormals,
        indices: encodedIndices,
        strips,
    };
}
function assignMeshFragmentData(chunk, data, vertexPositionFormat = neuroglancer_mesh_base__WEBPACK_IMPORTED_MODULE_2__["VertexPositionFormat"].float32) {
    chunk.meshData = convertMeshData(data, vertexPositionFormat);
}
function assignMultiscaleMeshFragmentData(chunk, data, vertexPositionFormat) {
    chunk.meshData = convertMeshData(data, vertexPositionFormat);
    chunk.subChunkOffsets = data.subChunkOffsets;
}
function generateHigherOctreeLevel(octree, priorStart, priorEnd) {
    let curEnd = priorEnd;
    for (let i = 0; i < 3; ++i) {
        octree[curEnd * 5 + i] = octree[priorStart * 5 + i] >>> 1;
    }
    octree[curEnd * 5 + 3] = priorStart;
    for (let i = priorStart + 1; i < priorEnd; ++i) {
        const x = octree[i * 5] >>> 1, y = octree[i * 5 + 1] >>> 1, z = octree[i * 5 + 2] >>> 1;
        if (x !== octree[curEnd * 5] || y !== octree[curEnd * 5 + 1] || z !== octree[curEnd * 5 + 2]) {
            octree[curEnd * 5 + 4] = i;
            ++curEnd;
            octree[curEnd * 5] = x;
            octree[curEnd * 5 + 1] = y;
            octree[curEnd * 5 + 2] = z;
            octree[curEnd * 5 + 3] = i;
        }
    }
    octree[curEnd * 5 + 4] = priorEnd;
    ++curEnd;
    return curEnd;
}
function computeOctreeChildOffsets(octree, childStart, childEnd, parentEnd) {
    let childNode = childStart;
    for (let parentNode = childEnd; parentNode < parentEnd; ++parentNode) {
        const parentX = octree[parentNode * 5], parentY = octree[parentNode * 5 + 1], parentZ = octree[parentNode * 5 + 2];
        while (childNode < childEnd) {
            const childX = octree[childNode * 5] >>> 1, childY = octree[childNode * 5 + 1] >>> 1, childZ = octree[childNode * 5 + 2] >>> 1;
            if (!Object(neuroglancer_util_zorder__WEBPACK_IMPORTED_MODULE_12__["zorder3LessThan"])(childX, childY, childZ, parentX, parentY, parentZ)) {
                break;
            }
            ++childNode;
        }
        octree[parentNode * 5 + 3] = childNode;
        while (childNode < childEnd) {
            const childX = octree[childNode * 5] >>> 1, childY = octree[childNode * 5 + 1] >>> 1, childZ = octree[childNode * 5 + 2] >>> 1;
            if (childX != parentX || childY != parentY || childZ != parentZ) {
                break;
            }
            ++childNode;
        }
        octree[parentNode * 5 + 4] += childNode;
    }
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/mesh/base.ts":
/*!*************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/mesh/base.ts ***!
  \*************************************************************************************************/
/*! exports provided: MESH_LAYER_RPC_ID, MULTISCALE_MESH_LAYER_RPC_ID, FRAGMENT_SOURCE_RPC_ID, MULTISCALE_FRAGMENT_SOURCE_RPC_ID, VertexPositionFormat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MESH_LAYER_RPC_ID", function() { return MESH_LAYER_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MULTISCALE_MESH_LAYER_RPC_ID", function() { return MULTISCALE_MESH_LAYER_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FRAGMENT_SOURCE_RPC_ID", function() { return FRAGMENT_SOURCE_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MULTISCALE_FRAGMENT_SOURCE_RPC_ID", function() { return MULTISCALE_FRAGMENT_SOURCE_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VertexPositionFormat", function() { return VertexPositionFormat; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const MESH_LAYER_RPC_ID = 'mesh/MeshLayer';
const MULTISCALE_MESH_LAYER_RPC_ID = 'mesh/MultiscaleMeshLayer';
const FRAGMENT_SOURCE_RPC_ID = 'mesh/FragmentSource';
const MULTISCALE_FRAGMENT_SOURCE_RPC_ID = 'mesh/MultiscaleFragmentSource';
var VertexPositionFormat;
(function (VertexPositionFormat) {
    VertexPositionFormat[VertexPositionFormat["float32"] = 0] = "float32";
    VertexPositionFormat[VertexPositionFormat["uint10"] = 1] = "uint10";
    VertexPositionFormat[VertexPositionFormat["uint16"] = 2] = "uint16";
})(VertexPositionFormat || (VertexPositionFormat = {}));


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/mesh/multiscale.ts":
/*!*******************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/mesh/multiscale.ts ***!
  \*******************************************************************************************************/
/*! exports provided: getDesiredMultiscaleMeshChunks, getMultiscaleChunksToDraw, validateOctree, getMultiscaleFragmentKey */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDesiredMultiscaleMeshChunks", function() { return getDesiredMultiscaleMeshChunks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMultiscaleChunksToDraw", function() { return getMultiscaleChunksToDraw; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateOctree", function() { return validateOctree; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMultiscaleFragmentKey", function() { return getMultiscaleFragmentKey; });
/* harmony import */ var neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/util/geom */ "../../../../../../neuroglancer/src/neuroglancer/util/geom.ts");
/* harmony import */ var neuroglancer_util_zorder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/zorder */ "../../../../../../neuroglancer/src/neuroglancer/util/zorder.ts");
/**
 * @license
 * Copyright 2019 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @param detailCutoff Factor by which the spatial resolution of the mesh may be worse than the
 *     spatial resolution of a single viewport pixel.  For example, a value of 10 means that if a
 *     given portion of the object will be rendered such that a pixel corresponds to 50 nm, then a
 *     mesh level of detail down to 500 nm will be requested for that portion of the object.
 */
function getDesiredMultiscaleMeshChunks(manifest, modelViewProjection, clippingPlanes, detailCutoff, viewportWidth, viewportHeight, callback) {
    const { octree, lodScales, chunkGridSpatialOrigin, chunkShape } = manifest;
    const maxLod = lodScales.length - 1;
    const m00 = modelViewProjection[0], m01 = modelViewProjection[4], m02 = modelViewProjection[8], m10 = modelViewProjection[1], m11 = modelViewProjection[5], m12 = modelViewProjection[9], m30 = modelViewProjection[3], m31 = modelViewProjection[7], m32 = modelViewProjection[11], m33 = modelViewProjection[15];
    const minWXcoeff = m30 > 0 ? 0 : 1;
    const minWYcoeff = m31 > 0 ? 0 : 1;
    const minWZcoeff = m32 > 0 ? 0 : 1;
    const nearA = clippingPlanes[4 * 4], nearB = clippingPlanes[4 * 4 + 1], nearC = clippingPlanes[4 * 4 + 2], nearD = clippingPlanes[4 * 4 + 3];
    function getPointW(x, y, z) {
        return m30 * x + m31 * y + m32 * z + m33;
    }
    function getBoxW(xLower, yLower, zLower, xUpper, yUpper, zUpper) {
        return getPointW(xLower + minWXcoeff * (xUpper - xLower), yLower + minWYcoeff * (yUpper - yLower), zLower + minWZcoeff * (zUpper - zLower));
    }
    /**
     * Minimum value of w within clipping frustrum (under the assumption that the minimum value is
     * occurs occurs on the near clipping plane).
     */
    const minWClip = getPointW(-nearD * nearA, -nearD * nearB, -nearD * nearC);
    const objectXLower = manifest.clipLowerBound[0], objectYLower = manifest.clipLowerBound[1], objectZLower = manifest.clipLowerBound[2];
    const objectXUpper = manifest.clipUpperBound[0], objectYUpper = manifest.clipUpperBound[1], objectZUpper = manifest.clipUpperBound[2];
    const xScale = Math.sqrt((m00 * viewportWidth) ** 2 + (m10 * viewportHeight) ** 2);
    const yScale = Math.sqrt((m01 * viewportWidth) ** 2 + (m11 * viewportHeight) ** 2);
    const zScale = Math.sqrt((m02 * viewportWidth) ** 2 + (m12 * viewportHeight) ** 2);
    const scaleFactor = Math.max(xScale, yScale, zScale);
    function handleChunk(lod, row, priorLodScale) {
        const size = 1 << lod;
        const rowOffset = row * 5;
        const gridX = octree[rowOffset], gridY = octree[rowOffset + 1], gridZ = octree[rowOffset + 2], childBegin = octree[rowOffset + 3], childEndAndEmpty = octree[rowOffset + 4];
        let xLower = gridX * size * chunkShape[0] + chunkGridSpatialOrigin[0], yLower = gridY * size * chunkShape[1] + chunkGridSpatialOrigin[1], zLower = gridZ * size * chunkShape[2] + chunkGridSpatialOrigin[2];
        let xUpper = xLower + size * chunkShape[0], yUpper = yLower + size * chunkShape[1], zUpper = zLower + size * chunkShape[2];
        xLower = Math.max(xLower, objectXLower);
        yLower = Math.max(yLower, objectYLower);
        zLower = Math.max(zLower, objectZLower);
        xUpper = Math.min(xUpper, objectXUpper);
        yUpper = Math.min(yUpper, objectYUpper);
        zUpper = Math.min(zUpper, objectZUpper);
        if (Object(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["isAABBVisible"])(xLower, yLower, zLower, xUpper, yUpper, zUpper, clippingPlanes)) {
            const minW = Math.max(minWClip, getBoxW(xLower, yLower, zLower, xUpper, yUpper, zUpper));
            const pixelSize = minW / scaleFactor;
            if (priorLodScale === 0 || pixelSize * detailCutoff < priorLodScale) {
                const lodScale = lodScales[lod];
                if (lodScale !== 0) {
                    callback(lod, row, lodScale / pixelSize, (childEndAndEmpty >>> 31));
                }
                if (lod > 0 && (lodScale === 0 || pixelSize * detailCutoff < lodScale)) {
                    const nextPriorLodScale = lodScale === 0 ? priorLodScale : lodScale;
                    const childEnd = (childEndAndEmpty & 0x7FFFFFFF) >>> 0;
                    for (let childRow = childBegin; childRow < childEnd; ++childRow) {
                        handleChunk(lod - 1, childRow, nextPriorLodScale);
                    }
                }
            }
        }
    }
    handleChunk(maxLod, octree.length / 5 - 1, 0);
}
function getMultiscaleChunksToDraw(manifest, modelViewProjection, clippingPlanes, detailCutoff, viewportWidth, viewportHeight, hasChunk, callback) {
    const { lodScales } = manifest;
    let maxLod = 0;
    while (maxLod + 1 < lodScales.length && lodScales[maxLod + 1] !== 0) {
        ++maxLod;
    }
    const stackEntryStride = 3;
    // [row, parentSubChunkIndex, renderScale]
    const stack = [];
    let stackDepth = 0;
    let priorSubChunkIndex = 0;
    function emitChunksUpTo(targetStackIndex, subChunkIndex) {
        while (true) {
            if (stackDepth === 0)
                return;
            // Finish last chunk of last (finest) lod.
            const stackIndex = stackDepth - 1;
            const entryLod = maxLod - stackIndex;
            const entryRow = stack[stackIndex * stackEntryStride];
            const numSubChunks = entryLod === 0 ? 1 : 8;
            const entrySubChunkIndex = stack[stackIndex * stackEntryStride + 1];
            const entryRenderScale = stack[stackIndex * stackEntryStride + 2];
            if (targetStackIndex === stackDepth) {
                const endSubChunk = subChunkIndex & (numSubChunks - 1);
                if (priorSubChunkIndex !== endSubChunk && entryRow !== -1) {
                    callback(entryLod, entryRow, priorSubChunkIndex, endSubChunk, entryRenderScale);
                }
                priorSubChunkIndex = endSubChunk + 1;
                return;
            }
            if (priorSubChunkIndex !== numSubChunks && entryRow !== -1) {
                callback(entryLod, entryRow, priorSubChunkIndex, numSubChunks, entryRenderScale);
            }
            priorSubChunkIndex = entrySubChunkIndex + 1;
            --stackDepth;
        }
    }
    let priorMissingLod = 0;
    const { octree } = manifest;
    getDesiredMultiscaleMeshChunks(manifest, modelViewProjection, clippingPlanes, detailCutoff, viewportWidth, viewportHeight, (lod, row, renderScale, empty) => {
        if (!empty && !hasChunk(lod, row, renderScale)) {
            priorMissingLod = Math.max(lod, priorMissingLod);
            return;
        }
        if (lod < priorMissingLod)
            return;
        priorMissingLod = 0;
        const rowOffset = row * 5;
        const x = octree[rowOffset], y = octree[rowOffset + 1], z = octree[rowOffset + 2];
        const subChunkIndex = Object(neuroglancer_util_zorder__WEBPACK_IMPORTED_MODULE_1__["getOctreeChildIndex"])(x, y, z);
        const stackIndex = maxLod - lod;
        emitChunksUpTo(stackIndex, subChunkIndex);
        const stackOffset = stackIndex * stackEntryStride;
        stack[stackOffset] = empty ? -1 : row;
        stack[stackOffset + 1] = subChunkIndex;
        stack[stackOffset + 2] = renderScale;
        priorSubChunkIndex = 0;
        stackDepth = stackIndex + 1;
    });
    emitChunksUpTo(0, 0);
}
function validateOctree(octree) {
    if (octree.length % 5 !== 0) {
        throw new Error('Invalid length');
    }
    const numNodes = octree.length / 5;
    const seenNodes = new Set();
    function exploreNode(node) {
        if (seenNodes.has(node)) {
            throw new Error('Previously seen node');
        }
        seenNodes.add(node);
        if (node < 0 || node >= numNodes) {
            throw new Error('Invalid node reference');
        }
        const x = octree[node * 5], y = octree[node * 5 + 1], z = octree[node * 5 + 2], beginChild = octree[node * 5 + 3], endChild = octree[node * 5 + 4];
        if (beginChild < 0 || endChild < 0 || endChild < beginChild || endChild > numNodes ||
            beginChild + 8 < endChild) {
            throw new Error('Invalid child references');
        }
        for (let child = beginChild; child < endChild; ++child) {
            const childX = octree[child * 5], childY = octree[child * 5 + 1], childZ = octree[child * 5 + 2];
            if ((childX >>> 1) !== x || (childY >>> 1) !== y || (childZ >>> 1) != z) {
                throw new Error('invalid child');
            }
            exploreNode(child);
        }
    }
    if (numNodes === 0)
        return;
    exploreNode(numNodes - 1);
}
function getMultiscaleFragmentKey(objectKey, lod, chunkIndex) {
    return `${objectKey}/${lod}:${chunkIndex}`;
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/mesh/triangle_strips.ts":
/*!************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/mesh/triangle_strips.ts ***!
  \************************************************************************************************************/
/*! exports provided: getNextEdge, getBaseIndex, getEdgeIndex, vertexAIndex, vertexBIndex, vertexCIndex, getEdgeMapSize, computeTriangleStrips */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNextEdge", function() { return getNextEdge; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getBaseIndex", function() { return getBaseIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getEdgeIndex", function() { return getEdgeIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "vertexAIndex", function() { return vertexAIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "vertexBIndex", function() { return vertexBIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "vertexCIndex", function() { return vertexCIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getEdgeMapSize", function() { return getEdgeMapSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeTriangleStrips", function() { return computeTriangleStrips; });
/* harmony import */ var neuroglancer_gpu_hash_hash_function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/gpu_hash/hash_function */ "../../../../../../neuroglancer/src/neuroglancer/gpu_hash/hash_function.ts");
/**
 * @license
 * Copyright 2019 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @file Conversion from independent triangles to triangle strips.
 *
 * http://www.codercorner.com/Strips.htm
 */

const DEBUG_TIMING = false;
/**
 * Sorts the vertex indices for each triangle in ascending order.
 *
 * This ensures later edge comparisons can be done more efficiently.  This can reverse face
 * orientations, which would normally be a problem, but since we render all faces as double-sided it
 * isn't an issue.
 */
function normalizeTriangleVertexOrder(indices) {
    let maxVertex = 0;
    for (let i = 0, length = indices.length; i < length; i += 3) {
        let a = indices[i], b = indices[i + 1], c = indices[i + 2];
        let t;
        if (a > b) {
            t = a;
            a = b;
            b = t;
        }
        if (b > c) {
            t = b;
            b = c;
            c = t;
        }
        if (a > b) {
            t = a;
            a = b;
            b = t;
        }
        indices[i] = a;
        indices[i + 1] = b;
        indices[i + 2] = c;
        if (c > maxVertex)
            maxVertex = c;
    }
    return maxVertex;
}
let collisions = 0;
function hashTableInsert(table, numBuckets, value, emptyValue, hashCode, equals) {
    const mask = (numBuckets - 1) >>> 0;
    let bucket = (hashCode & mask) >>> 0;
    for (let probe = 0; true; ++probe) {
        const x = table[bucket];
        if (x === emptyValue) {
            table[bucket] = value;
            return value;
        }
        if (equals(x)) {
            return x;
        }
        ++collisions;
        bucket = ((bucket + probe + 1) & mask) >>> 0;
    }
}
function hashEdge(a, b) {
    return Object(neuroglancer_gpu_hash_hash_function__WEBPACK_IMPORTED_MODULE_0__["hashCombine"])(Object(neuroglancer_gpu_hash_hash_function__WEBPACK_IMPORTED_MODULE_0__["hashCombine"])(0, a), b);
}
// edgeIndex: 0, 1, 2
// vertexA:   0  0  1   <-  bit 1
// vertexB:   1  2  2   <-  1 + bit 1  of (edgeIndex + 1)
// vertexC:   2  1  0   <-  2 - edgeIndex
// BC         2  2  1
// BC flipped 0  1  1
// AC         1  0  0
// AC flipped 0  0  1
// Lookup table, where the 3 bits starting at (edgeIndex * 3 + flipped * 12) specify the new value
// of `edgeIndexAndFlipped`.
const nextEdgeTable = 1053042;
/**
 * Computes the edge index and flipped state in a triangle strip for the next edge after the given
 * edge.
 *
 * @param edgeIndexAndFlipped Bits 0,1 specify the `edgeIndex` in the range `[0, 2]` corresponding
 *     to the last edge that was traversed.  Bit 2 specifies the `flipped` state.  If `flipped` is
 *     equal to 0, the last two emitted vertices are B and C relative to `edgeIndex`.  If `flipped`
 *     is equal to 1, the last two emitted vertices are A and C relative to `edgeIndex`.
 * @returns The next `edgeIndexAndFlipped` value specifying `nextEdgeIndex` and `nextFlipped`.  If
 *     `flipped == 0`, `nextEdgeIndex` corresponds to the B-C edge relative to `edgeIndex`; if
 *     `flipped == 1`, `nextEdgeIndex` correspond to the A-C edge relative to `edgeIndex`.  The
 *     `nextFlipped` value is equal to 1 iff `vertexCIndex(edgeIndex) ==
 *     vertexAIndex(nextEdgeIndex)`.
 */
function getNextEdge(edgeIndexAndFlipped) {
    return (nextEdgeTable >>> (edgeIndexAndFlipped * 3)) & 7;
}
function getBaseIndex(entry) {
    return (entry >>> 2) * 3;
}
function getEdgeIndex(entry) {
    return entry & 3;
}
/**
 * Computes the first vertex offset for the given edge.
 *
 * @returns `[0, 0, 1][edgeIndex]`
 */
function vertexAIndex(edgeIndex) {
    return edgeIndex >>> 1;
}
/**
 * Computes the second vertex offset for the given edge.
 *
 * @returns `[1, 2, 2][edgeIndex]`
 */
function vertexBIndex(edgeIndex) {
    return 1 + ((edgeIndex + 1) >>> 1);
}
/**
 * Computes the opposite vertex offset for the given edge.
 *
 * @returns `[2, 1, 0][edgeIndex]`
 */
function vertexCIndex(edgeIndex) {
    return 2 - edgeIndex;
}
function getEdgeMapSize(numIndices) {
    const numEdges = numIndices;
    // Choose quadratic probing hash table size to be the smallest power of 2 greater than `numEdges`.
    const edgeMapSize = 2 ** Math.ceil(Math.log2(numEdges));
    return edgeMapSize * 4;
}
function computeTriangleAdjacencies(triangleAdjacencies, indices, edgeMap) {
    const numTriangles = indices.length / 3;
    // Row-major array of shape `[numTriangles, 3]` specifying the triangles adjacent to each
    // triangle.  The triangle index `i` corresponds to elements `[i * 3, (i + 1) * 3)` of the
    // `indices` array.  For each triangle, columns 0 to 2 are the indices of the triangles adjacent
    // to edge 0-1, edge 0-2, and edge 1-2, respectively.
    const edgeMapSize = edgeMap.length;
    const emptyEntry = 0xFFFFFFFF;
    triangleAdjacencies.fill(emptyEntry);
    edgeMap.fill(emptyEntry);
    // Insert edges
    for (let triangle = 0; triangle < numTriangles; ++triangle) {
        const baseIndex = triangle * 3;
        for (let edgeIndex = 0; edgeIndex < 3; ++edgeIndex) {
            const vertexA0 = indices[baseIndex + vertexAIndex(edgeIndex)];
            const vertexB0 = indices[baseIndex + vertexBIndex(edgeIndex)];
            const newEntry = (triangle << 2) | edgeIndex;
            const existingEntry = hashTableInsert(edgeMap, edgeMapSize, newEntry, emptyEntry, hashEdge(vertexA0, vertexB0), x => {
                const otherBaseIndex = getBaseIndex(x);
                const otherEdgeIndex = getEdgeIndex(x);
                const vertexA1 = indices[otherBaseIndex + vertexAIndex(otherEdgeIndex)];
                const vertexB1 = indices[otherBaseIndex + vertexBIndex(otherEdgeIndex)];
                // console.log('checking equality', vertexA0, vertexA1, vertexB0, vertexB1);
                return vertexA0 === vertexA1 && vertexB0 === vertexB1;
            });
            if (existingEntry !== newEntry) {
                const otherBaseIndex = getBaseIndex(existingEntry);
                const otherEdgeIndex = getEdgeIndex(existingEntry);
                triangleAdjacencies[otherBaseIndex + otherEdgeIndex] = newEntry;
                triangleAdjacencies[baseIndex + edgeIndex] = existingEntry;
            }
        }
    }
    return triangleAdjacencies;
}
function emitTriangleStrips(indices, triangleAdjacencies, output, outputIndex) {
    const invalidVertex = ~0 >>> (32 - 8 * output.BYTES_PER_ELEMENT);
    const numIndices = indices.length;
    const numTriangles = numIndices / 3;
    const emptyEntry = 0xFFFFFFFF;
    // Extract strips
    startNewStrip: for (let triangle = 0; triangle < numTriangles; ++triangle) {
        let baseIndex = triangle * 3;
        if (indices[baseIndex] === invalidVertex) {
            // Triangle was already emitted.
            continue;
        }
        for (let edgeIndex = 0; edgeIndex < 3; ++edgeIndex) {
            let entry = triangleAdjacencies[baseIndex + edgeIndex];
            if (entry === emptyEntry)
                continue;
            let otherBaseIndex = getBaseIndex(entry);
            if (indices[otherBaseIndex] === invalidVertex)
                continue;
            let otherEdgeIndex = getEdgeIndex(entry);
            output[outputIndex++] = indices[baseIndex + vertexCIndex(edgeIndex)];
            output[outputIndex++] = indices[baseIndex + vertexAIndex(edgeIndex)];
            output[outputIndex++] = indices[baseIndex + vertexBIndex(edgeIndex)];
            let edgeIndexAndFlipped = otherEdgeIndex;
            while (true) {
                indices[baseIndex] = invalidVertex;
                baseIndex = otherBaseIndex;
                output[outputIndex++] = indices[baseIndex + vertexCIndex(edgeIndexAndFlipped & 3)];
                edgeIndexAndFlipped = getNextEdge(edgeIndexAndFlipped);
                entry = triangleAdjacencies[baseIndex + (edgeIndexAndFlipped & 3)];
                if (entry === emptyEntry ||
                    indices[(otherBaseIndex = getBaseIndex(entry))] === invalidVertex) {
                    // console.log(stripLength);
                    // End of strip.  Emit restart index.
                    output[outputIndex++] = invalidVertex;
                    indices[baseIndex] = invalidVertex;
                    continue startNewStrip;
                }
                edgeIndexAndFlipped = getEdgeIndex(entry) | (edgeIndexAndFlipped & 4);
            }
        }
        // Emit isolated triangle.
        output[outputIndex++] = indices[baseIndex];
        output[outputIndex++] = indices[baseIndex + 1];
        output[outputIndex++] = indices[baseIndex + 2];
        indices[baseIndex] = invalidVertex;
        output[outputIndex++] = invalidVertex;
    }
    return outputIndex;
}
function computeTriangleStrips(indices, subChunkOffsets) {
    if (indices.length === 0)
        return indices;
    collisions = 0;
    if (subChunkOffsets === undefined) {
        subChunkOffsets = Uint32Array.of(0, indices.length);
    }
    let adjacenciesElapsed = 0;
    let emitElapsed = 0;
    let startTime = 0, midTime = 0, endTime = 0;
    const maxVertexIndex = normalizeTriangleVertexOrder(indices);
    const outputBufferSize = indices.length / 3 * 4;
    const output = maxVertexIndex >= 65535 ? new Uint32Array(outputBufferSize) :
        new Uint16Array(outputBufferSize);
    let outputIndex = 0;
    let maxSubChunkIndices = 0;
    const numSubChunks = subChunkOffsets.length - 1;
    for (let subChunk = 0; subChunk < numSubChunks; ++subChunk) {
        maxSubChunkIndices =
            Math.max(maxSubChunkIndices, subChunkOffsets[subChunk + 1] - subChunkOffsets[subChunk]);
    }
    const triangleAdjacencies = new Uint32Array(maxSubChunkIndices);
    const edgeMap = new Uint32Array(getEdgeMapSize(maxSubChunkIndices));
    let subChunkOffset = subChunkOffsets[0];
    for (let subChunk = 0; subChunk < numSubChunks; ++subChunk) {
        subChunkOffsets[subChunk] = outputIndex;
        const subChunkEnd = subChunkOffsets[subChunk + 1];
        const subIndices = indices.subarray(subChunkOffset, subChunkEnd);
        if (DEBUG_TIMING)
            startTime = Date.now();
        computeTriangleAdjacencies(triangleAdjacencies, subIndices, edgeMap);
        if (DEBUG_TIMING)
            midTime = Date.now();
        outputIndex = emitTriangleStrips(subIndices, triangleAdjacencies, output, outputIndex);
        if (DEBUG_TIMING) {
            endTime = Date.now();
            adjacenciesElapsed += (midTime - startTime);
            emitElapsed += (endTime - midTime);
        }
        subChunkOffset = subChunkEnd;
    }
    --outputIndex;
    subChunkOffsets[numSubChunks] = outputIndex;
    const shrunkOutput = new output.constructor(outputIndex);
    shrunkOutput.set(output.subarray(0, outputIndex));
    if (DEBUG_TIMING) {
        console.log(`reduced from ${indices.byteLength}(${indices.BYTES_PER_ELEMENT}) -> ${shrunkOutput.byteLength}(${shrunkOutput.BYTES_PER_ELEMENT}): adj=${adjacenciesElapsed}, emit=${emitElapsed}, ${collisions}/${indices.length} collisions`);
    }
    return shrunkOutput;
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/perspective_view/backend.ts":
/*!****************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/perspective_view/backend.ts ***!
  \****************************************************************************************************************/
/*! exports provided: PerspectiveViewState, PerspectiveViewRenderLayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PerspectiveViewState", function() { return PerspectiveViewState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PerspectiveViewRenderLayer", function() { return PerspectiveViewRenderLayer; });
/* harmony import */ var neuroglancer_perspective_view_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/perspective_view/base */ "../../../../../../neuroglancer/src/neuroglancer/perspective_view/base.ts");
/* harmony import */ var neuroglancer_trackable_value__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/trackable_value */ "../../../../../../neuroglancer/src/neuroglancer/trackable_value.ts");
/* harmony import */ var neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/util/geom */ "../../../../../../neuroglancer/src/neuroglancer/util/geom.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/**
 * @license
 * Copyright 2018 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * @file Backend component of PerspectivePanel.  This allows the optional backend component of a
 * PerspectiveViewRenderLayer to set chunk priorities based on the state of the perspective panel.
 */




let PerspectiveViewState = class PerspectiveViewState extends neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_3__["SharedObjectCounterpart"] {
    constructor(...args) {
        super(...args);
        this.viewport = new neuroglancer_trackable_value__WEBPACK_IMPORTED_MODULE_1__["WatchableValue"]({
            width: 0,
            height: 0,
            projectionMat: neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__["mat4"].create(),
            viewMat: neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__["mat4"].create(),
            viewProjectionMat: neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__["mat4"].create()
        });
        const rpc = args[0];
        const options = args[1];
        this.visibility = rpc.get(options['visibility']);
    }
};
PerspectiveViewState = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_3__["registerSharedObject"])(neuroglancer_perspective_view_base__WEBPACK_IMPORTED_MODULE_0__["PERSPECTIVE_VIEW_RPC_ID"])
], PerspectiveViewState);

class PerspectiveViewRenderLayer extends neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_3__["SharedObjectCounterpart"] {
    constructor() {
        super(...arguments);
        this.viewStates = new neuroglancer_trackable_value__WEBPACK_IMPORTED_MODULE_1__["WatchableSet"]();
    }
}
Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_3__["registerRPC"])(neuroglancer_perspective_view_base__WEBPACK_IMPORTED_MODULE_0__["PERSPECTIVE_VIEW_UPDATE_VIEWPORT_RPC_ID"], function (x) {
    const viewState = this.get(x.view);
    viewState.viewport.value = x.viewport;
});
Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_3__["registerRPC"])(neuroglancer_perspective_view_base__WEBPACK_IMPORTED_MODULE_0__["PERSPECTIVE_VIEW_ADD_LAYER_RPC_ID"], function (x) {
    const viewState = this.get(x.view);
    const layer = this.get(x.layer);
    layer.viewStates.add(viewState);
});
Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_3__["registerRPC"])(neuroglancer_perspective_view_base__WEBPACK_IMPORTED_MODULE_0__["PERSPECTIVE_VIEW_REMOVE_LAYER_RPC_ID"], function (x) {
    const viewState = this.get(x.view);
    const layer = this.get(x.layer);
    layer.viewStates.delete(viewState);
});


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/perspective_view/base.ts":
/*!*************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/perspective_view/base.ts ***!
  \*************************************************************************************************************/
/*! exports provided: PERSPECTIVE_VIEW_RPC_ID, PERSPECTIVE_VIEW_ADD_LAYER_RPC_ID, PERSPECTIVE_VIEW_REMOVE_LAYER_RPC_ID, PERSPECTIVE_VIEW_UPDATE_VIEWPORT_RPC_ID */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PERSPECTIVE_VIEW_RPC_ID", function() { return PERSPECTIVE_VIEW_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PERSPECTIVE_VIEW_ADD_LAYER_RPC_ID", function() { return PERSPECTIVE_VIEW_ADD_LAYER_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PERSPECTIVE_VIEW_REMOVE_LAYER_RPC_ID", function() { return PERSPECTIVE_VIEW_REMOVE_LAYER_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PERSPECTIVE_VIEW_UPDATE_VIEWPORT_RPC_ID", function() { return PERSPECTIVE_VIEW_UPDATE_VIEWPORT_RPC_ID; });
/**
 * @license
 * Copyright 2018 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const PERSPECTIVE_VIEW_RPC_ID = 'perspective_view/PerspectiveView';
const PERSPECTIVE_VIEW_ADD_LAYER_RPC_ID = 'perspective_view/addLayer';
const PERSPECTIVE_VIEW_REMOVE_LAYER_RPC_ID = 'perspective_view/removeLayer';
const PERSPECTIVE_VIEW_UPDATE_VIEWPORT_RPC_ID = 'perspective_view/updateViewport';


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/segmentation_display_state/backend.ts":
/*!**************************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/segmentation_display_state/backend.ts ***!
  \**************************************************************************************************************************/
/*! exports provided: SegmentationLayerSharedObjectCounterpart */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SegmentationLayerSharedObjectCounterpart", function() { return SegmentationLayerSharedObjectCounterpart; });
/* harmony import */ var neuroglancer_shared_disjoint_sets__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/shared_disjoint_sets */ "../../../../../../neuroglancer/src/neuroglancer/shared_disjoint_sets.ts");
/* harmony import */ var neuroglancer_uint64_set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/uint64_set */ "../../../../../../neuroglancer/src/neuroglancer/uint64_set.ts");
/* harmony import */ var neuroglancer_uint64_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/uint64_map */ "../../../../../../neuroglancer/src/neuroglancer/uint64_map.ts");
/* harmony import */ var neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/chunk_manager/backend */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/backend.ts");
/* harmony import */ var neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! neuroglancer/visibility_priority/backend */ "../../../../../../neuroglancer/src/neuroglancer/visibility_priority/backend.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Import to register the shared object types.






const Base = Object(neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_4__["withSharedVisibility"])(Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_3__["withChunkManager"])(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_5__["SharedObjectCounterpart"]));
class SegmentationLayerSharedObjectCounterpart extends Base {
    constructor(rpc, options) {
        super(rpc, options);
        // No need to increase the reference count of rootSegments, visibleSegments3D or
        // segmentEquivalences since our owner will hold a reference to their owners.
        this.rootSegments = rpc.get(options['rootSegments']);
        this.rootSegmentsAfterEdit = rpc.get(options['rootSegmentsAfterEdit']);
        this.visibleSegments3D = rpc.get(options['visibleSegments3D']);
        this.segmentEquivalences = rpc.get(options['segmentEquivalences']);
        this.objectToDataTransform = rpc.get(options['objectToDataTransform']);
        this.renderScaleTarget = rpc.get(options['renderScaleTarget']);
        const scheduleUpdateChunkPriorities = () => {
            this.chunkManager.scheduleUpdateChunkPriorities();
        };
        this.registerDisposer(this.rootSegments.changed.add(scheduleUpdateChunkPriorities));
        this.registerDisposer(this.visibleSegments3D.changed.add(scheduleUpdateChunkPriorities));
        this.registerDisposer(this.segmentEquivalences.changed.add(scheduleUpdateChunkPriorities));
        this.registerDisposer(this.objectToDataTransform.changed.add(scheduleUpdateChunkPriorities));
        this.registerDisposer(this.renderScaleTarget.changed.add(scheduleUpdateChunkPriorities));
    }
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/segmentation_display_state/base.ts":
/*!***********************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/segmentation_display_state/base.ts ***!
  \***********************************************************************************************************************/
/*! exports provided: getObjectKey, forEachRootSegment, forEachVisibleSegment3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getObjectKey", function() { return getObjectKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forEachRootSegment", function() { return forEachRootSegment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forEachVisibleSegment3D", function() { return forEachVisibleSegment3D; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns a string key for identifying a uint64 object id.  This is faster than
 * Uint64.prototype.toString().
 */
function getObjectKey(objectId) {
    return `${objectId.low},${objectId.high}`;
}
function forEachRootSegment(state, callback) {
    let { rootSegments } = state;
    for (let rootObjectId of rootSegments) {
        callback(rootObjectId);
    }
}
function forEachVisibleSegment3D(state, callback) {
    let { visibleSegments3D, segmentEquivalences } = state;
    for (let objectId of visibleSegments3D) {
        let rootObjectId = segmentEquivalences.get(objectId);
        callback(objectId, rootObjectId);
    }
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/shared_disjoint_sets.ts":
/*!************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/shared_disjoint_sets.ts ***!
  \************************************************************************************************************/
/*! exports provided: SharedDisjointUint64Sets */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharedDisjointUint64Sets", function() { return SharedDisjointUint64Sets; });
/* harmony import */ var neuroglancer_util_disjoint_sets__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/util/disjoint_sets */ "../../../../../../neuroglancer/src/neuroglancer/util/disjoint_sets.ts");
/* harmony import */ var neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/json */ "../../../../../../neuroglancer/src/neuroglancer/util/json.ts");
/* harmony import */ var neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/util/signal */ "../../../../../../neuroglancer/src/neuroglancer/util/signal.ts");
/* harmony import */ var neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/util/uint64 */ "../../../../../../neuroglancer/src/neuroglancer/util/uint64.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};





const RPC_TYPE_ID = 'DisjointUint64Sets';
const ADD_METHOD_ID = 'DisjointUint64Sets.add';
const CLEAR_METHOD_ID = 'DisjointUint64Sets.clear';
const DELETE_SET_METHOD_ID = 'DisjointUint64Sets.deleteSet';
const tempA = new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_3__["Uint64"]();
const tempB = new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_3__["Uint64"]();
let SharedDisjointUint64Sets = class SharedDisjointUint64Sets extends neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_4__["SharedObjectCounterpart"] {
    constructor() {
        super(...arguments);
        this.disjointSets = new neuroglancer_util_disjoint_sets__WEBPACK_IMPORTED_MODULE_0__["DisjointUint64Sets"]();
        this.changed = new neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_2__["NullarySignal"]();
    }
    static makeWithCounterpart(rpc) {
        let obj = new this();
        obj.initializeCounterpart(rpc);
        return obj;
    }
    disposed() {
        this.disjointSets = undefined;
        this.changed = undefined;
        super.disposed();
    }
    link_(a, b) {
        let changed = false;
        for (const v of b) {
            tempB.low = v.low;
            tempB.high = v.high;
            changed = this.disjointSets.link(a, tempB) || changed;
        }
        return changed;
    }
    link(a, b) {
        const tmp = Array().concat(b);
        if (this.link_(a, tmp)) {
            let { rpc } = this;
            if (rpc) {
                rpc.invoke(ADD_METHOD_ID, { 'id': this.rpcId, 'al': a.low, 'ah': a.high, 'b': tmp });
            }
            this.changed.dispatch();
        }
    }
    deleteSet(a) {
        if (this.disjointSets.deleteSet(a)) {
            let { rpc } = this;
            if (rpc) {
                rpc.invoke(DELETE_SET_METHOD_ID, { 'id': this.rpcId, 'al': a.low, 'ah': a.high });
            }
            this.changed.dispatch();
        }
    }
    has(x) {
        return this.disjointSets.has(x);
    }
    get(x) {
        return this.disjointSets.get(x);
    }
    clear() {
        if (this.disjointSets.clear()) {
            let { rpc } = this;
            if (rpc) {
                rpc.invoke(CLEAR_METHOD_ID, { 'id': this.rpcId });
            }
            this.changed.dispatch();
        }
    }
    setElements(a) {
        return this.disjointSets.setElements(a);
    }
    get size() {
        return this.disjointSets.size;
    }
    toJSON() {
        return this.disjointSets.toJSON();
    }
    /**
     * Restores the state from a JSON representation.
     */
    restoreState(obj) {
        this.clear();
        if (obj !== undefined) {
            let ids = [new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_3__["Uint64"](), new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_3__["Uint64"]()];
            Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_1__["parseArray"])(obj, z => {
                Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_1__["parseArray"])(z, (s, index) => {
                    ids[index % 2].parseString(String(s), 10);
                    if (index !== 0) {
                        this.link(ids[0], ids[1]);
                    }
                });
            });
        }
    }
};
SharedDisjointUint64Sets = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_4__["registerSharedObject"])(RPC_TYPE_ID)
], SharedDisjointUint64Sets);

Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_4__["registerRPC"])(ADD_METHOD_ID, function (x) {
    let obj = this.get(x['id']);
    tempA.low = x['al'];
    tempA.high = x['ah'];
    if (obj.link_(tempA, x['b'])) {
        obj.changed.dispatch();
    }
});
Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_4__["registerRPC"])(CLEAR_METHOD_ID, function (x) {
    let obj = this.get(x['id']);
    if (obj.disjointSets.clear()) {
        obj.changed.dispatch();
    }
});
Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_4__["registerRPC"])(DELETE_SET_METHOD_ID, function (x) {
    let obj = this.get(x['id']);
    tempA.low = x['al'];
    tempA.high = x['ah'];
    if (obj.disjointSets.deleteSet(tempA)) {
        obj.changed.dispatch();
    }
});


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/shared_watchable_value.ts":
/*!**************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/shared_watchable_value.ts ***!
  \**************************************************************************************************************/
/*! exports provided: SharedWatchableValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharedWatchableValue", function() { return SharedWatchableValue; });
/* harmony import */ var neuroglancer_trackable_value__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/trackable_value */ "../../../../../../neuroglancer/src/neuroglancer/trackable_value.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SharedWatchableValue_1;
/**
 * @file Facility for sharing arbitrary values that support structural cloning between threads.
 */


const CHANGED_RPC_METHOD_ID = 'SharedWatchableValue.changed';
let SharedWatchableValue = SharedWatchableValue_1 = class SharedWatchableValue extends neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_1__["SharedObjectCounterpart"] {
    constructor(rpc, options = {}) {
        super(rpc, options);
        /**
         * The value is being updated to reflect a remote change.
         * @internal
         */
        this.updatingValue_ = false;
        if (rpc !== undefined) {
            this.base = new neuroglancer_trackable_value__WEBPACK_IMPORTED_MODULE_0__["WatchableValue"](options['value']);
            this.setupChangedHandler();
        }
    }
    initializeCounterpart(rpc, options = {}) {
        options['value'] = this.value;
        super.initializeCounterpart(rpc, options);
    }
    setupChangedHandler() {
        this.registerDisposer(this.base.changed.add(() => {
            if (this.updatingValue_) {
                this.updatingValue_ = false;
            }
            else {
                const { rpc } = this;
                if (rpc !== null) {
                    rpc.invoke(CHANGED_RPC_METHOD_ID, { 'id': this.rpcId, 'value': this.value });
                }
            }
        }));
    }
    static makeFromExisting(rpc, base) {
        let obj = new SharedWatchableValue_1();
        obj.base = base;
        obj.setupChangedHandler();
        obj.initializeCounterpart(rpc);
        return obj;
    }
    static make(rpc, value) {
        return SharedWatchableValue_1.makeFromExisting(rpc, new neuroglancer_trackable_value__WEBPACK_IMPORTED_MODULE_0__["WatchableValue"](value));
    }
    get value() {
        return this.base.value;
    }
    set value(value) {
        this.base.value = value;
    }
    get changed() {
        return this.base.changed;
    }
};
SharedWatchableValue = SharedWatchableValue_1 = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_1__["registerSharedObject"])('SharedWatchableValue')
], SharedWatchableValue);

Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_1__["registerRPC"])(CHANGED_RPC_METHOD_ID, function (x) {
    const obj = this.get(x['id']);
    obj.updatingValue_ = true;
    obj.base.value = x['value'];
    obj.updatingValue_ = false;
});


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/single_mesh/backend.ts":
/*!***********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/single_mesh/backend.ts ***!
  \***********************************************************************************************************/
/*! exports provided: SingleMeshChunk, registerSingleMeshFactory, registerSingleMeshVertexAttributesFactory, getMesh, getMeshVertexAttributes, getMinMax, getCombinedMesh, SingleMeshSource, SingleMeshLayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SingleMeshChunk", function() { return SingleMeshChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerSingleMeshFactory", function() { return registerSingleMeshFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerSingleMeshVertexAttributesFactory", function() { return registerSingleMeshVertexAttributesFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMesh", function() { return getMesh; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMeshVertexAttributes", function() { return getMeshVertexAttributes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMinMax", function() { return getMinMax; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCombinedMesh", function() { return getCombinedMesh; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SingleMeshSource", function() { return SingleMeshSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SingleMeshLayer", function() { return SingleMeshLayer; });
/* harmony import */ var neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/chunk_manager/backend */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/backend.ts");
/* harmony import */ var neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/chunk_manager/base */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/base.ts");
/* harmony import */ var neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/mesh/backend */ "../../../../../../neuroglancer/src/neuroglancer/mesh/backend.ts");
/* harmony import */ var neuroglancer_single_mesh_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/single_mesh/base */ "../../../../../../neuroglancer/src/neuroglancer/single_mesh/base.ts");
/* harmony import */ var neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! neuroglancer/util/json */ "../../../../../../neuroglancer/src/neuroglancer/util/json.ts");
/* harmony import */ var neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! neuroglancer/visibility_priority/backend */ "../../../../../../neuroglancer/src/neuroglancer/visibility_priority/backend.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};







const SINGLE_MESH_CHUNK_PRIORITY = 50;
/**
 * Chunk that contains the single mesh.
 */
class SingleMeshChunk extends neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["Chunk"] {
    constructor() {
        super();
        this.data = null;
    }
    freeSystemMemory() {
        this.data = null;
    }
    serialize(msg, transfers) {
        super.serialize(msg, transfers);
        let { vertexPositions, indices, vertexNormals, vertexAttributes } = this.data;
        msg['vertexPositions'] = vertexPositions;
        msg['indices'] = indices;
        msg['vertexNormals'] = vertexNormals;
        msg['vertexAttributes'] = vertexAttributes;
        const transferSet = new Set();
        transferSet.add(vertexPositions.buffer);
        transferSet.add(indices.buffer);
        transferSet.add(vertexNormals.buffer);
        for (const data of vertexAttributes) {
            transferSet.add(data.buffer);
        }
        transfers.push(...transferSet);
        this.data = null;
    }
    downloadSucceeded() {
        let { vertexPositions, indices, vertexNormals, vertexAttributes } = this.data;
        let totalBytes = this.gpuMemoryBytes =
            vertexPositions.byteLength + indices.byteLength + vertexNormals.byteLength;
        for (const data of vertexAttributes) {
            totalBytes += data.byteLength;
        }
        this.systemMemoryBytes = this.gpuMemoryBytes = totalBytes;
        super.downloadSucceeded();
    }
}
const singleMeshFactories = new Map();
const singleMeshVertexAttributesFactories = new Map();
function registerSingleMeshFactory(name, factory) {
    singleMeshFactories.set(name, factory);
}
function registerSingleMeshVertexAttributesFactory(name, factory) {
    singleMeshVertexAttributesFactories.set(name, factory);
}
const protocolPattern = /^(?:([a-zA-Z-+_]+):\/\/)?(.*)$/;
function getDataSource(factories, url) {
    let m = url.match(protocolPattern);
    if (m === null || m[1] === undefined) {
        throw new Error(`Data source URL must have the form "<protocol>://<path>".`);
    }
    let dataSource = m[1];
    let factory = factories.get(dataSource);
    if (factory === undefined) {
        throw new Error(`Unsupported data source: ${JSON.stringify(dataSource)}.`);
    }
    return [factory, m[2], dataSource];
}
function getMesh(chunkManager, url, getPriority, cancellationToken) {
    let [factory, path] = getDataSource(singleMeshFactories, url);
    return factory.getMesh(chunkManager, path, getPriority, cancellationToken);
}
function getMeshVertexAttributes(chunkManager, url, getPriority, cancellationToken) {
    let [factory, path] = getDataSource(singleMeshVertexAttributesFactories, url);
    return factory.getMeshVertexAttributes(chunkManager, path, getPriority, cancellationToken);
}
function getMinMax(array) {
    let min = Number.POSITIVE_INFINITY;
    let max = Number.NEGATIVE_INFINITY;
    for (let value of array) {
        min = Math.min(min, value);
        max = Math.max(max, value);
    }
    return [min, max];
}
function getCombinedMesh(chunkManager, parameters, getPriority, cancellationToken) {
    let promises = [getMesh(chunkManager, parameters.meshSourceUrl, getPriority, cancellationToken)];
    for (let source of parameters.attributeSourceUrls) {
        promises.push(getMeshVertexAttributes(chunkManager, source, getPriority, cancellationToken));
    }
    return Promise.all(promises).then(results => {
        let origMesh = results[0];
        let combinedMesh = {
            info: {
                numVertices: origMesh.info.numVertices,
                numTriangles: origMesh.info.numTriangles,
                vertexAttributes: [],
            },
            vertexPositions: origMesh.vertexPositions,
            indices: origMesh.indices,
            vertexNormals: origMesh.vertexNormals,
            vertexAttributes: [],
        };
        function addAttribute(info, data, source) {
            let [min, max] = getMinMax(data);
            combinedMesh.info.vertexAttributes.push({
                name: info.name,
                source,
                numComponents: info.numComponents,
                dataType: info.dataType,
                min,
                max
            });
            combinedMesh.vertexAttributes.push(data);
        }
        function addAttributes(info, data, source) {
            const numAttributes = info.length;
            for (let i = 0; i < numAttributes; ++i) {
                addAttribute(info[i], data[i], source);
            }
        }
        addAttributes(origMesh.info.vertexAttributes, origMesh.vertexAttributes);
        parameters.attributeSourceUrls.forEach((source, i) => {
            let result = results[i + 1];
            if (result.numVertices !== origMesh.info.numVertices) {
                throw new Error(`Vertex attribute source ${JSON.stringify(source)} specifies attributes for ` +
                    `${result.numVertices} vertices, but mesh has ${origMesh.info.numVertices} vertices.`);
            }
            addAttributes(result.attributeInfo, result.attributes, source);
        });
        return combinedMesh;
    });
}
let SingleMeshSource = class SingleMeshSource extends (Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["WithParameters"])(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["ChunkSource"], neuroglancer_single_mesh_base__WEBPACK_IMPORTED_MODULE_3__["SingleMeshSourceParametersWithInfo"])) {
    getChunk() {
        const key = neuroglancer_single_mesh_base__WEBPACK_IMPORTED_MODULE_3__["SINGLE_MESH_CHUNK_KEY"];
        let chunk = this.chunks.get(key);
        if (chunk === undefined) {
            chunk = this.getNewChunk_(SingleMeshChunk);
            chunk.initialize(key);
            this.addChunk(chunk);
        }
        return chunk;
    }
    download(chunk, cancellationToken) {
        const getPriority = () => ({ priorityTier: chunk.priorityTier, priority: chunk.priority });
        return getCombinedMesh(this.chunkManager, this.parameters, getPriority, cancellationToken)
            .then(data => {
            if (Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_4__["stableStringify"])(data.info) !== Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_4__["stableStringify"])(this.parameters.info)) {
                throw new Error(`Mesh info has changed.`);
            }
            if (data.vertexNormals === undefined) {
                data.vertexNormals = Object(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_2__["computeVertexNormals"])(data.vertexPositions, data.indices);
            }
            chunk.data = data;
        });
    }
};
SingleMeshSource = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_6__["registerSharedObject"])()
], SingleMeshSource);

const SingleMeshLayerBase = Object(neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_5__["withSharedVisibility"])(Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["withChunkManager"])(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_6__["SharedObjectCounterpart"]));
let SingleMeshLayer = class SingleMeshLayer extends SingleMeshLayerBase {
    constructor(rpc, options) {
        super(rpc, options);
        this.source = this.registerDisposer(rpc.getRef(options['source']));
        this.registerDisposer(this.chunkManager.recomputeChunkPriorities.add(() => {
            this.updateChunkPriorities();
        }));
    }
    updateChunkPriorities() {
        const visibility = this.visibility.value;
        if (visibility === Number.NEGATIVE_INFINITY) {
            return;
        }
        const priorityTier = Object(neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_5__["getPriorityTier"])(visibility);
        const basePriority = Object(neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_5__["getBasePriority"])(visibility);
        const { source, chunkManager } = this;
        const chunk = source.getChunk();
        chunkManager.requestChunk(chunk, priorityTier, basePriority + SINGLE_MESH_CHUNK_PRIORITY);
    }
};
SingleMeshLayer = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_6__["registerSharedObject"])(neuroglancer_single_mesh_base__WEBPACK_IMPORTED_MODULE_3__["SINGLE_MESH_LAYER_RPC_ID"])
], SingleMeshLayer);

const INFO_PRIORITY = 1000;
Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_6__["registerPromiseRPC"])(neuroglancer_single_mesh_base__WEBPACK_IMPORTED_MODULE_3__["GET_SINGLE_MESH_INFO_RPC_ID"], function (x, cancellationToken) {
    let chunkManager = this.getRef(x['chunkManager']);
    try {
        let parameters = x['parameters'];
        return getCombinedMesh(chunkManager, parameters, () => ({ priorityTier: neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__["ChunkPriorityTier"].VISIBLE, priority: INFO_PRIORITY }), cancellationToken)
            .then(mesh => ({ value: mesh.info }));
    }
    finally {
        chunkManager.dispose();
    }
});


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/single_mesh/base.ts":
/*!********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/single_mesh/base.ts ***!
  \********************************************************************************************************/
/*! exports provided: SINGLE_MESH_LAYER_RPC_ID, GET_SINGLE_MESH_INFO_RPC_ID, SINGLE_MESH_CHUNK_KEY, SingleMeshSourceParameters, SingleMeshSourceParametersWithInfo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SINGLE_MESH_LAYER_RPC_ID", function() { return SINGLE_MESH_LAYER_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GET_SINGLE_MESH_INFO_RPC_ID", function() { return GET_SINGLE_MESH_INFO_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SINGLE_MESH_CHUNK_KEY", function() { return SINGLE_MESH_CHUNK_KEY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SingleMeshSourceParameters", function() { return SingleMeshSourceParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SingleMeshSourceParametersWithInfo", function() { return SingleMeshSourceParametersWithInfo; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const SINGLE_MESH_LAYER_RPC_ID = 'single_mesh/SingleMeshLayer';
const GET_SINGLE_MESH_INFO_RPC_ID = 'single_mesh/getSingleMeshInfo';
const SINGLE_MESH_CHUNK_KEY = '';
class SingleMeshSourceParameters {
}
class SingleMeshSourceParametersWithInfo extends SingleMeshSourceParameters {
}
SingleMeshSourceParametersWithInfo.RPC_ID = 'single_mesh/SingleMeshSource';


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/skeleton/backend.ts":
/*!********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/skeleton/backend.ts ***!
  \********************************************************************************************************/
/*! exports provided: SkeletonChunk, SkeletonSource, SkeletonLayer, decodeSkeletonVertexPositionsAndIndices */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SkeletonChunk", function() { return SkeletonChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SkeletonSource", function() { return SkeletonSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SkeletonLayer", function() { return SkeletonLayer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeSkeletonVertexPositionsAndIndices", function() { return decodeSkeletonVertexPositionsAndIndices; });
/* harmony import */ var neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/chunk_manager/backend */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/backend.ts");
/* harmony import */ var neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/mesh/backend */ "../../../../../../neuroglancer/src/neuroglancer/mesh/backend.ts");
/* harmony import */ var neuroglancer_segmentation_display_state_backend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/segmentation_display_state/backend */ "../../../../../../neuroglancer/src/neuroglancer/segmentation_display_state/backend.ts");
/* harmony import */ var neuroglancer_segmentation_display_state_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/segmentation_display_state/base */ "../../../../../../neuroglancer/src/neuroglancer/segmentation_display_state/base.ts");
/* harmony import */ var neuroglancer_skeleton_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! neuroglancer/skeleton/base */ "../../../../../../neuroglancer/src/neuroglancer/skeleton/base.ts");
/* harmony import */ var neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! neuroglancer/util/uint64 */ "../../../../../../neuroglancer/src/neuroglancer/util/uint64.ts");
/* harmony import */ var neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! neuroglancer/visibility_priority/backend */ "../../../../../../neuroglancer/src/neuroglancer/visibility_priority/backend.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};








const SKELETON_CHUNK_PRIORITY = 60;
// Chunk that contains the skeleton of a single object.
class SkeletonChunk extends neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["Chunk"] {
    constructor() {
        super();
        this.objectId = new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_5__["Uint64"]();
        this.vertexPositions = null;
        this.vertexAttributes = null;
        this.indices = null;
    }
    initializeSkeletonChunk(key, objectId) {
        super.initialize(key);
        this.objectId.assign(objectId);
    }
    freeSystemMemory() {
        this.vertexPositions = this.indices = null;
    }
    getVertexAttributeBytes() {
        let total = this.vertexPositions.byteLength;
        const { vertexAttributes } = this;
        if (vertexAttributes != null) {
            vertexAttributes.forEach(a => {
                total += a.byteLength;
            });
        }
        return total;
    }
    serialize(msg, transfers) {
        super.serialize(msg, transfers);
        const vertexPositions = this.vertexPositions;
        const indices = this.indices;
        msg['numVertices'] = vertexPositions.length / 3;
        msg['indices'] = indices;
        transfers.push(indices.buffer);
        const { vertexAttributes } = this;
        if (vertexAttributes != null && vertexAttributes.length > 0) {
            const vertexData = new Uint8Array(this.getVertexAttributeBytes());
            vertexData.set(new Uint8Array(vertexPositions.buffer, vertexPositions.byteOffset, vertexPositions.byteLength));
            let vertexAttributeOffsets = msg['vertexAttributeOffsets'] =
                new Uint32Array(vertexAttributes.length + 1);
            vertexAttributeOffsets[0] = 0;
            let offset = vertexPositions.byteLength;
            vertexAttributes.forEach((a, i) => {
                vertexAttributeOffsets[i + 1] = offset;
                vertexData.set(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), offset);
                offset += a.byteLength;
            });
            transfers.push(vertexData.buffer);
            msg['vertexAttributes'] = vertexData;
        }
        else {
            msg['vertexAttributes'] = new Uint8Array(vertexPositions.buffer, vertexPositions.byteOffset, vertexPositions.byteLength);
            msg['vertexAttributeOffsets'] = Uint32Array.of(0);
            if (vertexPositions.buffer !== transfers[0]) {
                transfers.push(vertexPositions.buffer);
            }
        }
        this.vertexPositions = this.indices = this.vertexAttributes = null;
    }
    downloadSucceeded() {
        this.systemMemoryBytes = this.gpuMemoryBytes =
            this.indices.byteLength + this.getVertexAttributeBytes();
        super.downloadSucceeded();
    }
}
class SkeletonSource extends neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["ChunkSource"] {
    getChunk(objectId) {
        const key = Object(neuroglancer_segmentation_display_state_base__WEBPACK_IMPORTED_MODULE_3__["getObjectKey"])(objectId);
        let chunk = this.chunks.get(key);
        if (chunk === undefined) {
            chunk = this.getNewChunk_(SkeletonChunk);
            chunk.initializeSkeletonChunk(key, objectId);
            this.addChunk(chunk);
        }
        return chunk;
    }
}
let SkeletonLayer = class SkeletonLayer extends neuroglancer_segmentation_display_state_backend__WEBPACK_IMPORTED_MODULE_2__["SegmentationLayerSharedObjectCounterpart"] {
    constructor(rpc, options) {
        super(rpc, options);
        this.source = this.registerDisposer(rpc.getRef(options['source']));
        this.registerDisposer(this.chunkManager.recomputeChunkPriorities.add(() => {
            this.updateChunkPriorities();
        }));
    }
    updateChunkPriorities() {
        const visibility = this.visibility.value;
        if (visibility === Number.NEGATIVE_INFINITY) {
            return;
        }
        const priorityTier = Object(neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_6__["getPriorityTier"])(visibility);
        const basePriority = Object(neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_6__["getBasePriority"])(visibility);
        const { source, chunkManager } = this;
        Object(neuroglancer_segmentation_display_state_base__WEBPACK_IMPORTED_MODULE_3__["forEachVisibleSegment3D"])(this, objectId => {
            const chunk = source.getChunk(objectId);
            chunkManager.requestChunk(chunk, priorityTier, basePriority + SKELETON_CHUNK_PRIORITY);
        });
    }
};
SkeletonLayer = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_7__["registerSharedObject"])(neuroglancer_skeleton_base__WEBPACK_IMPORTED_MODULE_4__["SKELETON_LAYER_RPC_ID"])
], SkeletonLayer);

/**
 * Extracts vertex positions and edge vertex indices of the specified endianness from `data'.
 *
 * See documentation of decodeVertexPositionsAndIndices.
 */
function decodeSkeletonVertexPositionsAndIndices(chunk, data, endianness, vertexByteOffset, numVertices, indexByteOffset, numEdges) {
    const meshData = Object(neuroglancer_mesh_backend__WEBPACK_IMPORTED_MODULE_1__["decodeVertexPositionsAndIndices"])(
    /*verticesPerPrimitive=*/ 2, data, endianness, vertexByteOffset, numVertices, indexByteOffset, numEdges);
    chunk.vertexPositions = meshData.vertexPositions;
    chunk.indices = meshData.indices;
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/skeleton/base.ts":
/*!*****************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/skeleton/base.ts ***!
  \*****************************************************************************************************/
/*! exports provided: SKELETON_LAYER_RPC_ID */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SKELETON_LAYER_RPC_ID", function() { return SKELETON_LAYER_RPC_ID; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const SKELETON_LAYER_RPC_ID = 'skeleton/SkeletonLayer';


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/skeleton/decode_precomputed_skeleton.ts":
/*!****************************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/skeleton/decode_precomputed_skeleton.ts ***!
  \****************************************************************************************************************************/
/*! exports provided: decodeSkeletonChunk */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeSkeletonChunk", function() { return decodeSkeletonChunk; });
/* harmony import */ var neuroglancer_skeleton_backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/skeleton/backend */ "../../../../../../neuroglancer/src/neuroglancer/skeleton/backend.ts");
/* harmony import */ var neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/data_type */ "../../../../../../neuroglancer/src/neuroglancer/util/data_type.ts");
/* harmony import */ var neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/util/endian */ "../../../../../../neuroglancer/src/neuroglancer/util/endian.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



function decodeSkeletonChunk(chunk, response, vertexAttributes) {
    let dv = new DataView(response);
    let numVertices = dv.getUint32(0, true);
    let numEdges = dv.getUint32(4, true);
    const vertexPositionsStartOffset = 8;
    let curOffset = 8 + numVertices * 4 * 3;
    Object(neuroglancer_skeleton_backend__WEBPACK_IMPORTED_MODULE_0__["decodeSkeletonVertexPositionsAndIndices"])(chunk, response, neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_2__["Endianness"].LITTLE, /*vertexByteOffset=*/ vertexPositionsStartOffset, numVertices, 
    /*indexByteOffset=*/ curOffset, /*numEdges=*/ numEdges);
    curOffset += numEdges * 4 * 2;
    let attributes = [];
    for (let info of vertexAttributes.values()) {
        const bytesPerVertex = neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_1__["DATA_TYPE_BYTES"][info.dataType] * info.numComponents;
        const totalBytes = bytesPerVertex * numVertices;
        const attribute = new Uint8Array(response, curOffset, totalBytes);
        switch (bytesPerVertex) {
            case 2:
                Object(neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_2__["convertEndian16"])(attribute, neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_2__["Endianness"].LITTLE);
                break;
            case 4:
            case 8:
                Object(neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_2__["convertEndian32"])(attribute, neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_2__["Endianness"].LITTLE);
                break;
        }
        attributes.push(attribute);
        curOffset += totalBytes;
    }
    chunk.vertexAttributes = attributes;
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/skeleton/decode_swc_skeleton.ts":
/*!********************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/skeleton/decode_swc_skeleton.ts ***!
  \********************************************************************************************************************/
/*! exports provided: decodeSwcSkeletonChunk */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeSwcSkeletonChunk", function() { return decodeSwcSkeletonChunk; });
function decodeSwcSkeletonChunk(chunk, swcStr) {
    let swcObjects = parseSwc(swcStr);
    if (swcObjects.length < 2) {
        throw new Error(`ERROR parsing swc file`);
    }
    let glVertices = new Float32Array(3 * (swcObjects.length));
    let glIndices = new Uint32Array(2 * (swcObjects.length - 1));
    swcObjects.forEach(function (swc_obj, i) {
        glVertices[3 * i] = swc_obj.z;
        glVertices[3 * i + 1] = swc_obj.y;
        glVertices[3 * i + 2] = swc_obj.x;
        if (swc_obj.parent !== -1) {
            glIndices[2 * (i - 1)] = i;
            glIndices[2 * i - 1] = swc_obj.parent;
        }
    });
    chunk.indices = glIndices;
    chunk.vertexPositions = glVertices;
}
/*
 * Parses a standard SWC file into an array of point objects
 * modified from
 * https://github.com/JaneliaSciComp/SharkViewer/blob/d9969a7c513beee32ff9650b00bf79cda8f3c76a/html/js/sharkviewer_loader.js
 */
function parseSwc(swcStr) {
    // split by line
    let swcInputAr = swcStr.split('\n');
    let swcObjectsAr = new Array();
    let float = '-?\\d*(?:\\.\\d+)?';
    let pattern = new RegExp('^[ \\t]*(' + [
        '\\d+',
        '\\d+',
        float,
        float,
        float,
        float,
        '-1|\\d+' // parent
    ].join(')[ \\t]+(') + ')[ \\t]*$');
    swcInputAr.forEach(function (e) {
        // if line meets swc point criteria, add it to the array
        // subtract 1 from indices to convert 1-indexing to 0-indexing
        let match = e.match(pattern);
        if (match) {
            let point = swcObjectsAr[parseInt(match[1], 10) - 1] = new PointObj();
            point.type = parseInt(match[2], 10);
            point.x = parseFloat(match[3]);
            point.y = parseFloat(match[4]);
            point.z = parseFloat(match[5]);
            point.radius = parseFloat(match[6]);
            point.parent = parseInt(match[7], 10) - 1;
        }
    });
    return swcObjectsAr;
}
class PointObj {
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend.ts":
/*!*********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/sliceview/backend.ts ***!
  \*********************************************************************************************************/
/*! exports provided: SliceView, SliceViewChunk, SliceViewChunkSource, RenderLayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SliceView", function() { return SliceView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SliceViewChunk", function() { return SliceViewChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SliceViewChunkSource", function() { return SliceViewChunkSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RenderLayer", function() { return RenderLayer; });
/* harmony import */ var neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/chunk_manager/backend */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/backend.ts");
/* harmony import */ var neuroglancer_coordinate_transform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/coordinate_transform */ "../../../../../../neuroglancer/src/neuroglancer/coordinate_transform.ts");
/* harmony import */ var neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/sliceview/base */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/base.ts");
/* harmony import */ var neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/util/geom */ "../../../../../../neuroglancer/src/neuroglancer/util/geom.ts");
/* harmony import */ var neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! neuroglancer/util/signal */ "../../../../../../neuroglancer/src/neuroglancer/util/signal.ts");
/* harmony import */ var neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! neuroglancer/visibility_priority/backend */ "../../../../../../neuroglancer/src/neuroglancer/visibility_priority/backend.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};







const BASE_PRIORITY = -1e12;
const SCALE_PRIORITY_MULTIPLIER = 1e9;
// Temporary values used by SliceView.updateVisibleChunk
const tempChunkPosition = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3"].create();
const tempCenter = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3"].create();
// Prefetch parameters
const PREFETCH_WIDTH_MULTIPLIER = 2;
const PREFETCH_HEIGHT_MULTIPLIER = 2;
// Temporary values used to get prefetch rectangles in SliceView.computeVisibleAndPrefetchChunks
const tempRectangle1 = [neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3"].create(), neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3"].create(), neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3"].create(), neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3"].create()];
const tempRectangle2 = [neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3"].create(), neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3"].create(), neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3"].create(), neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3"].create()];
const prefetchDepthMovement = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3"].create();
const tempChunkBound1 = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3"].create();
const tempChunkBound2 = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3"].create();
class SliceViewCounterpartBase extends neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_2__["SliceViewBase"] {
    constructor(rpc, options) {
        super();
        this.initializeSharedObject(rpc, options['id']);
    }
}
const SliceViewIntermediateBase = Object(neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_5__["withSharedVisibility"])(Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["withChunkManager"])(SliceViewCounterpartBase));
let SliceView = class SliceView extends SliceViewIntermediateBase {
    constructor(rpc, options) {
        super(rpc, options);
        this.handleLayerChanged = (() => {
            if (this.hasValidViewport) {
                this.chunkManager.scheduleUpdateChunkPriorities();
            }
        });
        this.invalidateVisibleSources = (() => {
            this.visibleSourcesStale = true;
            if (this.hasValidViewport) {
                this.chunkManager.scheduleUpdateChunkPriorities();
            }
        });
        this.prefetchingEnabled = options['prefetchingEnabled'];
        this.registerDisposer(this.chunkManager.recomputeChunkPriorities.add(() => {
            this.updateChunksToRequest();
        }));
    }
    onViewportChanged() {
        this.chunkManager.scheduleUpdateChunkPriorities();
    }
    updateChunksToRequest() {
        const globalCenter = this.centerDataPosition;
        let chunkManager = this.chunkManager;
        const visibility = this.visibility.value;
        if (visibility === Number.NEGATIVE_INFINITY) {
            return;
        }
        const sliceViewPriorityTier = Object(neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_5__["getPriorityTier"])(visibility);
        const prechunkPriorityTier = Object(neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_5__["getPriorityTier"])(Number.NEGATIVE_INFINITY);
        let basePriority = Object(neuroglancer_visibility_priority_backend__WEBPACK_IMPORTED_MODULE_5__["getBasePriority"])(visibility);
        basePriority += BASE_PRIORITY;
        const localCenter = tempCenter;
        let getLayoutObject = (chunkLayout) => {
            chunkLayout.globalToLocalSpatial(localCenter, globalCenter);
            return this.visibleChunkLayouts.get(chunkLayout);
        };
        function addChunk(priorityTier) {
            return (chunkLayout, sources, positionInChunks, visibleSources) => {
                neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3"].multiply(tempChunkPosition, positionInChunks, chunkLayout.size);
                let priority = -neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3"].distance(localCenter, tempChunkPosition);
                for (let source of visibleSources) {
                    let priorityIndex = sources.get(source);
                    let chunk = source.getChunk(positionInChunks);
                    chunkManager.requestChunk(chunk, priorityTier, basePriority + priority + SCALE_PRIORITY_MULTIPLIER * priorityIndex);
                }
            };
        }
        const addVisibleChunk = addChunk(sliceViewPriorityTier);
        if (this.prefetchingEnabled) {
            const addPrefetchChunk = addChunk(prechunkPriorityTier);
            this.computeVisibleAndPrefetchChunks(getLayoutObject, addVisibleChunk, addPrefetchChunk);
        }
        else {
            this.computeVisibleChunks(getLayoutObject, addVisibleChunk);
        }
    }
    removeVisibleLayer(layer) {
        this.visibleLayers.delete(layer);
        layer.layerChanged.remove(this.handleLayerChanged);
        layer.transform.changed.remove(this.invalidateVisibleSources);
        layer.renderScaleTarget.changed.remove(this.invalidateVisibleSources);
        this.invalidateVisibleSources();
    }
    addVisibleLayer(layer) {
        this.visibleLayers.set(layer, []);
        layer.layerChanged.add(this.handleLayerChanged);
        layer.transform.changed.add(this.invalidateVisibleSources);
        layer.renderScaleTarget.changed.add(this.invalidateVisibleSources);
        this.invalidateVisibleSources();
    }
    // Prefetch chunks are defined by the state of the viewport and the constants
    // PREFETCH_WIDTH_MULTIPLIER and PREFETCH_HEIGHT_MULTIPLIER. If prefetching is turned
    // on, these specify which non-visible chunks within the plane to request as prefetch chunks.
    // Prefetch chunks outside the plane are retrieved (again, only if prefetching enabled)
    // always in the same way: the first non-visible chunks encountered when moving the plane along
    // the normal vector in each direction.
    computeVisibleAndPrefetchChunks(getLayoutObject, addVisibleChunk, addPrefetchChunk) {
        this.computeVisibleChunks(getLayoutObject, addVisibleChunk, tempRectangle1);
        const visibleRectangle = tempRectangle1;
        // computePrefetchChunksOutsidePlane prefetches chunks by taking current viewport and moving it
        // along normal vector to the plane in each direction until we find chunks to prefetch or
        // we hit the end of the dataset
        const computePrefetchChunksOutsidePlane = () => {
            const { viewportAxes } = this;
            const moveVertex = (vertexOut, vertexIn, movementVector, movementMagnitude) => {
                neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3"].scale(vertexOut, movementVector, movementMagnitude);
                neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3"].add(vertexOut, vertexIn, vertexOut);
            };
            const copyRectangle = (rectangleOut, rectangleIn) => {
                for (let i = 0; i < 4; ++i) {
                    neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3"].copy(rectangleOut[i], rectangleIn[i]);
                }
            };
            const setPrefetchBounds = (prefetchingIntoPlane) => {
                const direction = (prefetchingIntoPlane) ? 1 : -1;
                return (chunkLayout, rectangleOut, lowerBoundOut, upperBoundOut, voxelSize) => {
                    neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3"].multiply(prefetchDepthMovement, voxelSize, viewportAxes[2]);
                    neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_2__["SliceViewBase"].getChunkBoundsForRectangle(chunkLayout, rectangleOut, tempChunkBound1, tempChunkBound2);
                    const visibleLowerChunkBound = tempChunkBound1;
                    const visibleUpperChunkBound = tempChunkBound2;
                    let i = 1;
                    while (true) {
                        for (let j = 0; j < 4; ++j) {
                            moveVertex(rectangleOut[j], visibleRectangle[j], prefetchDepthMovement, i * direction);
                        }
                        neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_2__["SliceViewBase"].getChunkBoundsForRectangle(chunkLayout, rectangleOut, lowerBoundOut, upperBoundOut);
                        if ((!neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3"].exactEquals(lowerBoundOut, visibleLowerChunkBound) ||
                            (!neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3"].exactEquals(upperBoundOut, visibleUpperChunkBound)))) {
                            break;
                        }
                        ++i;
                    }
                };
            };
            const prefetchRectangle = tempRectangle2;
            copyRectangle(prefetchRectangle, visibleRectangle);
            this.computeChunksWithinRectangle(getLayoutObject, addPrefetchChunk, prefetchRectangle, setPrefetchBounds(true));
            copyRectangle(prefetchRectangle, visibleRectangle);
            this.computeChunksWithinRectangle(getLayoutObject, addPrefetchChunk, prefetchRectangle, setPrefetchBounds(false));
        };
        // computePrefetchChunksWithinPlane selects prefetch chunks by taking current viewport rectangle
        // and pretending its width is PREFETCH_WIDTH_MULTIPLIER times its actual width and its height
        // is PREFETCH_HEIGHT_MULTIPLIER times its actual height. From this larger rectangle, it divides
        // the part that is not visible into 4 smaller rectanges (below, above, left of, and right of
        // the visible viewport), and calls computeChunksWithinRectangle on each one.
        const computePrefetchChunksWithinPlane = () => {
            let CornerType;
            (function (CornerType) {
                CornerType[CornerType["INNER"] = 0] = "INNER";
                CornerType[CornerType["OUTER"] = 1] = "OUTER";
            })(CornerType || (CornerType = {}));
            // Construct prefetch rectangle from two other rectangles and 4 instructions that tell which 4
            // corners from the two rectangles to pick.
            const computePrefetchRectangleChunks = (rectangleInstruction, innerRectangle, outerRectangle) => {
                const rectangleCorners = [];
                rectangleInstruction.forEach(cornerInstruction => {
                    const rectangleWithVertex = (cornerInstruction[0] === CornerType.INNER) ? innerRectangle : outerRectangle;
                    rectangleCorners.push(rectangleWithVertex[cornerInstruction[1]]);
                });
                const prefetchRectangle = rectangleCorners;
                this.computeChunksWithinRectangle(getLayoutObject, addPrefetchChunk, prefetchRectangle);
            };
            this.computeGlobalRectangle(tempRectangle2, 1, PREFETCH_HEIGHT_MULTIPLIER);
            const heightAdjustedRectangle = tempRectangle2;
            const rectangleBelowViewportInstructions = [[1, 0], [0, 0], [1, 2], [0, 2]];
            computePrefetchRectangleChunks(rectangleBelowViewportInstructions, visibleRectangle, heightAdjustedRectangle);
            const rectangleAboveViewportInstructions = [[0, 1], [1, 1], [0, 3], [1, 3]];
            computePrefetchRectangleChunks(rectangleAboveViewportInstructions, visibleRectangle, heightAdjustedRectangle);
            this.computeGlobalRectangle(tempRectangle1, PREFETCH_WIDTH_MULTIPLIER, PREFETCH_HEIGHT_MULTIPLIER);
            const heightAndWidthAdjustedRectangle = tempRectangle1;
            const rectangleOnLeftOfViewportInstructions = [[1, 0], [1, 1], [0, 0], [0, 1]];
            computePrefetchRectangleChunks(rectangleOnLeftOfViewportInstructions, heightAdjustedRectangle, heightAndWidthAdjustedRectangle);
            const rectangleOnRightOfViewportInstructions = [[0, 2], [0, 3], [1, 2], [1, 3]];
            computePrefetchRectangleChunks(rectangleOnRightOfViewportInstructions, heightAdjustedRectangle, heightAndWidthAdjustedRectangle);
        };
        computePrefetchChunksOutsidePlane();
        computePrefetchChunksWithinPlane();
    }
    updatePrefetching(prefetchingEnabled) {
        if (this.prefetchingEnabled !== prefetchingEnabled) {
            this.prefetchingEnabled = prefetchingEnabled;
            if (this.hasValidViewport) {
                this.chunkManager.scheduleUpdateChunkPriorities();
            }
        }
    }
    disposed() {
        for (let layer of this.visibleLayers.keys()) {
            this.removeVisibleLayer(layer);
        }
        super.disposed();
    }
};
SliceView = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_6__["registerSharedObject"])(neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_2__["SLICEVIEW_RPC_ID"])
], SliceView);

Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_6__["registerRPC"])(neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_2__["SLICEVIEW_UPDATE_VIEW_RPC_ID"], function (x) {
    let obj = this.get(x.id);
    if (x.width) {
        obj.setViewportSize(x.width, x.height);
    }
    if (x.viewportToData) {
        obj.setViewportToDataMatrix(x.viewportToData);
    }
});
Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_6__["registerRPC"])(neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_2__["SLICEVIEW_ADD_VISIBLE_LAYER_RPC_ID"], function (x) {
    let obj = this.get(x['id']);
    let layer = this.get(x['layerId']);
    obj.addVisibleLayer(layer);
});
Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_6__["registerRPC"])(neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_2__["SLICEVIEW_REMOVE_VISIBLE_LAYER_RPC_ID"], function (x) {
    let obj = this.get(x['id']);
    let layer = this.get(x['layerId']);
    obj.removeVisibleLayer(layer);
});
Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_6__["registerRPC"])(neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_2__["SLICEVIEW_UPDATE_PREFETCHING_RPC_ID"], function (x) {
    let obj = this.get(x['id']);
    obj.updatePrefetching(x.prefetchingEnabled);
});
class SliceViewChunk extends neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["Chunk"] {
    constructor() {
        super();
        this.source = null;
        this.chunkGridPosition = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3"].create();
    }
    initializeVolumeChunk(key, chunkGridPosition) {
        super.initialize(key);
        neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3"].copy(this.chunkGridPosition, chunkGridPosition);
    }
    serialize(msg, transfers) {
        super.serialize(msg, transfers);
        msg['chunkGridPosition'] = this.chunkGridPosition;
    }
    downloadSucceeded() {
        super.downloadSucceeded();
    }
    freeSystemMemory() { }
    toString() {
        return this.source.toString() + ':' + Object(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3Key"])(this.chunkGridPosition);
    }
}
class SliceViewChunkSource extends neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_0__["ChunkSource"] {
    constructor(rpc, options) {
        super(rpc, options);
    }
    getChunk(chunkGridPosition) {
        let key = Object(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["vec3Key"])(chunkGridPosition);
        let chunk = this.chunks.get(key);
        if (chunk === undefined) {
            chunk = this.getNewChunk_(this.chunkConstructor);
            chunk.initializeVolumeChunk(key, chunkGridPosition);
            this.addChunk(chunk);
        }
        return chunk;
    }
}
let RenderLayer = class RenderLayer extends neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_6__["SharedObjectCounterpart"] {
    constructor(rpc, options) {
        super(rpc, options);
        this.layerChanged = new neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_4__["NullarySignal"]();
        this.transform = new neuroglancer_coordinate_transform__WEBPACK_IMPORTED_MODULE_1__["CoordinateTransform"]();
        this.transformedSourcesGeneration = -1;
        this.renderScaleTarget = rpc.get(options.renderScaleTarget);
        let sources = this.sources = new Array();
        for (let alternativeIds of options['sources']) {
            let alternatives = new Array();
            sources.push(alternatives);
            for (let sourceId of alternativeIds) {
                let source = rpc.get(sourceId);
                this.registerDisposer(source.addRef());
                alternatives.push(source);
            }
        }
        neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["mat4"].copy(this.transform.transform, options['transform']);
        this.transform.changed.add(this.layerChanged.dispatch);
    }
};
RenderLayer = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_6__["registerSharedObject"])(neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_2__["SLICEVIEW_RENDERLAYER_RPC_ID"])
], RenderLayer);

Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_6__["registerRPC"])(neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_2__["SLICEVIEW_RENDERLAYER_UPDATE_TRANSFORM_RPC_ID"], function (x) {
    const layer = this.get(x['id']);
    const newValue = x['value'];
    const oldValue = layer.transform.transform;
    if (!neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["mat4"].equals(newValue, oldValue)) {
        neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["mat4"].copy(oldValue, newValue);
        layer.transform.changed.dispatch();
    }
});


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/bossNpz.ts":
/*!********************************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/bossNpz.ts ***!
  \********************************************************************************************************************************/
/*! exports provided: decodeBossNpzChunk */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeBossNpzChunk", function() { return decodeBossNpzChunk; });
/* harmony import */ var neuroglancer_async_computation_decode_gzip_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/async_computation/decode_gzip_request */ "../../../../../../neuroglancer/src/neuroglancer/async_computation/decode_gzip_request.ts");
/* harmony import */ var neuroglancer_async_computation_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/async_computation/request */ "../../../../../../neuroglancer/src/neuroglancer/async_computation/request.ts");
/* harmony import */ var neuroglancer_sliceview_backend_chunk_decoders_postprocess__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/sliceview/backend_chunk_decoders/postprocess */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/postprocess.ts");
/* harmony import */ var neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/sliceview/base */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/base.ts");
/* harmony import */ var neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! neuroglancer/util/geom */ "../../../../../../neuroglancer/src/neuroglancer/util/geom.ts");
/* harmony import */ var neuroglancer_util_npy__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! neuroglancer/util/npy */ "../../../../../../neuroglancer/src/neuroglancer/util/npy.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This decodes the BOSS (https://github.com/jhuapl-boss/) NPZ format, which is the Python
 * NPY binary format with zlib encoding.
 *
 * This is NOT the same as the Python NPZ format, which is a ZIP file containing multiple files
 * (each corresponding to a different variable) in NPY binary format.
 */






async function decodeBossNpzChunk(chunk, cancellationToken, response) {
    let parseResult = Object(neuroglancer_util_npy__WEBPACK_IMPORTED_MODULE_5__["parseNpy"])(await Object(neuroglancer_async_computation_request__WEBPACK_IMPORTED_MODULE_1__["requestAsyncComputation"])(neuroglancer_async_computation_decode_gzip_request__WEBPACK_IMPORTED_MODULE_0__["decodeGzip"], cancellationToken, [response], new Uint8Array(response)));
    let chunkDataSize = chunk.chunkDataSize;
    let source = chunk.source;
    let { shape } = parseResult;
    if (shape.length !== 3 || shape[0] !== chunkDataSize[2] || shape[1] !== chunkDataSize[1] ||
        shape[2] !== chunkDataSize[0]) {
        throw new Error(`Shape ${JSON.stringify(shape)} does not match chunkDataSize ${Object(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3Key"])(chunkDataSize)}`);
    }
    let parsedDataType = parseResult.dataType.dataType;
    let { spec } = source;
    if (parsedDataType !== spec.dataType) {
        throw new Error(`Data type ${neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_3__["DataType"][parsedDataType]} does not match expected data type ${neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_3__["DataType"][spec.dataType]}`);
    }
    await Object(neuroglancer_sliceview_backend_chunk_decoders_postprocess__WEBPACK_IMPORTED_MODULE_2__["postProcessRawData"])(chunk, cancellationToken, parseResult.data);
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/compressed_segmentation.ts":
/*!************************************************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/compressed_segmentation.ts ***!
  \************************************************************************************************************************************************/
/*! exports provided: decodeCompressedSegmentationChunk */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeCompressedSegmentationChunk", function() { return decodeCompressedSegmentationChunk; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function decodeCompressedSegmentationChunk(chunk, cancellationToken, response) {
    cancellationToken;
    chunk.data = new Uint32Array(response);
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/jpeg.ts":
/*!*****************************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/jpeg.ts ***!
  \*****************************************************************************************************************************/
/*! exports provided: decodeJpegChunk */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeJpegChunk", function() { return decodeJpegChunk; });
/* harmony import */ var neuroglancer_sliceview_backend_chunk_decoders_postprocess__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/sliceview/backend_chunk_decoders/postprocess */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/postprocess.ts");
/* harmony import */ var neuroglancer_async_computation_decode_jpeg_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/async_computation/decode_jpeg_request */ "../../../../../../neuroglancer/src/neuroglancer/async_computation/decode_jpeg_request.ts");
/* harmony import */ var neuroglancer_async_computation_request__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/async_computation/request */ "../../../../../../neuroglancer/src/neuroglancer/async_computation/request.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



async function decodeJpegChunk(chunk, cancellationToken, response) {
    const chunkDataSize = chunk.chunkDataSize;
    const decoded = await Object(neuroglancer_async_computation_request__WEBPACK_IMPORTED_MODULE_2__["requestAsyncComputation"])(neuroglancer_async_computation_decode_jpeg_request__WEBPACK_IMPORTED_MODULE_1__["decodeJpeg"], cancellationToken, [response], new Uint8Array(response), chunkDataSize[0], chunkDataSize[1] * chunkDataSize[2], chunk.source.spec.numChannels);
    await Object(neuroglancer_sliceview_backend_chunk_decoders_postprocess__WEBPACK_IMPORTED_MODULE_0__["postProcessRawData"])(chunk, cancellationToken, decoded);
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/postprocess.ts":
/*!************************************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/postprocess.ts ***!
  \************************************************************************************************************************************/
/*! exports provided: postProcessRawData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "postProcessRawData", function() { return postProcessRawData; });
/* harmony import */ var neuroglancer_async_computation_encode_compressed_segmentation_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/async_computation/encode_compressed_segmentation_request */ "../../../../../../neuroglancer/src/neuroglancer/async_computation/encode_compressed_segmentation_request.ts");
/* harmony import */ var neuroglancer_async_computation_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/async_computation/request */ "../../../../../../neuroglancer/src/neuroglancer/async_computation/request.ts");
/* harmony import */ var neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/sliceview/base */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/base.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Converts raw data volumes to the appropriate format required by the frontend.
 */



async function postProcessRawData(chunk, cancellationToken, data) {
    cancellationToken;
    const { spec } = chunk.source;
    if (spec.compressedSegmentationBlockSize !== undefined) {
        const { dataType } = spec;
        const chunkDataSize = chunk.chunkDataSize;
        const shape = [chunkDataSize[0], chunkDataSize[1], chunkDataSize[2], spec.numChannels];
        switch (dataType) {
            case neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_2__["DataType"].UINT32:
                chunk.data = await Object(neuroglancer_async_computation_request__WEBPACK_IMPORTED_MODULE_1__["requestAsyncComputation"])(neuroglancer_async_computation_encode_compressed_segmentation_request__WEBPACK_IMPORTED_MODULE_0__["encodeCompressedSegmentationUint32"], cancellationToken, [data.buffer], data, shape, spec.compressedSegmentationBlockSize);
                break;
            case neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_2__["DataType"].UINT64:
                chunk.data = await Object(neuroglancer_async_computation_request__WEBPACK_IMPORTED_MODULE_1__["requestAsyncComputation"])(neuroglancer_async_computation_encode_compressed_segmentation_request__WEBPACK_IMPORTED_MODULE_0__["encodeCompressedSegmentationUint64"], cancellationToken, [data.buffer], data, shape, spec.compressedSegmentationBlockSize);
                break;
            default:
                throw new Error(`Unsupported data type for compressed segmentation: ${neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_2__["DataType"][dataType]}`);
        }
    }
    else {
        chunk.data = data;
    }
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/raw.ts":
/*!****************************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/raw.ts ***!
  \****************************************************************************************************************************/
/*! exports provided: decodeRawChunk */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeRawChunk", function() { return decodeRawChunk; });
/* harmony import */ var neuroglancer_sliceview_backend_chunk_decoders_postprocess__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/sliceview/backend_chunk_decoders/postprocess */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend_chunk_decoders/postprocess.ts");
/* harmony import */ var neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/data_type */ "../../../../../../neuroglancer/src/neuroglancer/util/data_type.ts");
/* harmony import */ var neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/util/endian */ "../../../../../../neuroglancer/src/neuroglancer/util/endian.ts");
/* harmony import */ var neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/util/geom */ "../../../../../../neuroglancer/src/neuroglancer/util/geom.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




async function decodeRawChunk(chunk, cancellationToken, response, endianness = neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_2__["ENDIANNESS"], byteOffset = 0, byteLength = response.byteLength) {
    cancellationToken;
    let { spec } = chunk.source;
    let { dataType } = spec;
    let numElements = Object(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_3__["prod3"])(chunk.chunkDataSize);
    let bytesPerElement = neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_1__["DATA_TYPE_BYTES"][dataType];
    let expectedBytes = numElements * bytesPerElement * spec.numChannels;
    if (expectedBytes !== byteLength) {
        throw new Error(`Raw-format chunk is ${byteLength} bytes, ` +
            `but ${numElements} * ${bytesPerElement} = ${expectedBytes} bytes are expected.`);
    }
    let data;
    switch (dataType) {
        case neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_1__["DataType"].UINT8:
            data = new Uint8Array(response, byteOffset, byteLength);
            break;
        case neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_1__["DataType"].UINT16:
            data = new Uint16Array(response, byteOffset, byteLength / 2);
            Object(neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_2__["convertEndian16"])(data, endianness);
            break;
        case neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_1__["DataType"].UINT32:
        case neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_1__["DataType"].UINT64:
            data = new Uint32Array(response, byteOffset, byteLength / 4);
            Object(neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_2__["convertEndian32"])(data, endianness);
            break;
        case neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_1__["DataType"].FLOAT32:
            data = new Float32Array(response, byteOffset, byteLength / 4);
            Object(neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_2__["convertEndian32"])(data, endianness);
            break;
        default:
            throw new Error(`Unexpected data type: ${dataType}.`);
    }
    await Object(neuroglancer_sliceview_backend_chunk_decoders_postprocess__WEBPACK_IMPORTED_MODULE_0__["postProcessRawData"])(chunk, cancellationToken, data);
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/sliceview/base.ts":
/*!******************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/sliceview/base.ts ***!
  \******************************************************************************************************/
/*! exports provided: DATA_TYPE_BYTES, DataType, getTransformedSources, SliceViewBase, DEFAULT_MAX_VOXELS_PER_CHUNK_LOG2, getNearIsotropicBlockSize, getTwoDimensionalBlockSize, getTwoDimensionalBlockSizes, ChunkLayoutPreference, getCombinedTransform, getChunkDataSizes, SliceViewChunkSpecification, SLICEVIEW_RPC_ID, SLICEVIEW_RENDERLAYER_RPC_ID, SLICEVIEW_ADD_VISIBLE_LAYER_RPC_ID, SLICEVIEW_REMOVE_VISIBLE_LAYER_RPC_ID, SLICEVIEW_UPDATE_PREFETCHING_RPC_ID, SLICEVIEW_UPDATE_VIEW_RPC_ID, SLICEVIEW_RENDERLAYER_UPDATE_TRANSFORM_RPC_ID, SLICEVIEW_RENDERLAYER_UPDATE_MIP_LEVEL_CONSTRAINTS_RPC_ID */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTransformedSources", function() { return getTransformedSources; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SliceViewBase", function() { return SliceViewBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_MAX_VOXELS_PER_CHUNK_LOG2", function() { return DEFAULT_MAX_VOXELS_PER_CHUNK_LOG2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNearIsotropicBlockSize", function() { return getNearIsotropicBlockSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTwoDimensionalBlockSize", function() { return getTwoDimensionalBlockSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTwoDimensionalBlockSizes", function() { return getTwoDimensionalBlockSizes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChunkLayoutPreference", function() { return ChunkLayoutPreference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCombinedTransform", function() { return getCombinedTransform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getChunkDataSizes", function() { return getChunkDataSizes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SliceViewChunkSpecification", function() { return SliceViewChunkSpecification; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SLICEVIEW_RPC_ID", function() { return SLICEVIEW_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SLICEVIEW_RENDERLAYER_RPC_ID", function() { return SLICEVIEW_RENDERLAYER_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SLICEVIEW_ADD_VISIBLE_LAYER_RPC_ID", function() { return SLICEVIEW_ADD_VISIBLE_LAYER_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SLICEVIEW_REMOVE_VISIBLE_LAYER_RPC_ID", function() { return SLICEVIEW_REMOVE_VISIBLE_LAYER_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SLICEVIEW_UPDATE_PREFETCHING_RPC_ID", function() { return SLICEVIEW_UPDATE_PREFETCHING_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SLICEVIEW_UPDATE_VIEW_RPC_ID", function() { return SLICEVIEW_UPDATE_VIEW_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SLICEVIEW_RENDERLAYER_UPDATE_TRANSFORM_RPC_ID", function() { return SLICEVIEW_RENDERLAYER_UPDATE_TRANSFORM_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SLICEVIEW_RENDERLAYER_UPDATE_MIP_LEVEL_CONSTRAINTS_RPC_ID", function() { return SLICEVIEW_RENDERLAYER_UPDATE_MIP_LEVEL_CONSTRAINTS_RPC_ID; });
/* harmony import */ var neuroglancer_sliceview_chunk_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/sliceview/chunk_layout */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/chunk_layout.ts");
/* harmony import */ var neuroglancer_util_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/array */ "../../../../../../neuroglancer/src/neuroglancer/util/array.ts");
/* harmony import */ var neuroglancer_util_compare__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/util/compare */ "../../../../../../neuroglancer/src/neuroglancer/util/compare.ts");
/* harmony import */ var neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/util/data_type */ "../../../../../../neuroglancer/src/neuroglancer/util/data_type.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DATA_TYPE_BYTES", function() { return neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_3__["DATA_TYPE_BYTES"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DataType", function() { return neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_3__["DataType"]; });

/* harmony import */ var neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! neuroglancer/util/geom */ "../../../../../../neuroglancer/src/neuroglancer/util/geom.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







const DEBUG_CHUNK_INTERSECTIONS = false;
const DEBUG_VISIBLE_SOURCES = false;
const tempVec3 = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].create();
/**
 * Average cross-sectional area contained within a chunk of the specified size and rotation.
 *
 * This is estimated by taking the total volume of the chunk and dividing it by the total length of
 * the chunk along the z axis.
 */
function estimateSliceAreaPerChunk(zAxis, chunkLayout) {
    const chunkSize = chunkLayout.size;
    const zAxisRotated = chunkLayout.globalToLocalSpatialVector(tempVec3, zAxis);
    // Minimum and maximum dot product of zAxisRotated with each of the corners of the chunk.  Both
    // are initialized to 0 because the origin of the chunk has a projection of 0.
    let minProjection = 0, maxProjection = 0;
    let chunkVolume = 1;
    for (let i = 0; i < 3; ++i) {
        const chunkSizeValue = chunkSize[i];
        chunkVolume *= chunkSizeValue;
        const projection = chunkSizeValue * zAxisRotated[i];
        minProjection = Math.min(minProjection, projection);
        maxProjection = Math.max(maxProjection, projection);
    }
    const projectionLength = maxProjection - minProjection;
    return chunkVolume / projectionLength;
}
/**
 * All valid chunks are in the range [lowerBound, upperBound).
 *
 * @param lowerBound Output parameter for lowerBound.
 * @param upperBound Output parameter for upperBound.
 * @param sources Sources for which to compute the chunk bounds.
 */
function computeSourcesChunkBounds(sourcesLowerBound, sourcesUpperBound, sources) {
    for (let i = 0; i < 3; ++i) {
        sourcesLowerBound[i] = Number.POSITIVE_INFINITY;
        sourcesUpperBound[i] = Number.NEGATIVE_INFINITY;
    }
    for (let source of sources) {
        let { spec } = source;
        let { lowerChunkBound, upperChunkBound } = spec;
        for (let i = 0; i < 3; ++i) {
            sourcesLowerBound[i] = Math.min(sourcesLowerBound[i], lowerChunkBound[i]);
            sourcesUpperBound[i] = Math.max(sourcesUpperBound[i], upperChunkBound[i]);
        }
    }
}
var BoundsComparisonResult;
(function (BoundsComparisonResult) {
    // Needle is fully outside haystack.
    BoundsComparisonResult[BoundsComparisonResult["FULLY_OUTSIDE"] = 0] = "FULLY_OUTSIDE";
    // Needle is fully inside haystack.
    BoundsComparisonResult[BoundsComparisonResult["FULLY_INSIDE"] = 1] = "FULLY_INSIDE";
    // Needle is partially inside haystack.
    BoundsComparisonResult[BoundsComparisonResult["PARTIALLY_INSIDE"] = 2] = "PARTIALLY_INSIDE";
})(BoundsComparisonResult || (BoundsComparisonResult = {}));
function compareBoundsSingleDimension(needleLower, needleUpper, haystackLower, haystackUpper) {
    if (needleLower >= haystackUpper || needleUpper <= haystackLower) {
        return BoundsComparisonResult.FULLY_OUTSIDE;
    }
    if (needleLower >= haystackLower && needleUpper <= haystackUpper) {
        return BoundsComparisonResult.FULLY_INSIDE;
    }
    return BoundsComparisonResult.PARTIALLY_INSIDE;
}
function compareBounds(needleLowerBound, needleUpperBound, haystackLowerBound, haystackUpperBound) {
    let curResult = BoundsComparisonResult.FULLY_INSIDE;
    for (let i = 0; i < 3; ++i) {
        let newResult = compareBoundsSingleDimension(needleLowerBound[i], needleUpperBound[i], haystackLowerBound[i], haystackUpperBound[i]);
        switch (newResult) {
            case BoundsComparisonResult.FULLY_OUTSIDE:
                return newResult;
            case BoundsComparisonResult.PARTIALLY_INSIDE:
                curResult = newResult;
                break;
        }
    }
    return curResult;
}
function areBoundsInvalid(lowerBound, upperBound) {
    for (let i = 0; i < 3; ++i) {
        if (lowerBound[i] > upperBound[i]) {
            return true;
        }
    }
    return false;
}
function getTransformedSources(renderLayer) {
    const { transform } = renderLayer;
    let { transformedSources } = renderLayer;
    const generation = transform.changed.count;
    if (generation !== renderLayer.transformedSourcesGeneration) {
        renderLayer.transformedSourcesGeneration = generation;
        if (neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["mat4"].equals(transform.transform, neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["identityMat4"])) {
            transformedSources = renderLayer.sources.map(alternatives => alternatives.map(source => ({
                source,
                chunkLayout: source.spec.chunkLayout,
                voxelSize: source.spec.voxelSize
            })));
        }
        else {
            transformedSources = renderLayer.sources.map(alternatives => alternatives.map(source => {
                const chunkLayout = source.spec.chunkLayout;
                const transformedChunkLayout = neuroglancer_sliceview_chunk_layout__WEBPACK_IMPORTED_MODULE_0__["ChunkLayout"].get(chunkLayout.size, getCombinedTransform(chunkLayout.transform, transform));
                return {
                    chunkLayout: transformedChunkLayout,
                    source,
                    voxelSize: transformedChunkLayout.localSpatialVectorToGlobal(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].create(), source.spec.voxelSize),
                };
            }));
        }
        renderLayer.transformedSources = transformedSources;
    }
    return transformedSources;
}
function pickBestAlternativeSource(zAxis, alternatives) {
    let numAlternatives = alternatives.length;
    let bestAlternativeIndex = 0;
    if (DEBUG_VISIBLE_SOURCES) {
        console.log(alternatives);
    }
    if (numAlternatives > 1) {
        let bestSliceArea = 0;
        for (let alternativeIndex = 0; alternativeIndex < numAlternatives; ++alternativeIndex) {
            let alternative = alternatives[alternativeIndex];
            const { chunkLayout } = alternative;
            let sliceArea = estimateSliceAreaPerChunk(zAxis, chunkLayout);
            if (DEBUG_VISIBLE_SOURCES) {
                console.log(`zAxis = ${zAxis}, chunksize = ${chunkLayout.size}, sliceArea = ${sliceArea}`);
            }
            if (sliceArea > bestSliceArea) {
                bestSliceArea = sliceArea;
                bestAlternativeIndex = alternativeIndex;
            }
        }
    }
    return alternatives[bestAlternativeIndex];
}
const tempGlobalRectangle = [neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].create(), neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].create(), neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].create(), neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].create()];
class SliceViewBase extends neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_5__["SharedObject"] {
    constructor() {
        super();
        this.width = -1;
        this.height = -1;
        this.hasViewportToData = false;
        /**
         * Specifies whether width, height, and viewportToData are valid.
         */
        this.hasValidViewport = false;
        // Transforms (x,y) viewport coordinates in the range:
        //
        // x=[left: -width/2, right: width/2] and
        //
        // y=[top: -height/2, bottom: height/2],
        //
        // to data coordinates.
        this.viewportToData = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["mat4"].create();
        // Normalized x, y, and z viewport axes in data coordinate space.
        this.viewportAxes = [neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].create(), neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].create(), neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].create()];
        // Viewport axes used for selecting visible sources.
        this.previousViewportAxes = [neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].create(), neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].create()];
        this.centerDataPosition = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].create();
        this.viewportPlaneDistanceToOrigin = 0;
        /**
         * For each visible ChunkLayout, maps each visible GenericVolumeChunkSource to its priority index.
         * Overall chunk priority ordering is based on a lexicographical ordering of (priorityIndex,
         * -distanceToCenter).
         */
        this.visibleChunkLayouts = new Map();
        this.visibleLayers = new Map();
        this.visibleSourcesStale = true;
        /**
         * Size in spatial units (nm) of a single pixel.
         */
        this.pixelSize = 0;
        neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["mat4"].identity(this.viewportToData);
    }
    /**
     * Called when hasValidViewport == true and the viewport width/height or data transform matrix
     * changes.
     */
    onViewportChanged() { }
    maybeSetHasValidViewport() {
        if (!this.hasValidViewport && this.width !== -1 && this.height !== -1 &&
            this.hasViewportToData) {
            this.hasValidViewport = true;
            this.onHasValidViewport();
        }
        if (this.hasValidViewport) {
            this.onViewportChanged();
        }
    }
    onHasValidViewport() { }
    setViewportSize(width, height) {
        if (width !== this.width || height !== this.height) {
            this.width = width;
            this.height = height;
            this.maybeSetHasValidViewport();
            return true;
        }
        return false;
    }
    setViewportToDataMatrix(mat) {
        if (this.hasViewportToData && neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["mat4"].equals(this.viewportToData, mat)) {
            return false;
        }
        this.hasViewportToData = true;
        let { viewportToData } = this;
        neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["mat4"].copy(viewportToData, mat);
        Object(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["rectifyTransformMatrixIfAxisAligned"])(viewportToData);
        neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].transformMat4(this.centerDataPosition, neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["kZeroVec"], mat);
        // Initialize to zero to avoid confusing TypeScript compiler.
        let newPixelSize = 0;
        // Swap previousViewportAxes with viewportAxes.
        let viewportAxes = this.viewportAxes;
        let previousViewportAxes = this.previousViewportAxes;
        // Compute axes.
        for (var i = 0; i < 3; ++i) {
            let a = viewportAxes[i];
            Object(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["transformVectorByMat4"])(a, neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["kAxes"][i], viewportToData);
            // a[3] is guaranteed to be 0.
            if (i === 0) {
                newPixelSize = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].length(a);
            }
            neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].normalize(a, a);
        }
        this.viewportAxes = viewportAxes;
        this.previousViewportAxes = previousViewportAxes;
        if (!Object(neuroglancer_util_compare__WEBPACK_IMPORTED_MODULE_2__["approxEqual"])(newPixelSize, this.pixelSize) ||
            (neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].dot(viewportAxes[0], previousViewportAxes[0]) < 0.95) ||
            (neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].dot(viewportAxes[1], previousViewportAxes[1]) < 0.95)) {
            neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].copy(previousViewportAxes[0], viewportAxes[0]);
            neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].copy(previousViewportAxes[1], viewportAxes[1]);
            this.visibleSourcesStale = true;
            this.pixelSize = newPixelSize;
        }
        // Compute viewport plane distance to origin.
        this.viewportPlaneDistanceToOrigin = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].dot(this.centerDataPosition, this.viewportAxes[2]);
        this.onViewportToDataMatrixChanged();
        this.maybeSetHasValidViewport();
        return true;
    }
    onViewportToDataMatrixChanged() { }
    /**
     * Computes the list of sources to use for each visible layer, based on the
     * current pixelSize, and the user specified integers minMIPLevel and maxMIPLevel.
     */
    updateVisibleSources() {
        if (!this.visibleSourcesStale) {
            return;
        }
        this.visibleSourcesStale = false;
        // Increase pixel size by a small margin.
        const pixelSize = this.pixelSize * 1.1;
        // console.log("pixelSize", pixelSize);
        const visibleChunkLayouts = this.visibleChunkLayouts;
        const zAxis = this.viewportAxes[2];
        const visibleLayers = this.visibleLayers;
        visibleChunkLayouts.clear();
        for (const [renderLayer, visibleSources] of visibleLayers) {
            visibleSources.length = 0;
            const transformedSources = getTransformedSources(renderLayer);
            const numSources = transformedSources.length;
            let scaleIndex;
            // At the smallest scale, all alternative sources must have the same voxel size, which is
            // considered to be the base voxel size.
            const smallestVoxelSize = transformedSources[0][0].voxelSize;
            if (renderLayer.renderRatioLimit !== undefined) {
                // If the pixel nm size in the slice is bigger than the smallest dimension of the
                // highest resolution voxel size (e.g. 4nm if the highest res is 4x4x40nm) by
                // a certain ratio (right now semi-arbitarily set as a constant in chunked_graph/base.ts)
                // we do not request the ChunkedGraph for root -> supervoxel mappings, and
                // instead display a message to the user
                const chunkedGraphVoxelSize = renderLayer.sources[0][0].spec.voxelSize;
                if (renderLayer.renderRatioLimit < (pixelSize / Math.min(...chunkedGraphVoxelSize))) {
                    if (renderLayer.leafRequestsActive !== undefined) {
                        renderLayer.leafRequestsActive.value = false;
                    }
                    continue;
                }
                if (renderLayer.leafRequestsActive !== undefined) {
                    renderLayer.leafRequestsActive.value = true;
                }
            }
            const renderScaleTarget = renderLayer.renderScaleTarget.value;
            /**
             * Determines whether we should continue to look for a finer-resolution source *after* one
             * with the specified voxelSize.
             */
            const canImproveOnVoxelSize = (voxelSize) => {
                const targetSize = pixelSize * renderScaleTarget;
                for (let i = 0; i < 3; ++i) {
                    const size = voxelSize[i];
                    // If size <= pixelSize, no need for improvement.
                    // If size === smallestVoxelSize, also no need for improvement.
                    if (size > targetSize && size > 1.01 * smallestVoxelSize[i]) {
                        return true;
                    }
                }
                return false;
            };
            const improvesOnPrevVoxelSize = (voxelSize, prevVoxelSize) => {
                const targetSize = pixelSize * renderScaleTarget;
                for (let i = 0; i < 3; ++i) {
                    const size = voxelSize[i];
                    const prevSize = prevVoxelSize[i];
                    if (Math.abs(targetSize - size) < Math.abs(targetSize - prevSize) &&
                        size < 1.01 * prevSize) {
                        return true;
                    }
                }
                return false;
            };
            /**
             * Registers a source as being visible.  This should be called with consecutively decreasing
             * values of scaleIndex.
             */
            const addVisibleSource = (transformedSource, sourceScaleIndex) => {
                // Add to end of visibleSources list.  We will reverse the list after all sources are
                // added.
                const { source, chunkLayout } = transformedSource;
                visibleSources[visibleSources.length++] = transformedSource;
                let existingSources = visibleChunkLayouts.get(chunkLayout);
                if (existingSources === undefined) {
                    existingSources = new Map();
                    visibleChunkLayouts.set(chunkLayout, existingSources);
                }
                existingSources.set(source, sourceScaleIndex);
            };
            scaleIndex = numSources - 1;
            let prevVoxelSize;
            while (true) {
                const transformedSource = pickBestAlternativeSource(zAxis, transformedSources[scaleIndex]);
                if (prevVoxelSize !== undefined &&
                    !improvesOnPrevVoxelSize(transformedSource.voxelSize, prevVoxelSize)) {
                    break;
                }
                addVisibleSource(transformedSource, (scaleIndex + 1) / numSources);
                if (scaleIndex === 0 || !canImproveOnVoxelSize(transformedSource.voxelSize)) {
                    break;
                }
                prevVoxelSize = transformedSource.voxelSize;
                --scaleIndex;
            }
            // Reverse visibleSources list since we added sources from coarsest to finest resolution, but
            // we want them ordered from finest to coarsest.
            visibleSources.reverse();
        }
    }
    computeVisibleChunks(getLayoutObject, addChunk, rectangleOut) {
        this.updateVisibleSources();
        const visibleRectangle = (rectangleOut) ? rectangleOut : tempGlobalRectangle;
        this.computeGlobalRectangle(visibleRectangle);
        return this.computeChunksWithinRectangle(getLayoutObject, addChunk, visibleRectangle);
    }
    // Used to get global coordinates of viewport corners. These corners
    // are used to find chunks within these corners in computeChunksFromGlobalCorners. The order of
    // these corners are relevant in the backend in computePrefetchChunksWithinPlane to construct the corners of
    // prefetch rectangles.
    computeGlobalRectangle(rectangleOut, widthMultiplier = 1, heightMultiplier = 1) {
        const { viewportToData, width, height } = this;
        const modifiedWidth = widthMultiplier * width;
        const modifiedHeight = heightMultiplier * height;
        for (let i = 0; i < 3; ++i) {
            rectangleOut[0][i] = -neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["kAxes"][0][i] * modifiedWidth / 2 - neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["kAxes"][1][i] * modifiedHeight / 2;
            rectangleOut[1][i] = -neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["kAxes"][0][i] * modifiedWidth / 2 + neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["kAxes"][1][i] * modifiedHeight / 2;
            rectangleOut[2][i] = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["kAxes"][0][i] * modifiedWidth / 2 - neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["kAxes"][1][i] * modifiedHeight / 2;
            rectangleOut[3][i] = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["kAxes"][0][i] * modifiedWidth / 2 + neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["kAxes"][1][i] * modifiedHeight / 2;
        }
        for (let i = 0; i < 4; ++i) {
            neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].transformMat4(rectangleOut[i], rectangleOut[i], viewportToData);
        }
    }
    static getChunkBoundsForRectangle(chunkLayout, rectangle, lowerBoundOut, upperBoundOut) {
        neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].set(lowerBoundOut, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
        neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].set(upperBoundOut, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);
        for (let i = 0; i < 4; ++i) {
            const localCorner = chunkLayout.globalToLocalGrid(tempVec3, rectangle[i]);
            for (let j = 0; j < 3; ++j) {
                lowerBoundOut[j] = Math.min(lowerBoundOut[j], Math.floor(localCorner[j]));
                upperBoundOut[j] = Math.max(upperBoundOut[j], Math.floor(localCorner[j]) + 1);
            }
        }
    }
    computeChunksWithinRectangle(getLayoutObject, addChunk, rectangle, makeBoundsForRectangle) {
        // These variables hold the lower and upper bounds on chunk grid positions that intersect the
        // viewing plane.
        var lowerChunkBound = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].create();
        var upperChunkBound = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].create();
        let sourcesLowerChunkBound = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].create();
        let sourcesUpperChunkBound = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].create();
        // Vertex with maximal dot product with the positive viewport plane normal.
        // Implicitly, negativeVertex = 1 - positiveVertex.
        var positiveVertex = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].create();
        var planeNormal = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].create();
        const centerDataPosition = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].create();
        // Sources whose bounds partially contain the current bounding box.
        let partiallyVisibleSources = new Array();
        // Sources whose bounds fully contain the current bounding box.
        let fullyVisibleSources = new Array();
        const setCenterDataPosition = () => {
            neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].copy(centerDataPosition, rectangle[0]);
            for (let i = 1; i < 4; ++i) {
                neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].add(centerDataPosition, centerDataPosition, rectangle[i]);
            }
            neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].scale(centerDataPosition, centerDataPosition, 0.25);
        };
        setCenterDataPosition();
        const computeChunksForLayout = (chunkLayout, visibleSources) => {
            let layoutObject = getLayoutObject(chunkLayout);
            const setupLocalChunkBounds = () => {
                computeSourcesChunkBounds(sourcesLowerChunkBound, sourcesUpperChunkBound, visibleSources.keys());
                if (DEBUG_CHUNK_INTERSECTIONS) {
                    console.log(`Initial sources chunk bounds: ` +
                        `${neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].str(sourcesLowerChunkBound)}, ${neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].str(sourcesUpperChunkBound)}`);
                }
                chunkLayout.globalToLocalSpatialVector(planeNormal, this.viewportAxes[2]);
                for (let i = 0; i < 3; ++i) {
                    positiveVertex[i] = planeNormal[i] > 0 ? 1 : 0;
                }
                if (makeBoundsForRectangle) {
                    makeBoundsForRectangle(chunkLayout, rectangle, lowerChunkBound, upperChunkBound, visibleSources.keys().next().value.spec.voxelSize);
                    // rectangle modified in order to prefetch, reset center
                    setCenterDataPosition();
                }
                else {
                    SliceViewBase.getChunkBoundsForRectangle(chunkLayout, rectangle, lowerChunkBound, upperChunkBound);
                }
                neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].max(lowerChunkBound, lowerChunkBound, sourcesLowerChunkBound);
                neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].min(upperChunkBound, upperChunkBound, sourcesUpperChunkBound);
            };
            setupLocalChunkBounds();
            // Center position in chunk grid coordinates.
            const planeDistanceToOrigin = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].dot(chunkLayout.globalToLocalGrid(tempVec3, centerDataPosition), planeNormal);
            // Make sure bounds are not invalid. This can only happen when the backend is prefetching
            // along the normal to the plane, and tries to prefetch outside the bounds of the dataset
            if (areBoundsInvalid(lowerChunkBound, upperChunkBound)) {
                return;
            }
            // Checks whether [lowerBound, upperBound) intersects the viewport plane.
            //
            // positiveVertexDistanceToOrigin = dot(planeNormal, lowerBound +
            // positiveVertex * (upperBound - lowerBound)) - planeDistanceToOrigin;
            // negativeVertexDistanceToOrigin = dot(planeNormal, lowerBound +
            // negativeVertex * (upperBound - lowerBound)) - planeDistanceToOrigin;
            //
            // positive vertex must have positive distance, and negative vertex must
            // have negative distance.
            function intersectsPlane() {
                var positiveVertexDistanceToOrigin = 0;
                var negativeVertexDistanceToOrigin = 0;
                // Check positive vertex.
                for (let i = 0; i < 3; ++i) {
                    let normalValue = planeNormal[i];
                    let lowerValue = lowerChunkBound[i];
                    let upperValue = upperChunkBound[i];
                    let diff = upperValue - lowerValue;
                    let positiveOffset = positiveVertex[i] * diff;
                    // console.log(
                    //     normalValue, lowerValue, upperValue, diff, positiveOffset,
                    //     positiveVertexDistanceToOrigin, negativeVertexDistanceToOrigin);
                    positiveVertexDistanceToOrigin += normalValue * (lowerValue + positiveOffset);
                    negativeVertexDistanceToOrigin += normalValue * (lowerValue + diff - positiveOffset);
                }
                if (DEBUG_CHUNK_INTERSECTIONS) {
                    console.log(`    planeNormal = ${planeNormal}`);
                    console.log('    {positive,negative}VertexDistanceToOrigin: ', positiveVertexDistanceToOrigin, negativeVertexDistanceToOrigin, planeDistanceToOrigin);
                    console.log('    intersectsPlane:', negativeVertexDistanceToOrigin, planeDistanceToOrigin, positiveVertexDistanceToOrigin);
                }
                if (positiveVertexDistanceToOrigin < planeDistanceToOrigin) {
                    return false;
                }
                return negativeVertexDistanceToOrigin <= planeDistanceToOrigin;
            }
            function populateVisibleSources() {
                fullyVisibleSources.length = 0;
                partiallyVisibleSources.length = 0;
                for (let source of visibleSources.keys()) {
                    let spec = source.spec;
                    let result = compareBounds(lowerChunkBound, upperChunkBound, spec.lowerChunkBound, spec.upperChunkBound);
                    if (DEBUG_CHUNK_INTERSECTIONS) {
                        console.log(`Comparing source bounds lowerBound=${neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].str(lowerChunkBound)}, ` +
                            `upperBound=${neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].str(upperChunkBound)}, ` +
                            `lowerChunkBound=${neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].str(spec.lowerChunkBound)}, ` +
                            `upperChunkBound=${neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].str(spec.upperChunkBound)}, ` +
                            `got ${BoundsComparisonResult[result]}`, spec, source);
                    }
                    switch (result) {
                        case BoundsComparisonResult.FULLY_INSIDE:
                            fullyVisibleSources.push(source);
                            break;
                        case BoundsComparisonResult.PARTIALLY_INSIDE:
                            partiallyVisibleSources.push(source);
                            break;
                    }
                }
            }
            populateVisibleSources();
            let partiallyVisibleSourcesLength = partiallyVisibleSources.length;
            // Mutates lowerBound and upperBound while running, but leaves them the
            // same once finished.
            function checkBounds(nextSplitDim) {
                if (DEBUG_CHUNK_INTERSECTIONS) {
                    console.log(`chunk bounds: ${lowerChunkBound} ${upperChunkBound} ` +
                        `fullyVisible: ${fullyVisibleSources} partiallyVisible: ` +
                        `${partiallyVisibleSources.slice(0, partiallyVisibleSourcesLength)}`);
                }
                if (fullyVisibleSources.length === 0 && partiallyVisibleSourcesLength === 0) {
                    if (DEBUG_CHUNK_INTERSECTIONS) {
                        console.log('  no visible sources');
                    }
                    return;
                }
                if (DEBUG_CHUNK_INTERSECTIONS) {
                    console.log(`Check bounds: [ ${neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].str(lowerChunkBound)}, ${neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].str(upperChunkBound)} ]`);
                }
                var volume = 1;
                for (let i = 0; i < 3; ++i) {
                    volume *= Math.max(0, upperChunkBound[i] - lowerChunkBound[i]);
                }
                if (volume === 0) {
                    if (DEBUG_CHUNK_INTERSECTIONS) {
                        console.log('  volume == 0');
                    }
                    return;
                }
                if (!intersectsPlane()) {
                    if (DEBUG_CHUNK_INTERSECTIONS) {
                        console.log('  doesn\'t intersect plane');
                    }
                    return;
                }
                if (DEBUG_CHUNK_INTERSECTIONS) {
                    console.log('Within bounds: [' + neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].str(lowerChunkBound) + ', ' +
                        neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].str(upperChunkBound) + ']');
                }
                if (volume === 1) {
                    addChunk(chunkLayout, layoutObject, lowerChunkBound, fullyVisibleSources);
                    return;
                }
                var dimLower, dimUpper, diff;
                while (true) {
                    dimLower = lowerChunkBound[nextSplitDim];
                    dimUpper = upperChunkBound[nextSplitDim];
                    diff = dimUpper - dimLower;
                    if (diff === 1) {
                        nextSplitDim = (nextSplitDim + 1) % 3;
                    }
                    else {
                        break;
                    }
                }
                let splitPoint = dimLower + Math.floor(0.5 * diff);
                let newNextSplitDim = (nextSplitDim + 1) % 3;
                let fullyVisibleSourcesLength = fullyVisibleSources.length;
                upperChunkBound[nextSplitDim] = splitPoint;
                let oldPartiallyVisibleSourcesLength = partiallyVisibleSourcesLength;
                function adjustSources() {
                    partiallyVisibleSourcesLength = Object(neuroglancer_util_array__WEBPACK_IMPORTED_MODULE_1__["partitionArray"])(partiallyVisibleSources, 0, oldPartiallyVisibleSourcesLength, source => {
                        let spec = source.spec;
                        let result = compareBounds(lowerChunkBound, upperChunkBound, spec.lowerChunkBound, spec.upperChunkBound);
                        switch (result) {
                            case BoundsComparisonResult.PARTIALLY_INSIDE:
                                return true;
                            case BoundsComparisonResult.FULLY_INSIDE:
                                fullyVisibleSources.push(source);
                            default:
                                return false;
                        }
                    });
                }
                adjustSources();
                checkBounds(newNextSplitDim);
                // Truncate list of fully visible sources.
                fullyVisibleSources.length = fullyVisibleSourcesLength;
                // Restore partiallyVisibleSources.
                partiallyVisibleSourcesLength = oldPartiallyVisibleSourcesLength;
                upperChunkBound[nextSplitDim] = dimUpper;
                lowerChunkBound[nextSplitDim] = splitPoint;
                adjustSources();
                checkBounds(newNextSplitDim);
                lowerChunkBound[nextSplitDim] = dimLower;
                // Truncate list of fully visible sources.
                fullyVisibleSources.length = fullyVisibleSourcesLength;
                // Restore partiallyVisibleSources.
                partiallyVisibleSourcesLength = oldPartiallyVisibleSourcesLength;
            }
            checkBounds(0);
        };
        for (const [curChunkLayout, curVisibleSources] of this.visibleChunkLayouts) {
            computeChunksForLayout(curChunkLayout, curVisibleSources);
        }
    }
}
/**
 * By default, choose a chunk size with at most 2^18 = 262144 voxels.
 */
const DEFAULT_MAX_VOXELS_PER_CHUNK_LOG2 = 18;
/**
 * Determines a near-isotropic (in global spatial coordinates) block size.  All dimensions will be
 * powers of 2, and will not exceed upperVoxelBound - lowerVoxelBound.  The total number of voxels
 * will not exceed maxVoxelsPerChunkLog2.
 */
function getNearIsotropicBlockSize(options) {
    let { voxelSize, lowerVoxelBound = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["kZeroVec"], upperVoxelBound, maxVoxelsPerChunkLog2 = DEFAULT_MAX_VOXELS_PER_CHUNK_LOG2, transform = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["identityMat4"], maxBlockSize = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["kInfinityVec"], } = options;
    maxVoxelsPerChunkLog2 -= Math.log2(options.numChannels);
    // Adjust voxelSize by effective scaling factor.
    let temp = Object(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["effectiveScalingFactorFromMat4"])(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].create(), transform);
    voxelSize = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].multiply(temp, temp, voxelSize);
    let chunkDataSize = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].fromValues(1, 1, 1);
    let maxChunkDataSize;
    if (upperVoxelBound === undefined) {
        maxChunkDataSize = maxBlockSize;
    }
    else {
        maxChunkDataSize = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].create();
        for (let i = 0; i < 3; ++i) {
            maxChunkDataSize[i] =
                Math.pow(2, Math.floor(Math.log2(upperVoxelBound[i] - lowerVoxelBound[i])));
        }
        neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].min(maxChunkDataSize, maxChunkDataSize, maxBlockSize);
    }
    // Determine the dimension in which chunkDataSize should be increased.  This is the smallest
    // dimension (in nanometers) that is < maxChunkDataSize (in voxels).
    //
    // Returns -1 if there is no such dimension.
    function findNextDimension() {
        let minSize = Infinity;
        let minDimension = -1;
        for (let i = 0; i < 3; ++i) {
            if (chunkDataSize[i] >= maxChunkDataSize[i]) {
                continue;
            }
            let size = chunkDataSize[i] * voxelSize[i];
            if (size < minSize) {
                minSize = size;
                minDimension = i;
            }
        }
        return minDimension;
    }
    for (let i = 0; i < maxVoxelsPerChunkLog2; ++i) {
        let nextDim = findNextDimension();
        if (nextDim === -1) {
            break;
        }
        chunkDataSize[nextDim] *= 2;
    }
    return chunkDataSize;
}
/**
 * Computes a 3-d block size that has depth 1 in flatDimension and is near-isotropic (in nanometers)
 * in the other two dimensions.  The remaining options are the same as for
 * getNearIsotropicBlockSize.
 */
function getTwoDimensionalBlockSize(options) {
    let { lowerVoxelBound = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["kZeroVec"], upperVoxelBound = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["kInfinityVec"], flatDimension, voxelSize, maxVoxelsPerChunkLog2, transform } = options;
    neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["vec3"].subtract(tempVec3, upperVoxelBound, lowerVoxelBound);
    tempVec3[flatDimension] = 1;
    return getNearIsotropicBlockSize({
        voxelSize,
        upperVoxelBound: tempVec3,
        maxVoxelsPerChunkLog2,
        transform,
        numChannels: options.numChannels
    });
}
/**
 * Returns an array of [xy, xz, yz] 2-dimensional block sizes.
 */
function getTwoDimensionalBlockSizes(options) {
    let chunkDataSizes = new Array();
    for (let i = 0; i < 3; ++i) {
        chunkDataSizes[i] = getTwoDimensionalBlockSize({
            numChannels: options.numChannels,
            flatDimension: i,
            voxelSize: options.voxelSize,
            lowerVoxelBound: options.lowerVoxelBound,
            upperVoxelBound: options.upperVoxelBound,
            maxVoxelsPerChunkLog2: options.maxVoxelsPerChunkLog2,
            transform: options.transform,
        });
    }
    return chunkDataSizes;
}
var ChunkLayoutPreference;
(function (ChunkLayoutPreference) {
    /**
     * Indicates that isotropic chunks are desired.
     */
    ChunkLayoutPreference[ChunkLayoutPreference["ISOTROPIC"] = 0] = "ISOTROPIC";
    /**
     * Indicates that 2-D chunks are desired.
     */
    ChunkLayoutPreference[ChunkLayoutPreference["FLAT"] = 1] = "FLAT";
})(ChunkLayoutPreference || (ChunkLayoutPreference = {}));
function getCombinedTransform(transform, options) {
    let additionalTransform = options.transform;
    if (additionalTransform === undefined) {
        if (transform === undefined) {
            return neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["identityMat4"];
        }
        return transform;
    }
    if (transform === undefined) {
        return additionalTransform;
    }
    return neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["mat4"].multiply(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["mat4"].create(), additionalTransform, transform);
}
function getChunkDataSizes(options) {
    if (options.chunkDataSizes !== undefined) {
        return options.chunkDataSizes;
    }
    const { chunkLayoutPreference = ChunkLayoutPreference.ISOTROPIC } = options;
    switch (chunkLayoutPreference) {
        case ChunkLayoutPreference.ISOTROPIC:
            return [getNearIsotropicBlockSize(options)];
        case ChunkLayoutPreference.FLAT:
            let chunkDataSizes = getTwoDimensionalBlockSizes(options);
            chunkDataSizes.push(getNearIsotropicBlockSize(options));
            return chunkDataSizes;
    }
    throw new Error(`Invalid chunk layout preference: ${chunkLayoutPreference}.`);
}
/**
 * Generic specification for SliceView chunks specifying a layout and voxel size.
 */
class SliceViewChunkSpecification {
    constructor(options) {
        let { chunkSize, voxelSize, transform, lowerChunkBound = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_4__["kZeroVec"], upperChunkBound, } = options;
        this.voxelSize = voxelSize;
        this.chunkLayout = neuroglancer_sliceview_chunk_layout__WEBPACK_IMPORTED_MODULE_0__["ChunkLayout"].get(chunkSize, transform);
        this.lowerChunkBound = lowerChunkBound;
        this.upperChunkBound = upperChunkBound;
    }
    toObject() {
        return {
            transform: this.chunkLayout.transform,
            chunkSize: this.chunkLayout.size,
            voxelSize: this.voxelSize,
            lowerChunkBound: this.lowerChunkBound,
            upperChunkBound: this.upperChunkBound,
        };
    }
}
const SLICEVIEW_RPC_ID = 'SliceView';
const SLICEVIEW_RENDERLAYER_RPC_ID = 'sliceview/RenderLayer';
const SLICEVIEW_ADD_VISIBLE_LAYER_RPC_ID = 'SliceView.addVisibleLayer';
const SLICEVIEW_REMOVE_VISIBLE_LAYER_RPC_ID = 'SliceView.removeVisibleLayer';
const SLICEVIEW_UPDATE_PREFETCHING_RPC_ID = 'SliceView.updatePrefetching';
const SLICEVIEW_UPDATE_VIEW_RPC_ID = 'SliceView.updateView';
const SLICEVIEW_RENDERLAYER_UPDATE_TRANSFORM_RPC_ID = 'SliceView.updateTransform';
const SLICEVIEW_RENDERLAYER_UPDATE_MIP_LEVEL_CONSTRAINTS_RPC_ID = 'SliceView.updateMIPLevelConstraints';


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/sliceview/chunk_layout.ts":
/*!**************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/sliceview/chunk_layout.ts ***!
  \**************************************************************************************************************/
/*! exports provided: ChunkLayout */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChunkLayout", function() { return ChunkLayout; });
/* harmony import */ var neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/util/geom */ "../../../../../../neuroglancer/src/neuroglancer/util/geom.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class ChunkLayout {
    constructor(size, transform = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["identityMat4"]) {
        this.size = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["vec3"].clone(size);
        this.transform = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["mat4"].clone(transform);
        this.invTransform = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["mat4"].invert(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["mat4"].create(), transform);
    }
    toObject(msg) {
        msg['size'] = this.size;
        msg['transform'] = this.transform;
    }
    static get(size, transform = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["identityMat4"]) {
        let cache = ChunkLayout.cache;
        const key = JSON.stringify([Array.from(size), Array.from(transform)]);
        let obj = cache.get(key);
        if (obj === undefined) {
            obj = new ChunkLayout(size, transform);
            cache.set(key, obj);
        }
        return obj;
    }
    static fromObject(msg) {
        return ChunkLayout.get(msg['size'], msg['transform']);
    }
    /**
     * Transform local spatial coordinates to global spatial coordinates.
     */
    localSpatialToGlobal(out, localSpatial) {
        return neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["vec3"].transformMat4(out, localSpatial, this.transform);
    }
    /**
     * Transform global spatial coordinates to local spatial coordinates.
     */
    globalToLocalSpatial(out, globalSpatial) {
        return neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["vec3"].transformMat4(out, globalSpatial, this.invTransform);
    }
    globalToLocalGrid(out, globalSpatial) {
        this.globalToLocalSpatial(out, globalSpatial);
        neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["vec3"].divide(out, out, this.size);
        return out;
    }
    localSpatialVectorToGlobal(out, localVector) {
        return Object(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["transformVectorByMat4"])(out, localVector, this.transform);
    }
    globalToLocalSpatialVector(out, globalVector) {
        return Object(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["transformVectorByMat4"])(out, globalVector, this.invTransform);
    }
    assignLocalSpatialToGlobalMat4(out) {
        return neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["mat4"].copy(out, this.transform);
    }
}
ChunkLayout.cache = new Map();


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/sliceview/chunked_graph/backend.ts":
/*!***********************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/sliceview/chunked_graph/backend.ts ***!
  \***********************************************************************************************************************/
/*! exports provided: ChunkedGraphChunk, decodeSupervoxelArray, ChunkedGraphChunkSource, ChunkedGraphLayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChunkedGraphChunk", function() { return ChunkedGraphChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeSupervoxelArray", function() { return decodeSupervoxelArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChunkedGraphChunkSource", function() { return ChunkedGraphChunkSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChunkedGraphLayer", function() { return ChunkedGraphLayer; });
/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/debounce */ "../../../../../../neuroglancer/node_modules/lodash/debounce.js");
/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_debounce__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/chunk_manager/backend */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/backend.ts");
/* harmony import */ var neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/chunk_manager/base */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/base.ts");
/* harmony import */ var neuroglancer_coordinate_transform__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! neuroglancer/coordinate_transform */ "../../../../../../neuroglancer/src/neuroglancer/coordinate_transform.ts");
/* harmony import */ var neuroglancer_sliceview_backend__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! neuroglancer/sliceview/backend */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend.ts");
/* harmony import */ var neuroglancer_sliceview_chunked_graph_base__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! neuroglancer/sliceview/chunked_graph/base */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/chunked_graph/base.ts");
/* harmony import */ var neuroglancer_uint64_set__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! neuroglancer/uint64_set */ "../../../../../../neuroglancer/src/neuroglancer/uint64_set.ts");
/* harmony import */ var neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! neuroglancer/util/geom */ "../../../../../../neuroglancer/src/neuroglancer/util/geom.ts");
/* harmony import */ var neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! neuroglancer/util/signal */ "../../../../../../neuroglancer/src/neuroglancer/util/signal.ts");
/* harmony import */ var neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! neuroglancer/util/uint64 */ "../../../../../../neuroglancer/src/neuroglancer/util/uint64.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/**
 * @license
 * Copyright 2018 The Neuroglancer Authors
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};











const tempChunkDataSize = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_7__["vec3"].create();
const tempChunkPosition = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_7__["vec3"].create();
class ChunkedGraphChunk extends neuroglancer_sliceview_backend__WEBPACK_IMPORTED_MODULE_4__["SliceViewChunk"] {
    constructor() {
        super();
        this.backendOnly = true;
        this.source = null;
        this.mappings = null;
    }
    updateRootSegments(rootSegments) {
        let changed = false;
        for (const rootObjectId of rootSegments) {
            const key = rootObjectId.toString();
            if (!this.mappings.has(key)) {
                changed = true;
                this.mappings.set(key, null);
            }
        }
        return changed;
    }
    initializeChunkedGraphChunk(key, chunkGridPosition, rootSegments) {
        super.initializeVolumeChunk(key, chunkGridPosition);
        this.chunkDataSize = null;
        this.mappings = new Map();
        this.systemMemoryBytes = 0;
        this.gpuMemoryBytes = 0;
        this.updateRootSegments(rootSegments);
    }
    downloadSucceeded() {
        this.systemMemoryBytes = 0;
        for (const supervoxelIds of this.mappings.values()) {
            if (supervoxelIds !== null) {
                // Each supervoxel ID is a Uint64, consisting of two `number`s (8 Byte)
                this.systemMemoryBytes += 16 * supervoxelIds.length;
            }
        }
        this.queueManager.updateChunkState(this, neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_2__["ChunkState"].SYSTEM_MEMORY_WORKER);
        if (this.priorityTier < neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_2__["ChunkPriorityTier"].RECENT) {
            this.source.chunkManager.scheduleUpdateChunkPriorities();
        }
        super.downloadSucceeded();
    }
    freeSystemMemory() {
        this.mappings = new Map();
    }
}
async function decodeSupervoxelArray(chunk, rootObjectKeys, data) {
    const rootToLeavesMap = await data.json();
    rootObjectKeys.forEach(rootObjectKey => {
        const leaves = rootToLeavesMap[rootObjectKey];
        const final = new Array(leaves.length);
        for (let i = 0; i < final.length; ++i) {
            final[i] = neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_9__["Uint64"].parseString(leaves[i]);
        }
        chunk.mappings.set(rootObjectKey, final);
    });
}
class ChunkedGraphChunkSource extends neuroglancer_sliceview_backend__WEBPACK_IMPORTED_MODULE_4__["SliceViewChunkSource"] {
    constructor(rpc, options) {
        super(rpc, options);
        this.spec = neuroglancer_sliceview_chunked_graph_base__WEBPACK_IMPORTED_MODULE_5__["ChunkedGraphChunkSpecification"].fromObject(options['spec']);
        this.rootSegments = rpc.get(options['rootSegments']);
    }
    getChunk(chunkGridPosition) {
        let key = Object(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_7__["vec3Key"])(chunkGridPosition);
        let chunk = this.chunks.get(key);
        if (chunk === undefined) {
            chunk = this.getNewChunk_(ChunkedGraphChunk);
            chunk.initializeChunkedGraphChunk(key, chunkGridPosition, this.rootSegments);
            this.addChunk(chunk);
        }
        else {
            if (chunk.updateRootSegments(this.rootSegments)) {
                if (chunk.downloadCancellationToken !== undefined) {
                    Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_1__["cancelChunkDownload"])(chunk);
                }
                this.chunkManager.queueManager.updateChunkState(chunk, neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_2__["ChunkState"].DOWNLOADING);
                Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_1__["startChunkDownload"])(chunk);
            }
        }
        return chunk;
    }
    /**
     * Helper function for computing the voxel bounds of a chunk based on its chunkGridPosition.
     *
     * This assumes that the grid of chunk positions starts at this.baseVoxelOffset.  Chunks are
     * clipped to lie within upperVoxelBound, but are not clipped to lie within lowerVoxelBound.  (The
     * frontend code currently cannot handle chunks clipped at their lower corner, and the chunk
     * layout can generally be chosen so that lowerVoxelBound lies on a chunk boundary.)
     *
     * This sets chunk.chunkDataSize to a copy of the returned chunkDataSize if it differs from
     * this.spec.chunkDataSize; otherwise, it is set to this.spec.chunkDataSize.
     *
     * @returns A globally-allocated Vec3 containing the chunk corner position in voxel coordinates.
     * The returned Vec3 will be invalidated by any subsequent call to this method, even on a
     * different VolumeChunkSource instance.
     */
    computeChunkBounds(chunk) {
        let { spec } = this;
        let { upperVoxelBound } = spec;
        let origChunkDataSize = spec.chunkDataSize;
        let newChunkDataSize = tempChunkDataSize;
        // Chunk start position in voxel coordinates.
        let chunkPosition = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_7__["vec3"].multiply(tempChunkPosition, chunk.chunkGridPosition, origChunkDataSize);
        // Specifies whether the chunk only partially fits within the data bounds.
        let partial = false;
        for (let i = 0; i < 3; ++i) {
            let upper = Math.min(upperVoxelBound[i], chunkPosition[i] + origChunkDataSize[i]);
            let size = newChunkDataSize[i] = upper - chunkPosition[i];
            if (size !== origChunkDataSize[i]) {
                partial = true;
            }
        }
        neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_7__["vec3"].add(chunkPosition, chunkPosition, this.spec.baseVoxelOffset);
        if (partial) {
            chunk.chunkDataSize = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_7__["vec3"].clone(newChunkDataSize);
        }
        else {
            chunk.chunkDataSize = origChunkDataSize;
        }
        return chunkPosition;
    }
}
ChunkedGraphChunkSource.prototype.chunkConstructor = ChunkedGraphChunk;
const Base = Object(neuroglancer_chunk_manager_backend__WEBPACK_IMPORTED_MODULE_1__["withChunkManager"])(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__["SharedObjectCounterpart"]);
let ChunkedGraphLayer = class ChunkedGraphLayer extends Base {
    constructor(rpc, options) {
        super(rpc, options);
        this.layerChanged = new neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_8__["NullarySignal"]();
        this.transform = new neuroglancer_coordinate_transform__WEBPACK_IMPORTED_MODULE_3__["CoordinateTransform"]();
        this.transformedSourcesGeneration = -1;
        this.debouncedupdateDisplayState = lodash_debounce__WEBPACK_IMPORTED_MODULE_0___default()(() => {
            this.updateDisplayState();
        }, 100);
        this.graphurl = options['url'];
        this.rootSegments = rpc.get(options['rootSegments']);
        this.visibleSegments3D = rpc.get(options['visibleSegments3D']);
        this.segmentEquivalences = rpc.get(options['segmentEquivalences']);
        this.renderScaleTarget = rpc.get(options['renderScaleTarget']);
        this.sources = new Array();
        for (const alternativeIds of options['sources']) {
            const alternatives = new Array();
            this.sources.push(alternatives);
            for (const sourceId of alternativeIds) {
                const source = rpc.get(sourceId);
                this.registerDisposer(source.addRef());
                alternatives.push(source);
            }
        }
        neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_7__["mat4"].copy(this.transform.transform, options['transform']);
        this.transform.changed.add(this.layerChanged.dispatch);
        this.registerDisposer(this.rootSegments.changed.add(() => {
            this.chunkManager.scheduleUpdateChunkPriorities();
        }));
        this.registerDisposer(this.chunkManager.recomputeChunkPriorities.add(() => {
            this.debouncedupdateDisplayState();
        }));
    }
    get url() {
        return this.graphurl;
    }
    // Used for the sliceview to set a limit on when to
    // make get_leaves to the ChunkedGraph
    get renderRatioLimit() {
        return neuroglancer_sliceview_chunked_graph_base__WEBPACK_IMPORTED_MODULE_5__["RENDER_RATIO_LIMIT"];
    }
    forEachSelectedRootWithLeaves(callback) {
        for (const alternative of this.sources) {
            for (const source of alternative) {
                for (const chunk of source.chunks.values()) {
                    if (chunk.state === neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_2__["ChunkState"].SYSTEM_MEMORY_WORKER &&
                        chunk.priorityTier < neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_2__["ChunkPriorityTier"].RECENT) {
                        for (const [rootObjectKey, leaves] of chunk.mappings) {
                            if (this.rootSegments.has(neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_9__["Uint64"].parseString(rootObjectKey)) && leaves !== null) {
                                callback(rootObjectKey, leaves);
                            }
                        }
                    }
                }
            }
        }
    }
    updateDisplayState() {
        const visibleLeaves = new Map();
        const capacities = new Map();
        // Reserve
        this.forEachSelectedRootWithLeaves((rootObjectKey, leaves) => {
            if (!capacities.has(rootObjectKey)) {
                capacities.set(rootObjectKey, leaves.length);
            }
            else {
                capacities.set(rootObjectKey, capacities.get(rootObjectKey) + leaves.length);
            }
        });
        // Collect unique leaves
        this.forEachSelectedRootWithLeaves((rootObjectKey, leaves) => {
            if (!visibleLeaves.has(rootObjectKey)) {
                visibleLeaves.set(rootObjectKey, new neuroglancer_uint64_set__WEBPACK_IMPORTED_MODULE_6__["Uint64Set"]());
                visibleLeaves.get(rootObjectKey).reserve(capacities.get(rootObjectKey));
                visibleLeaves.get(rootObjectKey).add(neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_9__["Uint64"].parseString(rootObjectKey));
            }
            visibleLeaves.get(rootObjectKey).add(leaves);
        });
        for (const [root, leaves] of visibleLeaves) {
            // TODO: Delete segments not visible anymore from segmentEquivalences - requires a faster data
            // structure, though.
            /*if (this.segmentEquivalences.has(Uint64.parseString(root))) {
              this.segmentEquivalences.delete([...this.segmentEquivalences.setElements(Uint64.parseString(root))].filter(x
            => !leaves.has(x) && !this.visibleSegments3D.has(x)));
            }*/
            this.segmentEquivalences.link(neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_9__["Uint64"].parseString(root), [...leaves].filter(x => !this.segmentEquivalences.has(x)));
        }
    }
};
ChunkedGraphLayer = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__["registerSharedObject"])(neuroglancer_sliceview_chunked_graph_base__WEBPACK_IMPORTED_MODULE_5__["CHUNKED_GRAPH_LAYER_RPC_ID"])
], ChunkedGraphLayer);

Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_10__["registerRPC"])(neuroglancer_sliceview_chunked_graph_base__WEBPACK_IMPORTED_MODULE_5__["CHUNKED_GRAPH_SOURCE_UPDATE_ROOT_SEGMENTS_RPC_ID"], function (x) {
    const chunkedGraphChunkSource = this.get(x.id);
    chunkedGraphChunkSource.rootSegments = this.get(x.rootSegments);
});


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/sliceview/chunked_graph/base.ts":
/*!********************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/sliceview/chunked_graph/base.ts ***!
  \********************************************************************************************************************/
/*! exports provided: CHUNKED_GRAPH_LAYER_RPC_ID, CHUNKED_GRAPH_SOURCE_UPDATE_ROOT_SEGMENTS_RPC_ID, RENDER_RATIO_LIMIT, ChunkedGraphChunkSpecification */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CHUNKED_GRAPH_LAYER_RPC_ID", function() { return CHUNKED_GRAPH_LAYER_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CHUNKED_GRAPH_SOURCE_UPDATE_ROOT_SEGMENTS_RPC_ID", function() { return CHUNKED_GRAPH_SOURCE_UPDATE_ROOT_SEGMENTS_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RENDER_RATIO_LIMIT", function() { return RENDER_RATIO_LIMIT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChunkedGraphChunkSpecification", function() { return ChunkedGraphChunkSpecification; });
/* harmony import */ var neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/sliceview/base */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/base.ts");
/* harmony import */ var neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/geom */ "../../../../../../neuroglancer/src/neuroglancer/util/geom.ts");
/**
 * @license
 * Copyright 2018 The Neuroglancer Authors
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



const CHUNKED_GRAPH_LAYER_RPC_ID = 'ChunkedGraphLayer';
const CHUNKED_GRAPH_SOURCE_UPDATE_ROOT_SEGMENTS_RPC_ID = 'ChunkedGraphSourceUpdateRootSegments';
const RENDER_RATIO_LIMIT = 5.0;
/**
 * Specifies a chunk layout and voxel size.
 */
class ChunkedGraphChunkSpecification extends neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_0__["SliceViewChunkSpecification"] {
    constructor(options) {
        let { lowerVoxelBound = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_1__["kZeroVec"], upperVoxelBound, chunkDataSize, voxelSize, transform, baseVoxelOffset = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_1__["kZeroVec"], numChannels } = options;
        let { lowerClipBound = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_1__["vec3"].multiply(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_1__["vec3"].create(), voxelSize, lowerVoxelBound), upperClipBound = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_1__["vec3"].multiply(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_1__["vec3"].create(), voxelSize, upperVoxelBound) } = options;
        const chunkSize = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_1__["vec3"].multiply(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_1__["vec3"].create(), chunkDataSize, voxelSize);
        let lowerChunkBound = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_1__["vec3"].create();
        let upperChunkBound = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_1__["vec3"].create();
        for (let i = 0; i < 3; ++i) {
            lowerChunkBound[i] = Math.floor(lowerVoxelBound[i] / chunkDataSize[i]);
            upperChunkBound[i] = Math.floor((upperVoxelBound[i] - 1) / chunkDataSize[i] + 1);
        }
        super({ voxelSize, transform, lowerChunkBound, upperChunkBound, chunkSize });
        this.baseVoxelOffset = baseVoxelOffset;
        this.lowerClipBound = lowerClipBound;
        this.upperClipBound = upperClipBound;
        this.lowerVoxelBound = lowerVoxelBound;
        this.upperVoxelBound = upperVoxelBound;
        this.chunkDataSize = chunkDataSize;
        this.numChannels = numChannels;
    }
    static make(options) {
        return new ChunkedGraphChunkSpecification(Object.assign({}, options, { transform: Object(neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_0__["getCombinedTransform"])(options.transform, options.chunkedGraphSourceOptions) }));
    }
    static fromObject(msg) {
        return new ChunkedGraphChunkSpecification(msg);
    }
    toObject() {
        return Object.assign({}, super.toObject(), { numChannels: this.numChannels, chunkDataSize: this.chunkDataSize, lowerVoxelBound: this.lowerVoxelBound, upperVoxelBound: this.upperVoxelBound, lowerClipBound: this.lowerClipBound, upperClipBound: this.upperClipBound, baseVoxelOffset: this.baseVoxelOffset });
    }
    static getDefaults(options) {
        const adjustedOptions = Object.assign({}, options, { transform: Object(neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_0__["getCombinedTransform"])(options.transform, options.chunkedGraphSourceOptions) });
        let { chunkDataSizes = Object(neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_0__["getChunkDataSizes"])(adjustedOptions) } = options;
        return new ChunkedGraphChunkSpecification(Object.assign({}, options, { chunkDataSize: chunkDataSizes[0] }));
    }
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/sliceview/compressed_segmentation/decode_common.ts":
/*!***************************************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/sliceview/compressed_segmentation/decode_common.ts ***!
  \***************************************************************************************************************************************/
/*! exports provided: decodeValueOffset */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeValueOffset", function() { return decodeValueOffset; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @file
 * Support for decompressing uint32 and uint64 segment label chunks.
 */
/**
 * Determines the offset of the value at the specified dataPosition in a single-channel compressed
 * segmentation.
 *
 * @param baseOffset The base offset into `data' at which the compressed data for this channel
 * starts.
 * @param chunkDataSize A 3-element array specifying the size of the volume,
 * @param blockSize A 3-element array specifying the block size ued for compression.
 * @param dataPosition A 3-element array specifying the position within the volume from which to
 * read.
 * @returns The offset into `data', relative to baseOffset, at which the value is located.
 */
function decodeValueOffset(data, baseOffset, chunkDataSize, blockSize, dataPosition, uint32sPerElement) {
    let gridOffset = 0, subchunkOffset = 0, gridStride = 1, subchunkStride = 1;
    for (let i = 0; i < 3; ++i) {
        let posValue = dataPosition[i];
        let subchunkSizeValue = blockSize[i];
        let gridSubscript = Math.floor(posValue / subchunkSizeValue);
        let subchunkSubscript = posValue % subchunkSizeValue;
        gridOffset += gridSubscript * gridStride;
        gridStride *= Math.ceil(chunkDataSize[i] / subchunkSizeValue);
        subchunkOffset += subchunkSubscript * subchunkStride;
        subchunkStride *= subchunkSizeValue;
    }
    let subchunkHeaderOffset = baseOffset + gridOffset * 2;
    let subchunkHeader0 = data[subchunkHeaderOffset];
    let subchunkHeader1 = data[subchunkHeaderOffset + 1];
    let outputValueOffset = subchunkHeader0 & 0xFFFFFF;
    let encodingBits = (subchunkHeader0 >> 24) & 0xFF;
    if (encodingBits > 0) {
        let encodedValueBaseOffset = baseOffset + subchunkHeader1 & 0xFFFFFF;
        let encodedValueOffset = encodedValueBaseOffset + Math.floor(subchunkOffset * encodingBits / 32.0);
        let encodedValue = data[encodedValueOffset];
        let wordOffset = (subchunkOffset * encodingBits) % 32;
        let decodedValue = (encodedValue >> wordOffset) & ((1 << encodingBits) - 1);
        outputValueOffset += uint32sPerElement * decodedValue;
    }
    return outputValueOffset;
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/sliceview/compressed_segmentation/decode_uint32.ts":
/*!***************************************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/sliceview/compressed_segmentation/decode_uint32.ts ***!
  \***************************************************************************************************************************************/
/*! exports provided: readSingleChannelValue, readValue, decodeChannel, decodeChannels */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readSingleChannelValue", function() { return readSingleChannelValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readValue", function() { return readValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeChannel", function() { return decodeChannel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeChannels", function() { return decodeChannels; });
/* harmony import */ var neuroglancer_sliceview_compressed_segmentation_decode_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/sliceview/compressed_segmentation/decode_common */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/compressed_segmentation/decode_common.ts");
// DO NOT EDIT.  Generated from
// templates/neuroglancer/sliceview/compressed_segmentation/decode.template.ts.
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @file
 * Support for decompressing uint64 segment label chunks.
 */

/**
 * Reads the single value at the specified dataPosition in a single-channel compressed segmentation.
 *
 * @param baseOffset The base offset into `data' at which the compressed data for this channel
 * starts.
 * @param chunkDataSize A 3-element array specifying the size of the volume.
 * @param blockSize A 3-element array specifying the block size ued for compression.
 * @param dataPosition A 3-element array specifying the position within the volume from which to
 * read.
 *
 * Stores the result in `out'.
 */
function readSingleChannelValue(data, baseOffset, chunkDataSize, blockSize, dataPosition) {
    let outputValueOffset = Object(neuroglancer_sliceview_compressed_segmentation_decode_common__WEBPACK_IMPORTED_MODULE_0__["decodeValueOffset"])(data, baseOffset, chunkDataSize, blockSize, dataPosition, 1) + baseOffset;
    return data[outputValueOffset];
}
/**
 * Reads the single value (of a single channel) at the specified dataPosition in a multi-channel
 * compressed segmentation.
 *
 * @param dataPosition A 4-element [x, y, z, channel] array specifying the position to read.
 */
function readValue(data, baseOffset, chunkDataSize, blockSize, dataPosition) {
    return readSingleChannelValue(data, baseOffset + data[dataPosition[3]], chunkDataSize, blockSize, dataPosition);
}
/**
 * Decodes a single channel of a compressed segmentation.
 *
 * This is not particularly efficient, because it is intended for testing purposes only.
 */
function decodeChannel(out, data, baseOffset, chunkDataSize, blockSize) {
    const expectedLength = chunkDataSize[0] * chunkDataSize[1] * chunkDataSize[2] * 1;
    if (expectedLength !== out.length) {
        throw new Error(`Output length ${out.length} is not equal to expected length ${expectedLength}.`);
    }
    let vx = chunkDataSize[0];
    let vy = chunkDataSize[1];
    let vz = chunkDataSize[2];
    let dataPosition = [0, 0, 0];
    let outputOffset = 0;
    for (let z = 0; z < vz; ++z) {
        dataPosition[2] = z;
        for (let y = 0; y < vy; ++y) {
            dataPosition[1] = y;
            for (let x = 0; x < vx; ++x) {
                dataPosition[0] = x;
                let outputValueOffset = Object(neuroglancer_sliceview_compressed_segmentation_decode_common__WEBPACK_IMPORTED_MODULE_0__["decodeValueOffset"])(data, baseOffset, chunkDataSize, blockSize, dataPosition, 1) +
                    baseOffset;
                out[outputOffset++] = data[outputValueOffset];
            }
        }
    }
    return out;
}
/**
 * Decodes a multi-channel compressed segmentation.
 *
 * This is not particularly efficient, because it is intended for testing purposes only.
 */
function decodeChannels(out, data, baseOffset, chunkDataSize, blockSize) {
    const channelOutputLength = chunkDataSize[0] * chunkDataSize[1] * chunkDataSize[2] * 1;
    const expectedLength = channelOutputLength * chunkDataSize[3];
    if (expectedLength !== out.length) {
        throw new Error(`Output length ${out.length} is not equal to expected length ${expectedLength}.`);
    }
    const numChannels = chunkDataSize[3];
    for (let channel = 0; channel < numChannels; ++channel) {
        decodeChannel(out.subarray(channelOutputLength * channel, channelOutputLength * (channel + 1)), data, baseOffset + data[channel], chunkDataSize, blockSize);
    }
    return out;
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/sliceview/compressed_segmentation/decode_uint64.ts":
/*!***************************************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/sliceview/compressed_segmentation/decode_uint64.ts ***!
  \***************************************************************************************************************************************/
/*! exports provided: readSingleChannelValue, readValue, decodeChannel, decodeChannels */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readSingleChannelValue", function() { return readSingleChannelValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readValue", function() { return readValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeChannel", function() { return decodeChannel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeChannels", function() { return decodeChannels; });
/* harmony import */ var neuroglancer_sliceview_compressed_segmentation_decode_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/sliceview/compressed_segmentation/decode_common */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/compressed_segmentation/decode_common.ts");
// DO NOT EDIT.  Generated from
// templates/neuroglancer/sliceview/compressed_segmentation/decode.template.ts.
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @file
 * Support for decompressing uint64 segment label chunks.
 */

/**
 * Reads the single value at the specified dataPosition in a single-channel compressed segmentation.
 *
 * @param baseOffset The base offset into `data' at which the compressed data for this channel
 * starts.
 * @param chunkDataSize A 3-element array specifying the size of the volume.
 * @param blockSize A 3-element array specifying the block size ued for compression.
 * @param dataPosition A 3-element array specifying the position within the volume from which to
 * read.
 *
 * Stores the result in `out'.
 */
function readSingleChannelValue(out, data, baseOffset, chunkDataSize, blockSize, dataPosition) {
    let outputValueOffset = Object(neuroglancer_sliceview_compressed_segmentation_decode_common__WEBPACK_IMPORTED_MODULE_0__["decodeValueOffset"])(data, baseOffset, chunkDataSize, blockSize, dataPosition, 2) + baseOffset;
    out.low = data[outputValueOffset];
    out.high = data[outputValueOffset + 1];
    return out;
}
/**
 * Reads the single value (of a single channel) at the specified dataPosition in a multi-channel
 * compressed segmentation.
 *
 * @param dataPosition A 4-element [x, y, z, channel] array specifying the position to read.
 */
function readValue(out, data, baseOffset, chunkDataSize, blockSize, dataPosition) {
    return readSingleChannelValue(out, data, baseOffset + data[dataPosition[3]], chunkDataSize, blockSize, dataPosition);
}
/**
 * Decodes a single channel of a compressed segmentation.
 *
 * This is not particularly efficient, because it is intended for testing purposes only.
 */
function decodeChannel(out, data, baseOffset, chunkDataSize, blockSize) {
    const expectedLength = chunkDataSize[0] * chunkDataSize[1] * chunkDataSize[2] * 2;
    if (expectedLength !== out.length) {
        throw new Error(`Output length ${out.length} is not equal to expected length ${expectedLength}.`);
    }
    let vx = chunkDataSize[0];
    let vy = chunkDataSize[1];
    let vz = chunkDataSize[2];
    let dataPosition = [0, 0, 0];
    let outputOffset = 0;
    for (let z = 0; z < vz; ++z) {
        dataPosition[2] = z;
        for (let y = 0; y < vy; ++y) {
            dataPosition[1] = y;
            for (let x = 0; x < vx; ++x) {
                dataPosition[0] = x;
                let outputValueOffset = Object(neuroglancer_sliceview_compressed_segmentation_decode_common__WEBPACK_IMPORTED_MODULE_0__["decodeValueOffset"])(data, baseOffset, chunkDataSize, blockSize, dataPosition, 2) +
                    baseOffset;
                out[outputOffset++] = data[outputValueOffset];
                out[outputOffset++] = data[outputValueOffset + 1];
            }
        }
    }
    return out;
}
/**
 * Decodes a multi-channel compressed segmentation.
 *
 * This is not particularly efficient, because it is intended for testing purposes only.
 */
function decodeChannels(out, data, baseOffset, chunkDataSize, blockSize) {
    const channelOutputLength = chunkDataSize[0] * chunkDataSize[1] * chunkDataSize[2] * 2;
    const expectedLength = channelOutputLength * chunkDataSize[3];
    if (expectedLength !== out.length) {
        throw new Error(`Output length ${out.length} is not equal to expected length ${expectedLength}.`);
    }
    const numChannels = chunkDataSize[3];
    for (let channel = 0; channel < numChannels; ++channel) {
        decodeChannel(out.subarray(channelOutputLength * channel, channelOutputLength * (channel + 1)), data, baseOffset + data[channel], chunkDataSize, blockSize);
    }
    return out;
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/sliceview/vector_graphics/backend.ts":
/*!*************************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/sliceview/vector_graphics/backend.ts ***!
  \*************************************************************************************************************************/
/*! exports provided: VectorGraphicsChunk, VectorGraphicsChunkSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VectorGraphicsChunk", function() { return VectorGraphicsChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VectorGraphicsChunkSource", function() { return VectorGraphicsChunkSource; });
/* harmony import */ var neuroglancer_sliceview_backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/sliceview/backend */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend.ts");
/* harmony import */ var neuroglancer_sliceview_vector_graphics_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/sliceview/vector_graphics/base */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/vector_graphics/base.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class VectorGraphicsChunk extends neuroglancer_sliceview_backend__WEBPACK_IMPORTED_MODULE_0__["SliceViewChunk"] {
    constructor() {
        super();
        this.source = null;
        this.vertexPositions = null;
        this.vertexNormals = null;
    }
    initializeVolumeChunk(key, chunkGridPosition) {
        super.initializeVolumeChunk(key, chunkGridPosition);
        let chunkBytes = 0;
        if (this.vertexPositions) {
            chunkBytes = chunkBytes + this.vertexPositions.buffer.byteLength;
        }
        if (this.vertexNormals) {
            chunkBytes = chunkBytes + this.vertexNormals.buffer.byteLength;
        }
        this.systemMemoryBytes = chunkBytes;
        this.gpuMemoryBytes = chunkBytes;
        this.vertexPositions = null;
    }
    serialize(msg, transfers) {
        super.serialize(msg, transfers);
        let { vertexPositions, vertexNormals } = this;
        msg['vertexPositions'] = vertexPositions;
        let vertexPositionsBuffer = vertexPositions.buffer;
        transfers.push(vertexPositionsBuffer);
        if (vertexNormals) {
            msg['vertexNormals'] = vertexNormals;
            let vertexNormalsBuffer = vertexNormals.buffer;
            transfers.push(vertexNormalsBuffer);
        }
        this.vertexPositions = null;
        this.vertexNormals = null;
    }
    downloadSucceeded() {
        this.systemMemoryBytes = this.gpuMemoryBytes = this.vertexPositions.byteLength;
        super.downloadSucceeded();
    }
    freeSystemMemory() {
        this.vertexPositions = null;
        this.vertexNormals = null;
    }
}
class VectorGraphicsChunkSource extends neuroglancer_sliceview_backend__WEBPACK_IMPORTED_MODULE_0__["SliceViewChunkSource"] {
    constructor(rpc, options) {
        super(rpc, options);
        this.spec = neuroglancer_sliceview_vector_graphics_base__WEBPACK_IMPORTED_MODULE_1__["VectorGraphicsChunkSpecification"].fromObject(options['spec']);
    }
}
VectorGraphicsChunkSource.prototype.chunkConstructor = VectorGraphicsChunk;


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/sliceview/vector_graphics/base.ts":
/*!**********************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/sliceview/vector_graphics/base.ts ***!
  \**********************************************************************************************************************/
/*! exports provided: VectorGraphicsType, VectorGraphicsChunkSpecification, VECTOR_GRAPHICS_RPC_ID, VECTOR_GRAPHICS_RENDERLAYER_RPC_ID */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VectorGraphicsType", function() { return VectorGraphicsType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VectorGraphicsChunkSpecification", function() { return VectorGraphicsChunkSpecification; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VECTOR_GRAPHICS_RPC_ID", function() { return VECTOR_GRAPHICS_RPC_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VECTOR_GRAPHICS_RENDERLAYER_RPC_ID", function() { return VECTOR_GRAPHICS_RENDERLAYER_RPC_ID; });
/* harmony import */ var neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/sliceview/base */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/base.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var VectorGraphicsType;
(function (VectorGraphicsType) {
    VectorGraphicsType[VectorGraphicsType["LINE"] = 0] = "LINE";
    VectorGraphicsType[VectorGraphicsType["POINT"] = 1] = "POINT";
})(VectorGraphicsType || (VectorGraphicsType = {}));
/**
 * Specifies a chunk layout and voxel size.
 */
class VectorGraphicsChunkSpecification extends neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_0__["SliceViewChunkSpecification"] {
    constructor(options) {
        super(options);
    }
    static make(options) {
        return new VectorGraphicsChunkSpecification(Object.assign({}, options, { transform: Object(neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_0__["getCombinedTransform"])(options.transform, options.vectorGraphicsSourceOptions) }));
    }
    static fromObject(msg) {
        return new VectorGraphicsChunkSpecification(msg);
    }
    toObject() {
        return super.toObject();
    }
}
const VECTOR_GRAPHICS_RPC_ID = 'vectorgraphics';
const VECTOR_GRAPHICS_RENDERLAYER_RPC_ID = 'vectorgraphics/RenderLayer';


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/sliceview/volume/backend.ts":
/*!****************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/sliceview/volume/backend.ts ***!
  \****************************************************************************************************************/
/*! exports provided: VolumeChunk, VolumeChunkSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VolumeChunk", function() { return VolumeChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VolumeChunkSource", function() { return VolumeChunkSource; });
/* harmony import */ var neuroglancer_sliceview_backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/sliceview/backend */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/backend.ts");
/* harmony import */ var neuroglancer_sliceview_volume_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/sliceview/volume/base */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/volume/base.ts");
/* harmony import */ var neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/util/geom */ "../../../../../../neuroglancer/src/neuroglancer/util/geom.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



const tempChunkDataSize = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__["vec3"].create();
const tempChunkPosition = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__["vec3"].create();
class VolumeChunk extends neuroglancer_sliceview_backend__WEBPACK_IMPORTED_MODULE_0__["SliceViewChunk"] {
    constructor() {
        super();
        this.source = null;
    }
    initializeVolumeChunk(key, chunkGridPosition) {
        super.initializeVolumeChunk(key, chunkGridPosition);
        this.chunkDataSize = null;
        let source = this.source;
        /**
         * Grid position within chunk layout (coordinates are in units of chunks).
         */
        this.systemMemoryBytes = source.spec.chunkBytes;
        this.gpuMemoryBytes = source.spec.chunkBytes;
        this.data = null;
    }
    serialize(msg, transfers) {
        super.serialize(msg, transfers);
        let chunkDataSize = this.chunkDataSize;
        if (chunkDataSize !== this.source.spec.chunkDataSize) {
            msg['chunkDataSize'] = chunkDataSize;
        }
        let data = msg['data'] = this.data;
        transfers.push(data.buffer);
        this.data = null;
    }
    downloadSucceeded() {
        this.systemMemoryBytes = this.gpuMemoryBytes = this.data.byteLength;
        super.downloadSucceeded();
    }
    freeSystemMemory() {
        this.data = null;
    }
}
class VolumeChunkSource extends neuroglancer_sliceview_backend__WEBPACK_IMPORTED_MODULE_0__["SliceViewChunkSource"] {
    constructor(rpc, options) {
        super(rpc, options);
        this.spec = neuroglancer_sliceview_volume_base__WEBPACK_IMPORTED_MODULE_1__["VolumeChunkSpecification"].fromObject(options['spec']);
    }
    /**
     * Helper function for computing the voxel bounds of a chunk based on its chunkGridPosition.
     *
     * This assumes that the grid of chunk positions starts at this.baseVoxelOffset.  Chunks are
     * clipped to lie within upperVoxelBound, but are not clipped to lie within lowerVoxelBound.  (The
     * frontend code currently cannot handle chunks clipped at their lower corner, and the chunk
     * layout can generally be chosen so that lowerVoxelBound lies on a chunk boundary.)
     *
     * This sets chunk.chunkDataSize to a copy of the returned chunkDataSize if it differs from
     * this.spec.chunkDataSize; otherwise, it is set to this.spec.chunkDataSize.
     *
     * @returns A globally-allocated Vec3 containing the chunk corner position in voxel coordinates.
     * The returned Vec3 will be invalidated by any subsequent call to this method, even on a
     * different VolumeChunkSource instance.
     */
    computeChunkBounds(chunk) {
        let { spec } = this;
        let { upperVoxelBound } = spec;
        let origChunkDataSize = spec.chunkDataSize;
        let newChunkDataSize = tempChunkDataSize;
        // Chunk start position in voxel coordinates.
        let chunkPosition = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__["vec3"].multiply(tempChunkPosition, chunk.chunkGridPosition, origChunkDataSize);
        // Specifies whether the chunk only partially fits within the data bounds.
        let partial = false;
        for (let i = 0; i < 3; ++i) {
            let upper = Math.min(upperVoxelBound[i], chunkPosition[i] + origChunkDataSize[i]);
            let size = newChunkDataSize[i] = upper - chunkPosition[i];
            if (size !== origChunkDataSize[i]) {
                partial = true;
            }
        }
        neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__["vec3"].add(chunkPosition, chunkPosition, this.spec.baseVoxelOffset);
        if (partial) {
            chunk.chunkDataSize = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__["vec3"].clone(newChunkDataSize);
        }
        else {
            chunk.chunkDataSize = origChunkDataSize;
        }
        return chunkPosition;
    }
}
VolumeChunkSource.prototype.chunkConstructor = VolumeChunk;


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/sliceview/volume/base.ts":
/*!*************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/sliceview/volume/base.ts ***!
  \*************************************************************************************************************/
/*! exports provided: DATA_TYPE_BYTES, DataType, VolumeType, DEFAULT_MAX_VOXELS_PER_CHUNK_LOG2, VolumeChunkSpecification, VOLUME_RPC_ID */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VolumeType", function() { return VolumeType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_MAX_VOXELS_PER_CHUNK_LOG2", function() { return DEFAULT_MAX_VOXELS_PER_CHUNK_LOG2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VolumeChunkSpecification", function() { return VolumeChunkSpecification; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VOLUME_RPC_ID", function() { return VOLUME_RPC_ID; });
/* harmony import */ var neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/sliceview/base */ "../../../../../../neuroglancer/src/neuroglancer/sliceview/base.ts");
/* harmony import */ var neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/data_type */ "../../../../../../neuroglancer/src/neuroglancer/util/data_type.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DATA_TYPE_BYTES", function() { return neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_1__["DATA_TYPE_BYTES"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DataType", function() { return neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_1__["DataType"]; });

/* harmony import */ var neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/util/geom */ "../../../../../../neuroglancer/src/neuroglancer/util/geom.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Specifies the interpretation of volumetric data.
 */
var VolumeType;
(function (VolumeType) {
    VolumeType[VolumeType["UNKNOWN"] = 0] = "UNKNOWN";
    VolumeType[VolumeType["IMAGE"] = 1] = "IMAGE";
    VolumeType[VolumeType["SEGMENTATION"] = 2] = "SEGMENTATION";
    VolumeType[VolumeType["SEGMENTATION_WITH_GRAPH"] = 3] = "SEGMENTATION_WITH_GRAPH";
    VolumeType[VolumeType["CHUNKEDGRAPHLEAVES"] = 4] = "CHUNKEDGRAPHLEAVES";
})(VolumeType || (VolumeType = {}));
/**
 * By default, choose a chunk size with at most 2^18 = 262144 voxels.
 */
const DEFAULT_MAX_VOXELS_PER_CHUNK_LOG2 = 18;
/**
 * Specifies a chunk layout and voxel size.
 */
class VolumeChunkSpecification extends neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_0__["SliceViewChunkSpecification"] {
    constructor(options) {
        let { lowerVoxelBound = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__["kZeroVec"], upperVoxelBound, chunkDataSize, voxelSize, transform, baseVoxelOffset = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__["kZeroVec"] } = options;
        let { lowerClipBound = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__["vec3"].multiply(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__["vec3"].create(), voxelSize, lowerVoxelBound), upperClipBound = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__["vec3"].multiply(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__["vec3"].create(), voxelSize, upperVoxelBound) } = options;
        const chunkSize = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__["vec3"].multiply(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__["vec3"].create(), chunkDataSize, voxelSize);
        let lowerChunkBound = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__["vec3"].create();
        let upperChunkBound = neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__["vec3"].create();
        for (let i = 0; i < 3; ++i) {
            lowerChunkBound[i] = Math.floor(lowerVoxelBound[i] / chunkDataSize[i]);
            upperChunkBound[i] = Math.floor((upperVoxelBound[i] - 1) / chunkDataSize[i] + 1);
        }
        super({ voxelSize, transform, lowerChunkBound, upperChunkBound, chunkSize });
        this.baseVoxelOffset = baseVoxelOffset;
        this.lowerClipBound = lowerClipBound;
        this.upperClipBound = upperClipBound;
        this.lowerVoxelBound = lowerVoxelBound;
        this.upperVoxelBound = upperVoxelBound;
        this.chunkDataSize = chunkDataSize;
        let dataType = this.dataType = options.dataType;
        let numChannels = this.numChannels = options.numChannels;
        this.chunkBytes = Object(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__["prod3"])(chunkDataSize) * neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_1__["DATA_TYPE_BYTES"][dataType] * numChannels;
        this.compressedSegmentationBlockSize = options.compressedSegmentationBlockSize;
    }
    static make(options) {
        return new VolumeChunkSpecification(Object.assign({}, options, { transform: Object(neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_0__["getCombinedTransform"])(options.transform, options.volumeSourceOptions) }));
    }
    static fromObject(msg) {
        return new VolumeChunkSpecification(msg);
    }
    toObject() {
        return Object.assign({}, super.toObject(), { numChannels: this.numChannels, chunkDataSize: this.chunkDataSize, dataType: this.dataType, lowerVoxelBound: this.lowerVoxelBound, upperVoxelBound: this.upperVoxelBound, lowerClipBound: this.lowerClipBound, upperClipBound: this.upperClipBound, baseVoxelOffset: this.baseVoxelOffset, compressedSegmentationBlockSize: this.compressedSegmentationBlockSize });
    }
    /**
     * Returns a VolumeChunkSpecification with default compression specified if suitable for the
     * volumeType.
     */
    static withDefaultCompression(options) {
        let { compressedSegmentationBlockSize, dataType, voxelSize, transform, lowerVoxelBound, upperVoxelBound } = options;
        transform = Object(neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_0__["getCombinedTransform"])(transform, options.volumeSourceOptions);
        if (compressedSegmentationBlockSize === undefined &&
            options.volumeType === VolumeType.SEGMENTATION &&
            (dataType === neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_1__["DataType"].UINT32 || dataType === neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_1__["DataType"].UINT64)) {
            compressedSegmentationBlockSize = Object(neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_0__["getNearIsotropicBlockSize"])({
                numChannels: options.numChannels,
                voxelSize,
                transform,
                lowerVoxelBound,
                upperVoxelBound,
                maxVoxelsPerChunkLog2: 9,
                maxBlockSize: neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__["vec3"].min(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__["vec3"].create(), options.chunkDataSize, options.maxCompressedSegmentationBlockSize || neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_2__["kInfinityVec"]),
            });
        }
        return new VolumeChunkSpecification(Object.assign({}, options, { compressedSegmentationBlockSize, transform }));
    }
    static getDefaults(options) {
        const adjustedOptions = Object.assign({}, options, { transform: Object(neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_0__["getCombinedTransform"])(options.transform, options.volumeSourceOptions) });
        let { chunkDataSizes = Object(neuroglancer_sliceview_base__WEBPACK_IMPORTED_MODULE_0__["getChunkDataSizes"])(adjustedOptions) } = options;
        return chunkDataSizes.map(chunkDataSize => VolumeChunkSpecification.withDefaultCompression(Object.assign({}, options, { chunkDataSize })));
    }
}
const VOLUME_RPC_ID = 'volume';


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/trackable_boolean.ts":
/*!*********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/trackable_boolean.ts ***!
  \*********************************************************************************************************/
/*! exports provided: TrackableBoolean, TrackableBooleanCheckbox, ElementVisibilityFromTrackableBoolean */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TrackableBoolean", function() { return TrackableBoolean; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TrackableBooleanCheckbox", function() { return TrackableBooleanCheckbox; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ElementVisibilityFromTrackableBoolean", function() { return ElementVisibilityFromTrackableBoolean; });
/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/debounce */ "../../../../../../neuroglancer/node_modules/lodash/debounce.js");
/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_debounce__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var neuroglancer_util_disposable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/disposable */ "../../../../../../neuroglancer/src/neuroglancer/util/disposable.ts");
/* harmony import */ var neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/util/signal */ "../../../../../../neuroglancer/src/neuroglancer/util/signal.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



class TrackableBoolean {
    constructor(value_, defaultValue = value_, localStorageKey = '') {
        this.value_ = value_;
        this.defaultValue = defaultValue;
        this.localStorageKey = localStorageKey;
        this.changed = new neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_2__["NullarySignal"]();
        if (localStorageKey && !localStorage.getItem(this.localStorageKey)) {
            localStorage.setItem(this.localStorageKey, JSON.stringify(this.defaultValue));
        }
    }
    get value() {
        return this.value_;
    }
    set value(newValue) {
        if (newValue !== this.value_) {
            this.value_ = newValue;
            if (this.localStorageKey) {
                localStorage.setItem(this.localStorageKey, JSON.stringify(newValue));
            }
            this.changed.dispatch();
        }
    }
    toggle() {
        this.value = !this.value;
    }
    toJSON() {
        let { value_ } = this;
        if (value_ === this.defaultValue) {
            return undefined;
        }
        return this.value_;
    }
    restoreState(x) {
        if (x === true || x === false) {
            this.value = x;
            return;
        }
        this.value = this.defaultValue;
        if (this.localStorageKey) {
            try {
                this.value = JSON.parse(localStorage.getItem(this.localStorageKey));
            }
            catch (e) {
                this.value = this.defaultValue;
            }
        }
    }
    reset() {
        this.value = this.defaultValue;
    }
}
class TrackableBooleanCheckbox extends neuroglancer_util_disposable__WEBPACK_IMPORTED_MODULE_1__["RefCounted"] {
    constructor(model) {
        super();
        this.model = model;
        this.element = document.createElement('input');
        let { element } = this;
        element.type = 'checkbox';
        this.registerDisposer(model.changed.add(() => {
            this.updateCheckbox();
        }));
        this.updateCheckbox();
        this.registerEventListener(element, 'change', function (_e) {
            model.value = this.checked;
        });
        // Prevent the checkbox from becoming focused.
        element.addEventListener('mousedown', (event) => {
            event.preventDefault();
        });
    }
    updateCheckbox() {
        this.element.checked = this.model.value;
    }
    disposed() {
        let { element } = this;
        let { parentElement } = element;
        if (parentElement) {
            parentElement.removeChild(element);
        }
        super.disposed();
    }
}
class ElementVisibilityFromTrackableBoolean extends neuroglancer_util_disposable__WEBPACK_IMPORTED_MODULE_1__["RefCounted"] {
    constructor(model, element) {
        super();
        this.model = model;
        this.element = element;
        this.initialDisplay = this.element.style.display;
        this.updateVisibility();
        this.registerDisposer(model.changed.add(this.registerCancellable(lodash_debounce__WEBPACK_IMPORTED_MODULE_0___default()(() => this.updateVisibility(), 0))));
    }
    updateVisibility() {
        this.element.style.display = this.model.value ? this.initialDisplay : 'none';
    }
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/trackable_value.ts":
/*!*******************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/trackable_value.ts ***!
  \*******************************************************************************************************/
/*! exports provided: WatchableValue, TrackableValue, LockableValue, makeDerivedWatchableValue, ComputedWatchableValue, WatchableRefCounted, TrackableRefCounted, WatchableSet, registerNested */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WatchableValue", function() { return WatchableValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TrackableValue", function() { return TrackableValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LockableValue", function() { return LockableValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeDerivedWatchableValue", function() { return makeDerivedWatchableValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComputedWatchableValue", function() { return ComputedWatchableValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WatchableRefCounted", function() { return WatchableRefCounted; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TrackableRefCounted", function() { return TrackableRefCounted; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WatchableSet", function() { return WatchableSet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerNested", function() { return registerNested; });
/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/debounce */ "../../../../../../neuroglancer/node_modules/lodash/debounce.js");
/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_debounce__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var neuroglancer_util_disposable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/disposable */ "../../../../../../neuroglancer/src/neuroglancer/util/disposable.ts");
/* harmony import */ var neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/util/signal */ "../../../../../../neuroglancer/src/neuroglancer/util/signal.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



class WatchableValue {
    constructor(value_) {
        this.value_ = value_;
        this.changed = new neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_2__["NullarySignal"]();
    }
    get value() {
        return this.value_;
    }
    set value(newValue) {
        if (newValue !== this.value_) {
            this.value_ = newValue;
            this.changed.dispatch();
        }
    }
}
class TrackableValue extends WatchableValue {
    constructor(value, validator, defaultValue = value) {
        super(value);
        this.validator = validator;
        this.defaultValue = defaultValue;
    }
    toJSON() {
        let { value_ } = this;
        if (value_ === this.defaultValue) {
            return undefined;
        }
        return this.value_;
    }
    reset() {
        this.value = this.defaultValue;
    }
    restoreState(x) {
        if (x !== undefined) {
            let { validator } = this;
            try {
                this.value = validator(x);
                return;
            }
            catch (ignoredError) {
            }
        }
        this.value = this.defaultValue;
    }
}
class LockableValue extends TrackableValue {
    constructor(value, validator, defaultValue = value, lock = false) {
        super(value, validator, defaultValue);
        this.validator = validator;
        this.defaultValue = defaultValue;
        this.lock = lock;
    }
}
class DerivedWatchableValue extends neuroglancer_util_disposable__WEBPACK_IMPORTED_MODULE_1__["RefCounted"] {
    constructor(f, ws) {
        super();
        this.changed = new neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_2__["NullarySignal"]();
        this.f = f;
        this.ws = ws;
        for (const w of ws) {
            this.registerDisposer(w.changed.add(this.changed.dispatch));
        }
    }
    get value() {
        return this.f(...this.ws.map(w => w.value));
    }
}
function makeDerivedWatchableValue(f, ...ws) {
    return new DerivedWatchableValue(f, ws);
}
class ComputedWatchableValue extends neuroglancer_util_disposable__WEBPACK_IMPORTED_MODULE_1__["RefCounted"] {
    constructor(f, ...signals) {
        super();
        this.f = f;
        this.changed = new neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_2__["NullarySignal"]();
        for (const signal of signals) {
            this.registerDisposer(signal.add(this.changed.dispatch));
        }
    }
    get value() {
        return this.f();
    }
}
class WatchableRefCounted extends neuroglancer_util_disposable__WEBPACK_IMPORTED_MODULE_1__["RefCounted"] {
    constructor() {
        super(...arguments);
        this.changed = new neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_2__["NullarySignal"]();
    }
    get value() {
        return this.value_;
    }
    set value(value) {
        const { value_ } = this;
        this.value_ = value;
        if (value_ !== undefined) {
            value_.dispose();
            value_.unregisterDisposer(this.valueHandler);
            this.valueHandler = undefined;
        }
        if (value !== undefined) {
            const valueHandler = this.valueHandler = () => {
                if (this.value_ === value) {
                    this.value_ = undefined;
                    this.changed.dispatch();
                }
            };
            value.registerDisposer(valueHandler);
        }
        if (value !== value_) {
            this.changed.dispatch();
        }
    }
    reset() {
        this.value = undefined;
    }
    disposed() {
        if (this.value_ !== undefined) {
            this.value_.unregisterDisposer(this.valueHandler);
            this.value_.dispose();
        }
        this.value_ = undefined;
        super.disposed();
    }
}
class TrackableRefCounted extends WatchableRefCounted {
    constructor(validator, jsonConverter) {
        super();
        this.validator = validator;
        this.jsonConverter = jsonConverter;
    }
    toJSON() {
        const { value } = this;
        return value && this.jsonConverter(value);
    }
    restoreState(x) {
        this.value = this.validator(x);
    }
}
class WatchableSet {
    constructor(values) {
        this.changed = new neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_2__["NullarySignal"]();
        if (values === undefined) {
            this.values = new Set();
        }
        else {
            this.values = new Set(values);
        }
    }
    add(x) {
        const { values } = this;
        if (!values.has(x)) {
            values.add(x);
            this.changed.dispatch();
        }
        return this;
    }
    delete(x) {
        const { values } = this;
        if (values.delete(x)) {
            this.changed.dispatch();
            return true;
        }
        return false;
    }
    has(x) {
        return this.values.has(x);
    }
    get size() {
        return this.values.size;
    }
    [Symbol.iterator]() {
        return this.values[Symbol.iterator]();
    }
    clear() {
        const { values } = this;
        if (values.size > 0) {
            values.clear();
            this.changed.dispatch();
        }
    }
}
function registerNested(baseState, f) {
    let value;
    let context;
    function updateValue() {
        value = baseState.value;
        context = new neuroglancer_util_disposable__WEBPACK_IMPORTED_MODULE_1__["RefCounted"]();
        f(context, value);
    }
    const handleChange = lodash_debounce__WEBPACK_IMPORTED_MODULE_0___default()(() => {
        if (baseState.value !== value) {
            context.dispose();
            updateValue();
        }
    }, 0);
    const signalDisposer = baseState.changed.add(handleChange);
    updateValue();
    return () => {
        handleChange.cancel();
        signalDisposer();
        context.dispose();
    };
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/uint64_map.ts":
/*!**************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/uint64_map.ts ***!
  \**************************************************************************************************/
/*! exports provided: Uint64Map */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint64Map", function() { return Uint64Map; });
/* harmony import */ var neuroglancer_gpu_hash_hash_table__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/gpu_hash/hash_table */ "../../../../../../neuroglancer/src/neuroglancer/gpu_hash/hash_table.ts");
/* harmony import */ var neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/signal */ "../../../../../../neuroglancer/src/neuroglancer/util/signal.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/**
 * @license
 * This work is a derivative of the Google Neuroglancer project,
 * Copyright 2016 Google Inc.
 * The Derivative Work is covered by
 * Copyright 2019 Howard Hughes Medical Institute
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Uint64Map_1;



let Uint64Map = Uint64Map_1 = class Uint64Map extends neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_2__["SharedObjectCounterpart"] {
    constructor() {
        super(...arguments);
        this.hashTable = new neuroglancer_gpu_hash_hash_table__WEBPACK_IMPORTED_MODULE_0__["HashMapUint64"]();
        this.changed = new neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_1__["Signal"]();
    }
    static makeWithCounterpart(rpc) {
        let obj = new Uint64Map_1();
        obj.initializeCounterpart(rpc);
        return obj;
    }
    disposed() {
        super.disposed();
        this.hashTable = undefined;
        this.changed = undefined;
    }
    set_(key, value) {
        return this.hashTable.set(key, value);
    }
    set(key, value) {
        if (this.set_(key, value)) {
            let { rpc } = this;
            if (rpc) {
                rpc.invoke('Uint64Map.set', { 'id': this.rpcId, 'key': key, 'value': value });
            }
            this.changed.dispatch(key, true);
        }
    }
    has(key) {
        return this.hashTable.has(key);
    }
    get(key, value) {
        return this.hashTable.get(key, value);
    }
    [Symbol.iterator]() {
        return this.hashTable.entries();
    }
    delete_(key) {
        return this.hashTable.delete(key);
    }
    delete(key) {
        if (this.delete_(key)) {
            let { rpc } = this;
            if (rpc) {
                rpc.invoke('Uint64Map.delete', { 'id': this.rpcId, 'key': key });
            }
            this.changed.dispatch(key, false);
        }
    }
    get size() {
        return this.hashTable.size;
    }
    clear() {
        if (this.hashTable.clear()) {
            let { rpc } = this;
            if (rpc) {
                rpc.invoke('Uint64Map.clear', { 'id': this.rpcId });
            }
            this.changed.dispatch(null, false);
        }
    }
    toJSON() {
        let result = {};
        for (let [key, value] of this.hashTable.entries()) {
            result[key.toString()] = value.toString();
        }
        return result;
    }
};
Uint64Map = Uint64Map_1 = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_2__["registerSharedObject"])('Uint64Map')
], Uint64Map);

Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_2__["registerRPC"])('Uint64Map.set', function (x) {
    let obj = this.get(x['id']);
    if (obj.set_(x['key'], x['value'])) {
        obj.changed.dispatch();
    }
});
Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_2__["registerRPC"])('Uint64Map.delete', function (x) {
    let obj = this.get(x['id']);
    if (obj.delete_(x['key'])) {
        obj.changed.dispatch();
    }
});
Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_2__["registerRPC"])('Uint64Map.clear', function (x) {
    let obj = this.get(x['id']);
    if (obj.hashTable.clear()) {
        obj.changed.dispatch();
    }
});


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/uint64_set.ts":
/*!**************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/uint64_set.ts ***!
  \**************************************************************************************************/
/*! exports provided: Uint64Set */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint64Set", function() { return Uint64Set; });
/* harmony import */ var neuroglancer_gpu_hash_hash_table__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/gpu_hash/hash_table */ "../../../../../../neuroglancer/src/neuroglancer/gpu_hash/hash_table.ts");
/* harmony import */ var neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/signal */ "../../../../../../neuroglancer/src/neuroglancer/util/signal.ts");
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Uint64Set_1;



let Uint64Set = Uint64Set_1 = class Uint64Set extends neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_2__["SharedObjectCounterpart"] {
    constructor() {
        super(...arguments);
        this.hashTable = new neuroglancer_gpu_hash_hash_table__WEBPACK_IMPORTED_MODULE_0__["HashSetUint64"]();
        this.changed = new neuroglancer_util_signal__WEBPACK_IMPORTED_MODULE_1__["Signal"]();
    }
    static makeWithCounterpart(rpc) {
        let obj = new Uint64Set_1();
        obj.initializeCounterpart(rpc);
        return obj;
    }
    disposed() {
        super.disposed();
        this.hashTable = undefined;
        this.changed = undefined;
    }
    reserve_(x) {
        return this.hashTable.reserve(x);
    }
    reserve(x) {
        if (this.reserve_(x)) {
            let { rpc } = this;
            if (rpc) {
                rpc.invoke('Uint64Set.reserve', { 'id': this.rpcId, 'value': x });
            }
        }
    }
    add_(x) {
        let changed = false;
        for (const v of x) {
            changed = this.hashTable.add(v) || changed;
        }
        return changed;
    }
    add(x) {
        const tmp = Array().concat(x);
        if (this.add_(tmp)) {
            let { rpc } = this;
            if (rpc) {
                rpc.invoke('Uint64Set.add', { 'id': this.rpcId, 'value': tmp });
            }
            this.changed.dispatch(x, true);
        }
    }
    has(x) {
        return this.hashTable.has(x);
    }
    [Symbol.iterator]() {
        return this.hashTable.keys();
    }
    delete_(x) {
        let changed = false;
        for (const v of x) {
            changed = this.hashTable.delete(v) || changed;
        }
        return changed;
    }
    delete(x) {
        const tmp = Array().concat(x);
        if (this.delete_(Array().concat(x))) {
            let { rpc } = this;
            if (rpc) {
                rpc.invoke('Uint64Set.delete', { 'id': this.rpcId, 'value': tmp });
            }
            this.changed.dispatch(x, false);
        }
    }
    get size() {
        return this.hashTable.size;
    }
    clear() {
        if (this.hashTable.clear()) {
            let { rpc } = this;
            if (rpc) {
                rpc.invoke('Uint64Set.clear', { 'id': this.rpcId });
            }
            this.changed.dispatch(null, false);
        }
    }
    toJSON() {
        let result = new Array();
        for (let id of this) {
            result.push(id.toString());
        }
        // Need to sort entries, otherwise serialization changes every time.
        result.sort();
        return result;
    }
};
Uint64Set = Uint64Set_1 = __decorate([
    Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_2__["registerSharedObject"])('Uint64Set')
], Uint64Set);

Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_2__["registerRPC"])('Uint64Set.reserve', function (x) {
    let obj = this.get(x['id']);
    if (obj.reserve_(x['value'])) {
        obj.changed.dispatch();
    }
});
Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_2__["registerRPC"])('Uint64Set.add', function (x) {
    let obj = this.get(x['id']);
    if (obj.add_(x['value'])) {
        obj.changed.dispatch();
    }
});
Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_2__["registerRPC"])('Uint64Set.delete', function (x) {
    let obj = this.get(x['id']);
    if (obj.delete_(x['value'])) {
        obj.changed.dispatch();
    }
});
Object(neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_2__["registerRPC"])('Uint64Set.clear', function (x) {
    let obj = this.get(x['id']);
    if (obj.hashTable.clear()) {
        obj.changed.dispatch();
    }
});


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/util/array.ts":
/*!**************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/util/array.ts ***!
  \**************************************************************************************************/
/*! exports provided: partitionArray, maybePadArray, getFortranOrderStrides, transposeArray2d, tile2dArray, binarySearch, binarySearchLowerBound */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "partitionArray", function() { return partitionArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maybePadArray", function() { return maybePadArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFortranOrderStrides", function() { return getFortranOrderStrides; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transposeArray2d", function() { return transposeArray2d; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tile2dArray", function() { return tile2dArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "binarySearch", function() { return binarySearch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "binarySearchLowerBound", function() { return binarySearchLowerBound; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Partitions array[start:end] such that all elements for which predicate
 * returns true are before the elements for which predicate returns false.
 *
 * predicate will be called exactly once for each element in array[start:end],
 * in order.
 *
 * @returns {number} The index of the first element for which predicate returns
 * false, or end if there is no such element.
 */
function partitionArray(array, start, end, predicate) {
    while (start < end) {
        let x = array[start];
        if (predicate(x)) {
            ++start;
            continue;
        }
        --end;
        array[start] = array[end];
        array[end] = x;
    }
    return end;
}
/**
 * Returns an array of size newSize that starts with the contents of array.
 * Either returns array if it has the correct size, or a new array with zero
 * padding at the end.
 */
function maybePadArray(array, newSize) {
    if (array.length === newSize) {
        return array;
    }
    let newArray = new array.constructor(newSize);
    newArray.set(array);
    return newArray;
}
function getFortranOrderStrides(size, baseStride = 1) {
    let length = size.length;
    let strides = new Array(length);
    let stride = strides[0] = baseStride;
    for (let i = 1; i < length; ++i) {
        stride *= size[i - 1];
        strides[i] = stride;
    }
    return strides;
}
/**
 * Converts an array of shape [majorSize, minorSize] to
 * [minorSize, majorSize].
 */
function transposeArray2d(array, majorSize, minorSize) {
    let transpose = new array.constructor(array.length);
    for (let i = 0; i < majorSize * minorSize; i += minorSize) {
        for (let j = 0; j < minorSize; j++) {
            let index = i / minorSize;
            transpose[j * majorSize + index] = array[i + j];
        }
    }
    return transpose;
}
function tile2dArray(array, majorDimension, minorTiles, majorTiles) {
    const minorDimension = array.length / majorDimension;
    const length = array.length * minorTiles * majorTiles;
    const result = new array.constructor(length);
    const minorTileStride = array.length * majorTiles;
    const majorTileStride = majorDimension;
    const minorStride = majorDimension * majorTiles;
    for (let minor = 0; minor < minorDimension; ++minor) {
        for (let major = 0; major < majorDimension; ++major) {
            const inputValue = array[minor * majorDimension + major];
            const baseOffset = minor * minorStride + major;
            for (let minorTile = 0; minorTile < minorTiles; ++minorTile) {
                for (let majorTile = 0; majorTile < majorTiles; ++majorTile) {
                    result[minorTile * minorTileStride + majorTile * majorTileStride + baseOffset] =
                        inputValue;
                }
            }
        }
    }
    return result;
}
function binarySearch(haystack, needle, compare, low = 0, high = haystack.length) {
    while (low < high) {
        const mid = (low + high - 1) >> 1;
        const compareResult = compare(needle, haystack[mid]);
        if (compareResult > 0) {
            low = mid + 1;
        }
        else if (compareResult < 0) {
            high = mid;
        }
        else {
            return mid;
        }
    }
    return ~low;
}
/**
 * Returns the first index in `[begin, end)` for which `predicate` is `true`, or returns `end` if no
 * such index exists.
 *
 * For any index `i` in `(begin, end)`, it must be the case that `predicate(i) >= predicate(i - 1)`.
 */
function binarySearchLowerBound(begin, end, predicate) {
    let count = end - begin;
    while (count > 0) {
        let step = Math.floor(count / 2);
        let i = begin + step;
        if (predicate(i)) {
            count = step;
        }
        else {
            begin = i + 1;
            count -= step + 1;
        }
    }
    return begin;
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/util/byte_range_http_requests.ts":
/*!*********************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/util/byte_range_http_requests.ts ***!
  \*********************************************************************************************************************/
/*! exports provided: fetchHttpByteRange */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fetchHttpByteRange", function() { return fetchHttpByteRange; });
/* harmony import */ var neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/util/http_request */ "../../../../../../neuroglancer/src/neuroglancer/util/http_request.ts");
/**
 * @license
 * Copyright 2019 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * On Chromium, multiple concurrent byte range requests to the same URL are serialized unless the
 * cache is disabled.  Disabling the cache works around the problem.
 *
 * https://bugs.chromium.org/p/chromium/issues/detail?id=969828
 */
const cacheMode = navigator.userAgent.indexOf('Chrome') !== -1 ? 'no-store' : 'default';
function fetchHttpByteRange(url, startOffset, endOffset, cancellationToken) {
    return Object(neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_0__["cancellableFetchOk"])(url, {
        headers: Object(neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_0__["getByteRangeHeader"])(startOffset, endOffset),
        cache: cacheMode,
    }, neuroglancer_util_http_request__WEBPACK_IMPORTED_MODULE_0__["responseArrayBuffer"], cancellationToken);
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/util/cancellation.ts":
/*!*********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/util/cancellation.ts ***!
  \*********************************************************************************************************/
/*! exports provided: CANCELED, throwIfCanceled, uncancelableToken, CancellationTokenSource, MultipleConsumerCancellationTokenSource, makeCancelablePromise */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CANCELED", function() { return CANCELED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "throwIfCanceled", function() { return throwIfCanceled; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uncancelableToken", function() { return uncancelableToken; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CancellationTokenSource", function() { return CancellationTokenSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultipleConsumerCancellationTokenSource", function() { return MultipleConsumerCancellationTokenSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeCancelablePromise", function() { return makeCancelablePromise; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class CancellationError {
    constructor() {
        this.name = 'CancellationError';
        this.message = 'CANCELED';
    }
    toString() {
        return 'CANCELED';
    }
}
/**
 * Singleton instance of CancellationError thrown to indicate cancellation.
 */
const CANCELED = new CancellationError();
/**
 * Throws CANCELED if token.isCanceled === true.
 */
function throwIfCanceled(token) {
    if (token.isCanceled === true) {
        throw CANCELED;
    }
}
const noopFunction = () => { };
/**
 * CancellationToken that cannot be canceled.  This can be passed to operations that require a
 * CancellationToken but will not need to be canceled.
 */
const uncancelableToken = {
    isCanceled: false,
    add: () => noopFunction,
    remove: noopFunction
};
/**
 * Class that can be used to trigger cancellation.
 */
class CancellationTokenSource {
    /**
     * Trigger cancellation.
     *
     * If this.isCanceled === false, then each registered cancellation handler is invoked
     * synchronously.
     */
    cancel() {
        const { handlers } = this;
        if (handlers !== null) {
            this.handlers = null;
            if (handlers !== undefined) {
                for (let handler of handlers) {
                    handler();
                }
            }
        }
    }
    get isCanceled() {
        return this.handlers === null;
    }
    add(handler) {
        let { handlers } = this;
        if (handlers === null) {
            handler();
            return noopFunction;
        }
        if (handlers === undefined) {
            handlers = this.handlers = new Set();
        }
        handlers.add(handler);
        return () => {
            this.remove(handler);
        };
    }
    remove(handler) {
        const { handlers } = this;
        if (handlers != null) {
            handlers.delete(handler);
        }
    }
}
/**
 * Creates a CancellationToken corresponding to an asynchronous process with multiple consumers.  It
 * is cancelled only when the cancellation tokens corresponding to all of the consumers have been
 * cancelled.
 */
class MultipleConsumerCancellationTokenSource extends CancellationTokenSource {
    constructor() {
        super(...arguments);
        this.consumers = new Set();
    }
    addConsumer(cancellationToken = uncancelableToken) {
        const { consumers } = this;
        if (consumers.has(cancellationToken) || cancellationToken.isCanceled) {
            return;
        }
        consumers.add(cancellationToken);
        cancellationToken.add(() => {
            consumers.delete(cancellationToken);
            if (consumers.size === 0) {
                this.cancel();
            }
        });
    }
}
/**
 * Creates a promise and a dependent cancellation token.
 *
 * The dependent cancellation token will be canceled if the specified `cancellationToken` is
 * canceled while the promise is pending.
 *
 * @param cancellationToken The token that provides notification of cancellation.
 * @param executor The executor passed the resolve and reject functions for the promise, as well as
 * the dependent cancellation token.  If cancellation occurs after either resolve or reject is
 * called, then the dependent token is not cancelled.
 *
 * @returns A new Promise.
 */
function makeCancelablePromise(cancellationToken, executor) {
    return new Promise((resolve, reject) => {
        if (cancellationToken === uncancelableToken) {
            executor(resolve, reject, uncancelableToken);
            return;
        }
        const scopedToken = new CancellationTokenSource();
        const unregister = cancellationToken.add(() => {
            scopedToken.cancel();
        });
        executor(value => {
            unregister();
            resolve(value);
        }, error => {
            unregister();
            reject(error);
        }, scopedToken);
    });
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/util/compare.ts":
/*!****************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/util/compare.ts ***!
  \****************************************************************************************************/
/*! exports provided: approxEqual */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "approxEqual", function() { return approxEqual; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function approxEqual(a, b) {
    if (a === b) {
        return true;
    }
    return (Math.abs(a - b) / Math.min(Math.abs(a), Math.abs(b)) < 1e-6);
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/util/data_type.ts":
/*!******************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/util/data_type.ts ***!
  \******************************************************************************************************/
/*! exports provided: DataType, DATA_TYPE_BYTES */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataType", function() { return DataType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DATA_TYPE_BYTES", function() { return DATA_TYPE_BYTES; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * If this is updated, DATA_TYPE_BYTES must also be updated.
 */
var DataType;
(function (DataType) {
    DataType[DataType["UINT8"] = 0] = "UINT8";
    DataType[DataType["UINT16"] = 1] = "UINT16";
    DataType[DataType["UINT32"] = 2] = "UINT32";
    DataType[DataType["UINT64"] = 3] = "UINT64";
    DataType[DataType["FLOAT32"] = 4] = "FLOAT32";
})(DataType || (DataType = {}));
const DATA_TYPE_BYTES = [];
DATA_TYPE_BYTES[DataType.UINT8] = 1;
DATA_TYPE_BYTES[DataType.UINT16] = 2;
DATA_TYPE_BYTES[DataType.UINT32] = 4;
DATA_TYPE_BYTES[DataType.UINT64] = 8;
DATA_TYPE_BYTES[DataType.FLOAT32] = 4;


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/util/disjoint_sets.ts":
/*!**********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/util/disjoint_sets.ts ***!
  \**********************************************************************************************************/
/*! exports provided: DisjointUint64Sets */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DisjointUint64Sets", function() { return DisjointUint64Sets; });
/* harmony import */ var neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/util/uint64 */ "../../../../../../neuroglancer/src/neuroglancer/util/uint64.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const rankSymbol = Symbol('disjoint_sets:rank');
const parentSymbol = Symbol('disjoint_sets:parent');
const nextSymbol = Symbol('disjoint_sets:next');
const prevSymbol = Symbol('disjoint_sets:prev');
function findRepresentative(v) {
    // First pass: find the root, which will be stored in ancestor.
    let old = v;
    let ancestor = v[parentSymbol];
    while (ancestor !== v) {
        v = ancestor;
        ancestor = v[parentSymbol];
    }
    // Second pass: set all of the parent pointers along the path from the
    // original element `old' to refer directly to the root `ancestor'.
    v = old[parentSymbol];
    while (ancestor !== v) {
        old[parentSymbol] = ancestor;
        old = v;
        v = old[parentSymbol];
    }
    return ancestor;
}
function linkUnequalSetRepresentatives(i, j) {
    let iRank = i[rankSymbol];
    let jRank = j[rankSymbol];
    if (iRank > jRank) {
        j[parentSymbol] = i;
        return i;
    }
    i[parentSymbol] = j;
    if (iRank === jRank) {
        j[rankSymbol] = jRank + 1;
    }
    return j;
}
function spliceCircularLists(i, j) {
    let iPrev = i[prevSymbol];
    let jPrev = j[prevSymbol];
    // Connect end of i to beginning of j.
    j[prevSymbol] = iPrev;
    iPrev[nextSymbol] = j;
    // Connect end of j to beginning of i.
    i[prevSymbol] = jPrev;
    jPrev[nextSymbol] = i;
}
function* setElementIterator(i) {
    let j = i;
    do {
        yield j;
        j = j[nextSymbol];
    } while (j !== i);
}
function initializeElement(v) {
    v[parentSymbol] = v;
    v[rankSymbol] = 0;
    v[nextSymbol] = v[prevSymbol] = v;
}
const maxSymbol = Symbol('disjoint_sets:max');
function isRootElement(v) {
    return v[parentSymbol] === v;
}
/**
 * Represents a collection of disjoint sets of Uint64 values.
 *
 * Supports merging sets, retrieving the maximum Uint64 value contained in a set (the representative
 * value), and iterating over the elements contained in a set.
 */
class DisjointUint64Sets {
    constructor() {
        this.map = new Map();
        this.generation = 0;
    }
    has(x) {
        let key = x.toString();
        let element = this.map.get(key);
        return element !== undefined;
    }
    get(x) {
        let key = x.toString();
        let element = this.map.get(key);
        if (element === undefined) {
            return x;
        }
        return findRepresentative(element)[maxSymbol];
    }
    isMaxElement(x) {
        let y = this.get(x);
        return (y === x || neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_0__["Uint64"].equal(y, x));
    }
    makeSet(x) {
        let key = x.toString();
        let { map } = this;
        let element = map.get(key);
        if (element === undefined) {
            element = x.clone();
            initializeElement(element);
            element[maxSymbol] = element;
            map.set(key, element);
            return element;
        }
        return findRepresentative(element);
    }
    link(a, b) {
        a = this.makeSet(a);
        b = this.makeSet(b);
        if (a === b) {
            return false;
        }
        this.generation++;
        let newNode = linkUnequalSetRepresentatives(a, b);
        spliceCircularLists(a, b);
        let aMax = a[maxSymbol];
        let bMax = b[maxSymbol];
        newNode[maxSymbol] = neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_0__["Uint64"].less(aMax, bMax) ? bMax : aMax;
        return true;
    }
    deleteSet(a) {
        const ids = [...this.setElements(a)];
        if (ids.length > 0) {
            for (const id of ids) {
                this.map.delete(id.toString());
            }
            ++this.generation;
            return true;
        }
        return false;
    }
    *setElements(a) {
        let key = a.toString();
        let element = this.map.get(key);
        if (element === undefined) {
            yield a;
        }
        else {
            yield* setElementIterator(element);
        }
    }
    clear() {
        let { map } = this;
        if (map.size === 0) {
            return false;
        }
        ++this.generation;
        map.clear();
        return true;
    }
    get size() {
        return this.map.size;
    }
    *mappings(temp = new Array(2)) {
        for (let element of this.map.values()) {
            temp[0] = element;
            temp[1] = findRepresentative(element)[maxSymbol];
            yield temp;
        }
    }
    [Symbol.iterator]() {
        return this.mappings();
    }
    /**
     * Returns an array of arrays of strings, where the arrays contained in the outer array correspond
     * to the disjoint sets, and the strings are the base-10 string representations of the members of
     * each set.  The members are sorted in numerical order, and the sets are sorted in numerical
     * order of their smallest elements.
     */
    toJSON() {
        let sets = new Array();
        for (let element of this.map.values()) {
            if (isRootElement(element)) {
                let members = new Array();
                for (let member of setElementIterator(element)) {
                    members.push(member);
                }
                members.sort(neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_0__["Uint64"].compare);
                sets.push(members);
            }
        }
        sets.sort((a, b) => neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_0__["Uint64"].compare(a[0], b[0]));
        return sets.map(set => set.map(element => element.toString()));
    }
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/util/disposable.ts":
/*!*******************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/util/disposable.ts ***!
  \*******************************************************************************************************/
/*! exports provided: invokeDisposer, invokeDisposers, registerEventListener, RefCounted, RefCountedValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invokeDisposer", function() { return invokeDisposer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invokeDisposers", function() { return invokeDisposers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerEventListener", function() { return registerEventListener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RefCounted", function() { return RefCounted; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RefCountedValue", function() { return RefCountedValue; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function invokeDisposer(disposer) {
    if (typeof disposer === 'object') {
        disposer.dispose();
    }
    else {
        disposer();
    }
}
function invokeDisposers(disposers) {
    for (let i = disposers.length; i > 0; --i) {
        invokeDisposer(disposers[i - 1]);
    }
}
function registerEventListener(target, type, listener, options) {
    target.addEventListener(type, listener, options);
    return () => target.removeEventListener(type, listener, options);
}
class RefCounted {
    constructor() {
        this.refCount = 1;
    }
    addRef() {
        ++this.refCount;
        return this;
    }
    dispose() {
        if (--this.refCount !== 0) {
            return;
        }
        this.refCountReachedZero();
    }
    refCountReachedZero() {
        this.disposed();
        let { disposers } = this;
        if (disposers !== undefined) {
            invokeDisposers(disposers);
            this.disposers = undefined;
        }
        this.wasDisposed = true;
    }
    disposed() { }
    registerDisposer(f) {
        let { disposers } = this;
        if (disposers == null) {
            this.disposers = [f];
        }
        else {
            disposers.push(f);
        }
        return f;
    }
    unregisterDisposer(f) {
        let { disposers } = this;
        if (disposers != null) {
            let index = disposers.indexOf(f);
            if (index !== -1) {
                disposers.splice(index, 1);
            }
        }
        return f;
    }
    registerEventListener(target, type, listener, options) {
        this.registerDisposer(registerEventListener(target, type, listener, options));
    }
    registerCancellable(cancellable) {
        this.registerDisposer(() => {
            cancellable.cancel();
        });
        return cancellable;
    }
}
class RefCountedValue extends RefCounted {
    constructor(value) {
        super();
        this.value = value;
    }
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/util/endian.ts":
/*!***************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/util/endian.ts ***!
  \***************************************************************************************************/
/*! exports provided: Endianness, determineEndianness, ENDIANNESS, swapEndian16, swapEndian32, convertEndian16, nativeToLittle16, convertEndian32, nativeToLittle32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Endianness", function() { return Endianness; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "determineEndianness", function() { return determineEndianness; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ENDIANNESS", function() { return ENDIANNESS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "swapEndian16", function() { return swapEndian16; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "swapEndian32", function() { return swapEndian32; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertEndian16", function() { return convertEndian16; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nativeToLittle16", function() { return nativeToLittle16; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertEndian32", function() { return convertEndian32; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nativeToLittle32", function() { return nativeToLittle32; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Facilities for endianness detection and swapping.
 */
var Endianness;
(function (Endianness) {
    Endianness[Endianness["LITTLE"] = 0] = "LITTLE";
    Endianness[Endianness["BIG"] = 1] = "BIG";
})(Endianness || (Endianness = {}));
function determineEndianness() {
    const a = Uint16Array.of(0x1122);
    const b = new Uint8Array(a.buffer);
    return b[0] === 0x11 ? Endianness.BIG : Endianness.LITTLE;
}
/**
 * The native endianness of the runtime.
 */
const ENDIANNESS = determineEndianness();
/**
 * Swaps the endianness of an array assumed to contain 16-bit values.
 */
function swapEndian16(array) {
    let view = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);
    for (let i = 0, length = view.length; i < length; i += 2) {
        let temp = view[i];
        view[i] = view[i + 1];
        view[i + 1] = temp;
    }
}
/**
 * Swaps the endianness of an array assumed to contain 32-bit values.
 */
function swapEndian32(array) {
    let view = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);
    for (let i = 0, length = view.length; i < length; i += 4) {
        let temp = view[i];
        view[i] = view[i + 3];
        view[i + 3] = temp;
        temp = view[i + 1];
        view[i + 1] = view[i + 2];
        view[i + 2] = temp;
    }
}
/**
 * Converts the endianness of an array assumed to contain 16-bit values from source to target.
 *
 * This does nothing if source === target.
 */
function convertEndian16(array, source, target = ENDIANNESS) {
    if (source !== target) {
        swapEndian16(array);
    }
}
/**
 * Converts the endianness of an array assumed to contain 16-bit values from native to little
 * endian.
 *
 * This does nothing if the native ENDIANNESS is little endian.
 */
function nativeToLittle16(array) {
    if (ENDIANNESS !== Endianness.LITTLE) {
        swapEndian16(array);
    }
}
/**
 * Converts the endianness of an array assumed to contain 32-bit values from source to target.
 *
 * This does nothing if source === target.
 */
function convertEndian32(array, source, target = ENDIANNESS) {
    if (source !== target) {
        swapEndian32(array);
    }
}
/**
 * Converts the endianness of an array assumed to contain 32-bit values from native to little
 * endian.
 *
 * This does nothing if the native ENDIANNESS is little endian.
 */
function nativeToLittle32(array) {
    if (ENDIANNESS !== Endianness.LITTLE) {
        swapEndian32(array);
    }
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/util/float32array_builder.ts":
/*!*****************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/util/float32array_builder.ts ***!
  \*****************************************************************************************************************/
/*! exports provided: Float32ArrayBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Float32ArrayBuilder", function() { return Float32ArrayBuilder; });
// DO NOT EDIT.  Generated from templates/neuroglancer/util/typedarray_builder.template.ts.
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Float32ArrayBuilder {
    constructor(initialCapacity = 16) {
        this.length = 0;
        this.data = new Float32Array(initialCapacity);
    }
    resize(newLength) {
        let { data } = this;
        if (newLength > data.length) {
            let newData = new Float32Array(Math.max(newLength, data.length * 2));
            newData.set(data.subarray(0, this.length));
            this.data = newData;
        }
        this.length = newLength;
    }
    get view() {
        let { data } = this;
        return new Float32Array(data.buffer, data.byteOffset, this.length);
    }
    shrinkToFit() {
        this.data = new Float32Array(this.view);
    }
    clear() {
        this.length = 0;
    }
    appendArray(other) {
        let { length } = this;
        this.resize(length + other.length);
        this.data.set(other, length);
    }
    eraseRange(start, end) {
        this.data.copyWithin(start, end, this.length);
        this.length -= (end - start);
    }
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/util/geom.ts":
/*!*************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/util/geom.ts ***!
  \*************************************************************************************************/
/*! exports provided: mat2, mat3, mat4, quat, vec2, vec3, vec4, identityMat4, AXES_NAMES, BoundingBox, kAxes, kZeroVec, kOneVec, kInfinityVec, kIdentityQuat, prod3, prod4, vec3Key, rectifyVec3IfAxisAligned, rectifyTransformMatrixIfAxisAligned, quatRotateX180, quatRotateY180, quatRotateZ180, transformVectorByMat4, effectiveScalingFactorFromMat4, translationRotationScaleZReflectionToMat4, findClosestParameterizedLinePosition, projectPointToLineSegment, mat3FromMat4, getFrustrumPlanes, isAABBVisible */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identityMat4", function() { return identityMat4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AXES_NAMES", function() { return AXES_NAMES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BoundingBox", function() { return BoundingBox; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "kAxes", function() { return kAxes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "kZeroVec", function() { return kZeroVec; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "kOneVec", function() { return kOneVec; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "kInfinityVec", function() { return kInfinityVec; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "kIdentityQuat", function() { return kIdentityQuat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prod3", function() { return prod3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prod4", function() { return prod4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "vec3Key", function() { return vec3Key; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rectifyVec3IfAxisAligned", function() { return rectifyVec3IfAxisAligned; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rectifyTransformMatrixIfAxisAligned", function() { return rectifyTransformMatrixIfAxisAligned; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "quatRotateX180", function() { return quatRotateX180; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "quatRotateY180", function() { return quatRotateY180; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "quatRotateZ180", function() { return quatRotateZ180; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformVectorByMat4", function() { return transformVectorByMat4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "effectiveScalingFactorFromMat4", function() { return effectiveScalingFactorFromMat4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translationRotationScaleZReflectionToMat4", function() { return translationRotationScaleZReflectionToMat4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findClosestParameterizedLinePosition", function() { return findClosestParameterizedLinePosition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "projectPointToLineSegment", function() { return projectPointToLineSegment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mat3FromMat4", function() { return mat3FromMat4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFrustrumPlanes", function() { return getFrustrumPlanes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isAABBVisible", function() { return isAABBVisible; });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "../../../../../../neuroglancer/node_modules/gl-matrix/esm/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mat2", function() { return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat2"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mat3", function() { return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mat4", function() { return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat4"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "quat", function() { return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["quat"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "vec2", function() { return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "vec3", function() { return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "vec4", function() { return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"]; });

/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const identityMat4 = gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat4"].create();
const AXES_NAMES = ['x', 'y', 'z'];
class BoundingBox {
    constructor(lower, upper) {
        this.lower = lower;
        this.upper = upper;
    }
}
const kAxes = [
    gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].fromValues(1, 0, 0),
    gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].fromValues(0, 1, 0),
    gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].fromValues(0, 0, 1),
];
const kZeroVec = gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].fromValues(0, 0, 0);
const kOneVec = gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].fromValues(1, 1, 1);
const kInfinityVec = gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].fromValues(Infinity, Infinity, Infinity);
const kIdentityQuat = gl_matrix__WEBPACK_IMPORTED_MODULE_0__["quat"].create();
function prod3(x) {
    return x[0] * x[1] * x[2];
}
function prod4(x) {
    return x[0] * x[1] * x[2] * x[3];
}
/**
 * Implements a one-to-one conversion from Vec3 to string, suitable for use a Map key.
 *
 * Specifically, returns the string representation of the 3 values separated by commas.
 */
function vec3Key(x) {
    return `${x[0]},${x[1]},${x[2]}`;
}
const RECTIFY_EPSILON = 1e-4;
function rectifyVec3IfAxisAligned(v, offset) {
    let a0 = Math.abs(v[offset]), a1 = Math.abs(v[offset + 1]), a2 = Math.abs(v[offset + 2]);
    let max = Math.max(a0, a1, a2);
    if (a0 / max < RECTIFY_EPSILON) {
        v[offset] = 0;
    }
    if (a1 / max < RECTIFY_EPSILON) {
        v[offset + 1] = 0;
    }
    if (a2 / max < RECTIFY_EPSILON) {
        v[offset + 2] = 0;
    }
}
/**
 * Makes columns of m that are approximately axis-aligned exactly axis aligned.
 *
 * Note that mat is stored in Fortran order, and therefore the first column is m[0], m[1], m[2].
 */
function rectifyTransformMatrixIfAxisAligned(m) {
    rectifyVec3IfAxisAligned(m, 0);
    rectifyVec3IfAxisAligned(m, 4);
    rectifyVec3IfAxisAligned(m, 8);
}
/**
 * Transforms `a` by a 180-degree rotation about X, stores result in `out`.
 */
function quatRotateX180(out, a) {
    let x = a[0], y = a[1], z = a[2], w = a[3];
    out[0] = w;
    out[1] = z;
    out[2] = -y;
    out[3] = -x;
}
/**
 * Transforms `a` by a 180-degree rotation about Y, stores result in `out`.
 */
function quatRotateY180(out, a) {
    let x = a[0], y = a[1], z = a[2], w = a[3];
    out[0] = -z;
    out[1] = w;
    out[2] = x;
    out[3] = -y;
}
/**
 * Transforms `a` by a 180-degree rotation about Z, stores result in `out`.
 */
function quatRotateZ180(out, a) {
    let x = a[0], y = a[1], z = a[2], w = a[3];
    out[0] = y;
    out[1] = -x;
    out[2] = w;
    out[3] = -z;
}
/**
 * Transforms a vector `a` by a homogenous transformation matrix `m`.  The translation component of
 * `m` is ignored.
 */
function transformVectorByMat4(out, a, m) {
    let x = a[0], y = a[1], z = a[2];
    out[0] = m[0] * x + m[4] * y + m[8] * z;
    out[1] = m[1] * x + m[5] * y + m[9] * z;
    out[2] = m[2] * x + m[6] * y + m[10] * z;
    return out;
}
/**
 * Computes the effective scaling factor of each local spatial dimension by `m`, which is assumed to
 * transform local coordinates to global coordinates.
 */
function effectiveScalingFactorFromMat4(out, m) {
    const m0 = m[0], m1 = m[1], m2 = m[2], m4 = m[4], m5 = m[5], m6 = m[6], m8 = m[8], m9 = m[9], m10 = m[10];
    out[0] = Math.sqrt(m0 * m0 + m1 * m1 + m2 * m2);
    out[1] = Math.sqrt(m4 * m4 + m5 * m5 + m6 * m6);
    out[2] = Math.sqrt(m8 * m8 + m9 * m9 + m10 * m10);
    return out;
}
function translationRotationScaleZReflectionToMat4(out, translation, rotation, scale, zReflection) {
    const temp = out;
    out[0] = scale[0];
    out[1] = scale[1];
    out[2] = scale[2] * zReflection;
    return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat4"].fromRotationTranslationScale(out, rotation, translation, temp);
}
/**
 * Returns the value of `t` that minimizes `(p - (a + t * (b - a)))`.
 */
function findClosestParameterizedLinePosition(a, b, p) {
    // http://mathworld.wolfram.com/Point-LineDistance3-Dimensional.html
    // Compute t: -dot(a-p, b-a) / |b - a|^2
    const denominator = gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].squaredDistance(a, b);
    let numerator = 0;
    for (let i = 0; i < 3; ++i) {
        const aValue = a[i];
        numerator -= (aValue - p[i]) * (b[i] - aValue);
    }
    return numerator / Math.max(denominator, 1e-6);
}
/**
 * Sets `out` to the position on the line segment `[a, b]` closest to `p`.
 */
function projectPointToLineSegment(out, a, b, p) {
    let t = findClosestParameterizedLinePosition(a, b, p);
    t = Math.max(0.0, Math.min(1.0, t));
    for (let i = 0; i < 3; ++i) {
        const aValue = a[i];
        out[i] = aValue + t * (b[i] - aValue);
    }
    return out;
}
function mat3FromMat4(out, m) {
    const m00 = m[0], m01 = m[1], m02 = m[2], m10 = m[4], m11 = m[5], m12 = m[6], m20 = m[8], m21 = m[9], m22 = m[10];
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m10;
    out[4] = m11;
    out[5] = m12;
    out[6] = m20;
    out[7] = m21;
    out[8] = m22;
    return out;
}
/**
 * Extracts the left, right, bottom, top, near, far clipping planes from `projectionMat`.
 * @param out Row-major array of shape `(6, 4)` specifying for each of the left, right, bottom, top,
 *     near, far clipping planes the `a`, `b`, `c`, `d` coefficients such that
 *     `0 < a * x + b * y + c * z + d` if the point `x, y, z` is inside the half-space of the
 * clipping plane.
 * @param m Projection matrix
 */
function getFrustrumPlanes(out, m) {
    // http://web.archive.org/web/20120531231005/http://crazyjoke.free.fr/doc/3D/plane%20extraction.pdf
    const m00 = m[0], m10 = m[1], m20 = m[2], m30 = m[3], m01 = m[4], m11 = m[5], m21 = m[6], m31 = m[7], m02 = m[8], m12 = m[9], m22 = m[10], m32 = m[11], m03 = m[12], m13 = m[13], m23 = m[14], m33 = m[15];
    out[0] = m30 + m00; // left: a
    out[1] = m31 + m01; // left: b
    out[2] = m32 + m02; // left: c
    out[3] = m33 + m03; // left: d
    out[4] = m30 - m00; // right: a
    out[5] = m31 - m01; // right: b
    out[6] = m32 - m02; // right: c
    out[7] = m33 - m03; // right: d
    out[8] = m30 + m10; // bottom: a
    out[9] = m31 + m11; // bottom: b
    out[10] = m32 + m12; // bottom: c
    out[11] = m33 + m13; // bottom: d
    out[12] = m30 - m10; // top: a
    out[13] = m31 - m11; // top: b
    out[14] = m32 - m12; // top: c
    out[15] = m33 - m13; // top: d
    const nearA = m30 + m20; // near: a
    const nearB = m31 + m21; // near: b
    const nearC = m32 + m22; // near: c
    const nearD = m33 + m23; // near: d
    // Normalize near plane
    const nearNorm = Math.sqrt(nearA ** 2 + nearB ** 2 + nearC ** 2);
    out[16] = nearA / nearNorm;
    out[17] = nearB / nearNorm;
    out[18] = nearC / nearNorm;
    out[19] = nearD / nearNorm;
    out[20] = m30 - m20; // far: a
    out[21] = m31 - m21; // far: b
    out[22] = m32 - m22; // far: c
    out[23] = m33 - m23; // far: d
    return out;
}
/**
 * Checks whether the specified axis-aligned bounding box (AABB) intersects the view frustrum.
 *
 * @param clippingPlanes Array of length 24 specifying the clipping planes of the view frustrum, as
 *     computed by `getFrustrumPlanes`
 */
function isAABBVisible(xLower, yLower, zLower, xUpper, yUpper, zUpper, clippingPlanes) {
    for (let i = 0; i < 6; ++i) {
        const a = clippingPlanes[i * 4], b = clippingPlanes[i * 4 + 1], c = clippingPlanes[i * 4 + 2], d = clippingPlanes[i * 4 + 3];
        const sum = Math.max(a * xLower, a * xUpper) + Math.max(b * yLower, b * yUpper) +
            Math.max(c * zLower, c * zUpper) + d;
        if (sum < 0) {
            return false;
        }
    }
    return true;
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/util/hash.ts":
/*!*************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/util/hash.ts ***!
  \*************************************************************************************************/
/*! exports provided: simpleStringHash, murmurHash3_x86_32Mix, murmurHash3_x86_32Finalize, murmurHash3_x86_32Hash64Bits, murmurHash3_x86_128Hash64Bits */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "simpleStringHash", function() { return simpleStringHash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "murmurHash3_x86_32Mix", function() { return murmurHash3_x86_32Mix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "murmurHash3_x86_32Finalize", function() { return murmurHash3_x86_32Finalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "murmurHash3_x86_32Hash64Bits", function() { return murmurHash3_x86_32Hash64Bits; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "murmurHash3_x86_128Hash64Bits", function() { return murmurHash3_x86_128Hash64Bits; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This is a very simple string hash function.  It isn't secure, but
 * is suitable for sharding of requests.
 */
function simpleStringHash(s) {
    let h = 0;
    let length = s.length;
    for (let i = 0; i < length; ++i) {
        h = (h * 31 + s.charCodeAt(i)) | 0;
    }
    return h;
}
/**
 * MurmurHash3_x86_32 mixing function
 */
function murmurHash3_x86_32Mix(h, k) {
    k = Math.imul(k, 0xcc9e2d51) >>> 0;
    k = ((k << 15) | (k >>> 17)) >>> 0;
    k = Math.imul(k, 0x1b873593) >>> 0;
    h ^= k;
    h = ((h << 13) | (h >>> 19)) >>> 0;
    h = (Math.imul(h, 5) + 0xe6546b64) >>> 0;
    return h;
}
/**
 * MurmurHash3_x86_32 finalization function
 */
function murmurHash3_x86_32Finalize(h, len) {
    h ^= len;
    h ^= h >>> 16;
    h = Math.imul(h, 0x85ebca6b) >>> 0;
    h ^= h >>> 13;
    h *= 0xc2b2ae35;
    h ^= h >>> 16;
    return h >>> 0;
}
/**
 * MurmurHash3_x86_32, specialized for 8 bytes of input.
 */
function murmurHash3_x86_32Hash64Bits(seed, low, high) {
    let h = seed;
    h = murmurHash3_x86_32Mix(h, low);
    h = murmurHash3_x86_32Mix(h, high);
    return murmurHash3_x86_32Finalize(h, 8);
}
function murmurHash3_x86_128Mix(h) {
    h ^= h >>> 16;
    h = Math.imul(h, 0x85ebca6b);
    h ^= h >>> 13;
    h = Math.imul(h, 0xc2b2ae35);
    h ^= h >>> 16;
    return h;
}
function rotl32(x, r) {
    return (x << r) | (x >>> (32 - r));
}
/**
 * MurmurHash3_x86_128, specialized for 8 bytes of input.
 *
 * Only the low 8 bytes of output are returned.
 */
function murmurHash3_x86_128Hash64Bits(out, seed, low, high) {
    let h1 = seed, h2 = seed, h3 = seed, h4 = seed;
    const c1 = 0x239b961b;
    const c2 = 0xab0e9789;
    const c3 = 0x38b34ae5;
    // const c4 = 0xa1e38b93;
    let k2 = Math.imul(high, c2);
    k2 = rotl32(k2, 16);
    k2 = Math.imul(k2, c3);
    h2 ^= k2;
    let k1 = Math.imul(low, c1);
    k1 = rotl32(k1, 15);
    k1 = Math.imul(k1, c2);
    h1 ^= k1;
    const len = 8;
    h1 ^= len;
    h2 ^= len;
    h3 ^= len;
    h4 ^= len;
    h1 = (h1 + h2) >>> 0;
    h1 = (h1 + h3) >>> 0;
    h1 = (h1 + h4) >>> 0;
    h2 = (h2 + h1) >>> 0;
    h3 = (h3 + h1) >>> 0;
    h4 = (h4 + h1) >>> 0;
    h1 = murmurHash3_x86_128Mix(h1);
    h2 = murmurHash3_x86_128Mix(h2);
    h3 = murmurHash3_x86_128Mix(h3);
    h4 = murmurHash3_x86_128Mix(h4);
    h1 = (h1 + h2) >>> 0;
    h1 = (h1 + h3) >>> 0;
    h1 = (h1 + h4) >>> 0;
    h2 = (h2 + h1) >>> 0;
    // h3 = (h3 + h1) >>> 0;
    // h4 = (h4 + h1) >>> 0;
    out.low = h1;
    out.high = h2;
    return out;
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/util/http_request.ts":
/*!*********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/util/http_request.ts ***!
  \*********************************************************************************************************/
/*! exports provided: HttpError, fetchOk, responseArrayBuffer, responseJson, cancellableFetchOk, getByteRangeHeader, parseSpecialUrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpError", function() { return HttpError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fetchOk", function() { return fetchOk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "responseArrayBuffer", function() { return responseArrayBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "responseJson", function() { return responseJson; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cancellableFetchOk", function() { return cancellableFetchOk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getByteRangeHeader", function() { return getByteRangeHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseSpecialUrl", function() { return parseSpecialUrl; });
/* harmony import */ var neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/util/cancellation */ "../../../../../../neuroglancer/src/neuroglancer/util/cancellation.ts");
/* harmony import */ var neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/uint64 */ "../../../../../../neuroglancer/src/neuroglancer/util/uint64.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class HttpError extends Error {
    constructor(url, status, statusText) {
        let message = `Fetching ${JSON.stringify(url)} resulted in HTTP error ${status}`;
        if (statusText) {
            message += `: ${statusText}`;
        }
        message += '.';
        super(message);
        this.name = 'HttpError';
        this.message = message;
        this.url = url;
        this.status = status;
        this.statusText = statusText;
    }
    static fromResponse(response) {
        return new HttpError(response.url, response.status, response.statusText);
    }
}
/**
 * Issues a `fetch` request.
 *
 * If the request fails due to an HTTP status outside `[200, 300)`, throws an `HttpError`.  If the
 * request fails due to a network or CORS restriction, throws an `HttpError` with a `status` of `0`.
 */
async function fetchOk(input, init) {
    let response;
    try {
        response = await fetch(input, init);
    }
    catch (error) {
        if (error instanceof TypeError) {
            throw new HttpError('', 0, '');
        }
        throw error;
    }
    if (!response.ok)
        throw HttpError.fromResponse(response);
    return response;
}
function responseArrayBuffer(response) {
    return response.arrayBuffer();
}
function responseJson(response) {
    return response.json();
}
/**
 * Issues a `fetch` request in the same way as `fetchOk`, and returns the result of the promise
 * returned by `transformResponse`.
 *
 * Additionally, the request may be cancelled through `cancellationToken`.
 *
 * The `transformResponse` function should not do anything with the `Response` object after its
 * result becomes ready; otherwise, cancellation may not work as expected.
 */
async function cancellableFetchOk(input, init, transformResponse, cancellationToken = neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_0__["uncancelableToken"]) {
    if (cancellationToken === neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_0__["uncancelableToken"]) {
        const response = await fetchOk(input, init);
        return await transformResponse(response);
    }
    const abortController = new AbortController();
    const unregisterCancellation = cancellationToken.add(() => abortController.abort());
    try {
        const response = await fetchOk(input, init);
        return await transformResponse(response);
    }
    finally {
        unregisterCancellation();
    }
}
const tempUint64 = new neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_1__["Uint64"]();
function getByteRangeHeader(startOffset, endOffset) {
    let endOffsetStr;
    if (typeof endOffset === 'number') {
        endOffsetStr = `${endOffset - 1}`;
    }
    else {
        neuroglancer_util_uint64__WEBPACK_IMPORTED_MODULE_1__["Uint64"].decrement(tempUint64, endOffset);
        endOffsetStr = tempUint64.toString();
    }
    return { 'Range': `bytes=${startOffset}-${endOffsetStr}` };
}
/**
 * Parses a URL that may have a special protocol designation into a real URL.
 *
 * If the protocol is 'http' or 'https', the input string is returned as is.
 *
 * The special 'gs://bucket/path' syntax is supported for accessing Google Storage buckets.
 */
function parseSpecialUrl(url) {
    const urlProtocolPattern = /^([^:\/]+):\/\/([^\/]+)(\/.*)?$/;
    let match = url.match(urlProtocolPattern);
    if (match === null) {
        throw new Error(`Invalid URL: ${JSON.stringify(url)}`);
    }
    const protocol = match[1];
    if (protocol === 'gs') {
        const bucket = match[2];
        let path = match[3];
        if (path === undefined)
            path = '';
        return `https://storage.googleapis.com/${bucket}${path}`;
    }
    else if (protocol === 's3') {
        const bucket = match[2];
        let path = match[3];
        if (path === undefined)
            path = '';
        return `https://s3.amazonaws.com/${bucket}${path}`;
    }
    else if (protocol === 'matrix') {
        const bucket = match[2];
        let path = match[3];
        if (path === undefined)
            path = '';
        return `https://seungdata.princeton.edu/${bucket}${path}`;
    }
    return url;
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/util/json.ts":
/*!*************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/util/json.ts ***!
  \*************************************************************************************************/
/*! exports provided: verifyFloat, verifyFiniteFloat, verifyFinitePositiveFloat, parseXYZ, parseFiniteVec, parseIntVec, stableStringify, urlSafeStringifyString, urlSafeStringify, normalizeStringLiteral, urlSafeToJSON, jsonToUrlSafe, urlSafeParse, pythonLiteralToJSON, pythonLiteralParse, parseArray, parseFixedLengthArray, verifyObject, verifyArray, verifyInt, verifyPositiveInt, verifyNonnegativeInt, verifyMapKey, verifyString, verifyOptionalString, verifyOptionalInt, verifyOptionalNonnegativeInt, verifyOptionalPositiveInt, verifyOptionalBoolean, valueOr, verifyObjectProperty, verifyObjectAsMap, verifyFloat01, parseQueryStringParameters, verifyEnumString, verify3dVec, verify3dScale, verify3dDimensions, verifyStringArray, verifyBoolean */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verifyFloat", function() { return verifyFloat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verifyFiniteFloat", function() { return verifyFiniteFloat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verifyFinitePositiveFloat", function() { return verifyFinitePositiveFloat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseXYZ", function() { return parseXYZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseFiniteVec", function() { return parseFiniteVec; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseIntVec", function() { return parseIntVec; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stableStringify", function() { return stableStringify; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "urlSafeStringifyString", function() { return urlSafeStringifyString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "urlSafeStringify", function() { return urlSafeStringify; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalizeStringLiteral", function() { return normalizeStringLiteral; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "urlSafeToJSON", function() { return urlSafeToJSON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "jsonToUrlSafe", function() { return jsonToUrlSafe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "urlSafeParse", function() { return urlSafeParse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pythonLiteralToJSON", function() { return pythonLiteralToJSON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pythonLiteralParse", function() { return pythonLiteralParse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseArray", function() { return parseArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseFixedLengthArray", function() { return parseFixedLengthArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verifyObject", function() { return verifyObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verifyArray", function() { return verifyArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verifyInt", function() { return verifyInt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verifyPositiveInt", function() { return verifyPositiveInt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verifyNonnegativeInt", function() { return verifyNonnegativeInt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verifyMapKey", function() { return verifyMapKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verifyString", function() { return verifyString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verifyOptionalString", function() { return verifyOptionalString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verifyOptionalInt", function() { return verifyOptionalInt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verifyOptionalNonnegativeInt", function() { return verifyOptionalNonnegativeInt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verifyOptionalPositiveInt", function() { return verifyOptionalPositiveInt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verifyOptionalBoolean", function() { return verifyOptionalBoolean; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "valueOr", function() { return valueOr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verifyObjectProperty", function() { return verifyObjectProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verifyObjectAsMap", function() { return verifyObjectAsMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verifyFloat01", function() { return verifyFloat01; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseQueryStringParameters", function() { return parseQueryStringParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verifyEnumString", function() { return verifyEnumString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verify3dVec", function() { return verify3dVec; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verify3dScale", function() { return verify3dScale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verify3dDimensions", function() { return verify3dDimensions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verifyStringArray", function() { return verifyStringArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verifyBoolean", function() { return verifyBoolean; });
/* harmony import */ var neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/util/geom */ "../../../../../../neuroglancer/src/neuroglancer/util/geom.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function verifyFloat(obj) {
    let t = typeof obj;
    if (t === 'number' || t === 'string') {
        let x = parseFloat('' + obj);
        if (!Number.isNaN(x)) {
            return x;
        }
    }
    throw new Error(`Expected floating-point number, but received: ${JSON.stringify(obj)}.`);
}
function verifyFiniteFloat(obj) {
    let x = verifyFloat(obj);
    if (Number.isFinite(x)) {
        return x;
    }
    throw new Error(`Expected finite floating-point number, but received: ${x}.`);
}
function verifyFinitePositiveFloat(obj) {
    let x = verifyFiniteFloat(obj);
    if (x > 0) {
        return x;
    }
    throw new Error(`Expected positive finite floating-point number, but received: ${x}.`);
}
function parseXYZ(out, obj, validator = verifyFloat) {
    verifyObject(obj);
    out[0] = out[1] = out[2] = 0;
    for (const key of Object.keys(obj)) {
        switch (key) {
            case 'x':
                out[0] = validator(obj[key]);
                break;
            case 'y':
                out[1] = validator(obj[key]);
                break;
            case 'z':
                out[2] = validator(obj[key]);
                break;
            default:
                throw new Error(`Expected object to have keys ['x', 'y', 'z'], but received: ${JSON.stringify(obj)}.`);
        }
    }
    return out;
}
function parseFiniteVec(out, obj) {
    let length = out.length;
    if (!Array.isArray(obj) || obj.length !== length) {
        throw new Error('Incompatible sizes');
    }
    for (let i = 0; i < length; ++i) {
        if (!Number.isFinite(parseFloat(obj[i]))) {
            throw new Error('Non-finite value.');
        }
    }
    for (let i = 0; i < length; ++i) {
        out[i] = parseFloat(obj[i]);
    }
    return out;
}
function parseIntVec(out, obj) {
    let length = out.length;
    if (!Array.isArray(obj) || obj.length !== length) {
        throw new Error('Incompatible sizes.');
    }
    for (let i = 0; i < length; ++i) {
        let val = parseInt(obj[i], undefined);
        if (!Number.isInteger(val)) {
            throw new Error('Non-integer value.');
        }
    }
    for (let i = 0; i < length; ++i) {
        out[i] = parseInt(obj[i], undefined);
    }
    return out;
}
/**
 * Returns a JSON representation of x, with object keys sorted to ensure a
 * consistent result.
 */
function stableStringify(x) {
    if (typeof x === 'object') {
        if (x === null) {
            return 'null';
        }
        if (Array.isArray(x)) {
            let s = '[';
            let size = x.length;
            let i = 0;
            if (i < size) {
                s += stableStringify(x[i]);
                while (++i < size) {
                    s += ',';
                    s += stableStringify(x[i]);
                }
            }
            s += ']';
            return s;
        }
        let s = '{';
        let keys = Object.keys(x).sort();
        let i = 0;
        let size = keys.length;
        if (i < size) {
            let key = keys[i];
            s += JSON.stringify(key);
            s += ':';
            s += stableStringify(x[key]);
            while (++i < size) {
                s += ',';
                key = keys[i];
                s += JSON.stringify(key);
                s += ':';
                s += stableStringify(x[key]);
            }
        }
        s += '}';
        return s;
    }
    return JSON.stringify(x);
}
function swapQuotes(x) {
    return x.replace(/['"]/g, s => {
        return (s === '"' ? '\'' : '"');
    });
}
function urlSafeStringifyString(x) {
    return swapQuotes(JSON.stringify(swapQuotes(x)));
}
const URL_SAFE_COMMA = '_';
function urlSafeStringify(x) {
    if (typeof x === 'object') {
        if (x === null) {
            return 'null';
        }
        let toJSON = x['toJSON'];
        if (typeof toJSON === 'function') {
            return urlSafeStringify(toJSON.call(x));
        }
        if (Array.isArray(x)) {
            let s = '[';
            let size = x.length;
            let i = 0;
            if (i < size) {
                s += urlSafeStringify(x[i]);
                while (++i < size) {
                    s += URL_SAFE_COMMA;
                    s += urlSafeStringify(x[i]);
                }
            }
            s += ']';
            return s;
        }
        let s = '{';
        let keys = Object.keys(x);
        let first = true;
        for (let key of keys) {
            let value = x[key];
            if (value === undefined) {
                continue;
            }
            let valueString = urlSafeStringify(value);
            if (!valueString) {
                continue;
            }
            if (!first) {
                s += URL_SAFE_COMMA;
            }
            else {
                first = false;
            }
            s += urlSafeStringifyString(key);
            s += ':';
            s += valueString;
        }
        s += '}';
        return s;
    }
    if (typeof x === 'string') {
        return urlSafeStringifyString(x);
    }
    return JSON.stringify(x);
}
const SINGLE_QUOTE_STRING_PATTERN = /('(?:[^'\\]|(?:\\.))*')/;
const DOUBLE_QUOTE_STRING_PATTERN = /("(?:[^'\\]|(?:\\.))*")/;
const SINGLE_OR_DOUBLE_QUOTE_STRING_PATTERN = new RegExp(`${SINGLE_QUOTE_STRING_PATTERN.source}|${DOUBLE_QUOTE_STRING_PATTERN.source}`);
const DOUBLE_OR_SINGLE_QUOTE_STRING_PATTERN = new RegExp(`${DOUBLE_QUOTE_STRING_PATTERN.source}|${SINGLE_QUOTE_STRING_PATTERN.source}`);
const DOUBLE_QUOTE_PATTERN = /^((?:[^"'\\]|(?:\\[^']))*)("|\\')/;
const SINGLE_QUOTE_PATTERN = /^((?:[^"'\\]|(?:\\.))*)'/;
function convertStringLiteral(x, quoteInitial, quoteReplace, quoteSearch) {
    if (x.length >= 2 && x.charAt(0) === quoteInitial && x.charAt(x.length - 1) === quoteInitial) {
        let inner = x.substr(1, x.length - 2);
        let s = quoteReplace;
        while (inner.length > 0) {
            let m = inner.match(quoteSearch);
            if (m === null) {
                s += inner;
                break;
            }
            s += m[1];
            if (m[2] === quoteReplace) {
                // We received a single unescaped quoteReplace character.
                s += '\\';
                s += quoteReplace;
            }
            else {
                // We received "\\" + quoteInitial.  We need to remove the escaping.
                s += quoteInitial;
            }
            inner = inner.substr(m.index + m[0].length);
        }
        s += quoteReplace;
        return s;
    }
    return x;
}
/**
 * Converts a string literal delimited by either single or double quotes into a string literal
 * delimited by double quotes.
 */
function normalizeStringLiteral(x) {
    return convertStringLiteral(x, '\'', '"', DOUBLE_QUOTE_PATTERN);
}
// quoteChar: des
function convertJsonHelper(x, desiredCommaChar, desiredQuoteChar) {
    const commaSearch = /[&_,]/g;
    let quoteInitial;
    let quoteSearch;
    let stringLiteralPattern;
    if (desiredQuoteChar === '"') {
        quoteInitial = '\'';
        quoteSearch = DOUBLE_QUOTE_PATTERN;
        stringLiteralPattern = SINGLE_OR_DOUBLE_QUOTE_STRING_PATTERN;
    }
    else {
        quoteInitial = '"';
        quoteSearch = SINGLE_QUOTE_PATTERN;
        stringLiteralPattern = DOUBLE_OR_SINGLE_QUOTE_STRING_PATTERN;
    }
    let s = '';
    while (x.length > 0) {
        let m = x.match(stringLiteralPattern);
        let before;
        let replacement;
        if (m === null) {
            before = x;
            x = '';
            replacement = '';
        }
        else {
            before = x.substr(0, m.index);
            x = x.substr(m.index + m[0].length);
            let originalString = m[1];
            if (originalString !== undefined) {
                replacement =
                    convertStringLiteral(originalString, quoteInitial, desiredQuoteChar, quoteSearch);
            }
            else {
                replacement = m[2];
            }
        }
        s += before.replace(commaSearch, desiredCommaChar);
        s += replacement;
    }
    return s;
}
function urlSafeToJSON(x) {
    return convertJsonHelper(x, ',', '"');
}
function jsonToUrlSafe(x) {
    return convertJsonHelper(x, '_', '\'');
}
function urlSafeParse(x) {
    return JSON.parse(urlSafeToJSON(x));
}
// Converts a string containing a Python literal into a string containing an equivalent JSON
// literal.
function pythonLiteralToJSON(x) {
    let s = '';
    while (x.length > 0) {
        let m = x.match(SINGLE_OR_DOUBLE_QUOTE_STRING_PATTERN);
        let before;
        let replacement;
        if (m === null) {
            before = x;
            x = '';
            replacement = '';
        }
        else {
            before = x.substr(0, m.index);
            x = x.substr(m.index + m[0].length);
            let singleQuoteString = m[1];
            if (singleQuoteString !== undefined) {
                replacement = normalizeStringLiteral(singleQuoteString);
            }
            else {
                replacement = m[2];
            }
        }
        s += before.replace(/\(/g, '[')
            .replace(/\)/g, ']')
            .replace('True', 'true')
            .replace('False', 'false')
            .replace(/,\s*([\}\]])/g, '$1');
        s += replacement;
    }
    return s;
}
// Converts a string containing a Python literal into an equivalent JavaScript value.
function pythonLiteralParse(x) {
    return JSON.parse(pythonLiteralToJSON(x));
}
// Checks that `x' is an array, maps each element by parseElement.
function parseArray(x, parseElement) {
    if (!Array.isArray(x)) {
        throw new Error(`Expected array, but received: ${JSON.stringify(x)}.`);
    }
    return x.map(parseElement);
}
function parseFixedLengthArray(out, obj, parseElement) {
    const length = out.length;
    if (!Array.isArray(obj) || obj.length !== length) {
        throw new Error(`Expected length ${length} array, but received: ${JSON.stringify(obj)}.`);
    }
    for (let i = 0; i < length; ++i) {
        out[i] = parseElement(obj[i], i);
    }
    return out;
}
function verifyObject(obj) {
    if (typeof obj !== 'object' || obj == null || Array.isArray(obj)) {
        throw new Error(`Expected JSON object, but received: ${JSON.stringify(obj)}.`);
    }
    return obj;
}
function verifyArray(obj) {
    if (!Array.isArray(obj)) {
        throw new Error(`Expected array, but received: ${JSON.stringify(obj)}.`);
    }
    return obj;
}
function verifyInt(obj) {
    let result = parseInt(obj, 10);
    if (!Number.isInteger(result)) {
        throw new Error(`Expected integer, but received: ${JSON.stringify(obj)}.`);
    }
    return result;
}
function verifyPositiveInt(obj) {
    const result = verifyInt(obj);
    if (result <= 0) {
        throw new Error(`Expected positive integer, but received: ${result}.`);
    }
    return result;
}
function verifyNonnegativeInt(obj) {
    const result = verifyInt(obj);
    if (result < 0) {
        throw new Error(`Expected non-negative integer, but received: ${result}.`);
    }
    return result;
}
function verifyMapKey(obj, map) {
    let result = map.get(obj);
    if (result === undefined) {
        throw new Error(`Expected one of ${JSON.stringify(Array.from(map.keys()))}, ` +
            `but received: ${JSON.stringify(obj)}.`);
    }
    return result;
}
function verifyString(obj) {
    if (typeof obj !== 'string') {
        throw new Error(`Expected string, but received: ${JSON.stringify(obj)}.`);
    }
    return obj;
}
function verifyOptionalString(obj) {
    if (obj === undefined) {
        return undefined;
    }
    return verifyString(obj);
}
function verifyOptionalInt(obj) {
    if (obj === undefined) {
        return undefined;
    }
    return verifyInt(obj);
}
function verifyOptionalNonnegativeInt(obj) {
    if (obj === undefined) {
        return undefined;
    }
    return verifyNonnegativeInt(obj);
}
function verifyOptionalPositiveInt(obj) {
    if (obj === undefined) {
        return undefined;
    }
    return verifyPositiveInt(obj);
}
function verifyOptionalBoolean(obj) {
    if (obj === undefined) {
        return undefined;
    }
    if (typeof obj === 'boolean') {
        return obj;
    }
    else if (obj === 'true') {
        return true;
    }
    else if (obj === 'false') {
        return false;
    }
    else {
        throw new Error(`Expected string or boolean but received: ${JSON.stringify(obj)}`);
    }
}
function valueOr(value, defaultValue) {
    return value === undefined ? defaultValue : value;
}
function verifyObjectProperty(obj, propertyName, validator) {
    let value = obj.hasOwnProperty(propertyName) ? obj[propertyName] : undefined;
    try {
        return validator(value);
    }
    catch (parseError) {
        throw new Error(`Error parsing ${JSON.stringify(propertyName)} property: ${parseError.message}`);
    }
}
function verifyObjectAsMap(obj, validator) {
    verifyObject(obj);
    let map = new Map();
    for (let key of Object.keys(obj)) {
        try {
            map.set(key, validator(obj[key]));
        }
        catch (parseError) {
            throw new Error(`Error parsing value associated with key ${JSON.stringify(key)}: ${parseError.message}`);
        }
    }
    return map;
}
function verifyFloat01(obj) {
    if (typeof obj !== 'number' || !Number.isFinite(obj) || obj < 0 || obj > 1) {
        throw new Error(`Expected floating point number in [0,1], but received: ${JSON.stringify(obj)}.`);
    }
    return obj;
}
/**
 * The query string parameters may either be specified in the usual
 * 'name=value&otherName=otherValue' form or as (optionally urlSafe) JSON: '{"name":"value"}`.
 */
function parseQueryStringParameters(queryString) {
    if (queryString === '') {
        return {};
    }
    if (queryString.startsWith('{')) {
        return urlSafeParse(queryString);
    }
    else {
        let result = {};
        let parts = queryString.split(/[&;]/);
        for (let part of parts) {
            let m = part.match(/^([^=&;]+)=([^&;]*)$/);
            if (m === null) {
                throw new Error(`Invalid query string part: ${JSON.stringify(part)}.`);
            }
            result[m[1]] = decodeURIComponent(m[2]);
        }
        return result;
    }
}
/**
 * Verifies that `obj' is a string that, when converted to uppercase, matches a string property of
 * `enumType`.
 *
 * Note: TypeScript does not seem to allow better typing of the return type.
 *
 * @returns The corresponding numerical value.
 */
function verifyEnumString(obj, enumType) {
    if (typeof obj === 'string' && obj.match(/^[a-zA-Z]/) !== null) {
        obj = obj.toUpperCase();
        if (enumType.hasOwnProperty(obj)) {
            return enumType[obj];
        }
    }
    throw new Error(`Invalid enum value: ${JSON.stringify(obj)}.`);
}
function verify3dVec(obj) {
    return parseFixedLengthArray(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["vec3"].create(), obj, verifyFiniteFloat);
}
function verify3dScale(obj) {
    return parseFixedLengthArray(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["vec3"].create(), obj, verifyFinitePositiveFloat);
}
function verify3dDimensions(obj) {
    return parseFixedLengthArray(neuroglancer_util_geom__WEBPACK_IMPORTED_MODULE_0__["vec3"].create(), obj, verifyPositiveInt);
}
function verifyStringArray(a) {
    if (!Array.isArray(a)) {
        throw new Error(`Expected array, received: ${JSON.stringify(a)}.`);
    }
    for (let x of a) {
        if (typeof x !== 'string') {
            throw new Error(`Expected string, received: ${JSON.stringify(x)}.`);
        }
    }
    return a;
}
function verifyBoolean(x) {
    if (typeof x !== 'boolean') {
        throw new Error(`Expected boolean, received: ${JSON.stringify(x)}`);
    }
    return x;
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/util/linked_list.0.ts":
/*!**********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/util/linked_list.0.ts ***!
  \**********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// DO NOT EDIT.  Generated from templates/neuroglancer/util/linked_list.template.ts.
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* harmony default export */ __webpack_exports__["default"] = (class {
    static insertAfter(head, x) {
        let next = head.next0;
        x.next0 = next;
        x.prev0 = head;
        head.next0 = x;
        next.prev0 = x;
    }
    static insertBefore(head, x) {
        let prev = head.prev0;
        x.prev0 = prev;
        x.next0 = head;
        head.prev0 = x;
        prev.next0 = x;
    }
    static front(head) {
        let next = head.next0;
        if (next === head) {
            return null;
        }
        return next;
    }
    static back(head) {
        let next = head.prev0;
        if (next === head) {
            return null;
        }
        return next;
    }
    static pop(x) {
        let next = x.next0;
        let prev = x.prev0;
        next.prev0 = prev;
        prev.next0 = next;
        x.next0 = null;
        x.prev0 = null;
        return x;
    }
    static *iterator(head) {
        for (let x = head.next0; x !== head; x = x.next0) {
            yield x;
        }
    }
    static *reverseIterator(head) {
        for (let x = head.prev0; x !== head; x = x.prev0) {
            yield x;
        }
    }
    static initializeHead(head) {
        head.next0 = head.prev0 = head;
    }
});


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/util/linked_list.1.ts":
/*!**********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/util/linked_list.1.ts ***!
  \**********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// DO NOT EDIT.  Generated from templates/neuroglancer/util/linked_list.template.ts.
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* harmony default export */ __webpack_exports__["default"] = (class {
    static insertAfter(head, x) {
        let next = head.next1;
        x.next1 = next;
        x.prev1 = head;
        head.next1 = x;
        next.prev1 = x;
    }
    static insertBefore(head, x) {
        let prev = head.prev1;
        x.prev1 = prev;
        x.next1 = head;
        head.prev1 = x;
        prev.next1 = x;
    }
    static front(head) {
        let next = head.next1;
        if (next === head) {
            return null;
        }
        return next;
    }
    static back(head) {
        let next = head.prev1;
        if (next === head) {
            return null;
        }
        return next;
    }
    static pop(x) {
        let next = x.next1;
        let prev = x.prev1;
        next.prev1 = prev;
        prev.next1 = next;
        x.next1 = null;
        x.prev1 = null;
        return x;
    }
    static *iterator(head) {
        for (let x = head.next1; x !== head; x = x.next1) {
            yield x;
        }
    }
    static *reverseIterator(head) {
        for (let x = head.prev1; x !== head; x = x.prev1) {
            yield x;
        }
    }
    static initializeHead(head) {
        head.next1 = head.prev1 = head;
    }
});


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/util/memoize.ts":
/*!****************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/util/memoize.ts ***!
  \****************************************************************************************************/
/*! exports provided: Memoize, StringMemoize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Memoize", function() { return Memoize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StringMemoize", function() { return StringMemoize; });
/* harmony import */ var neuroglancer_util_disposable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/util/disposable */ "../../../../../../neuroglancer/src/neuroglancer/util/disposable.ts");
/* harmony import */ var neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/json */ "../../../../../../neuroglancer/src/neuroglancer/util/json.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class Memoize {
    constructor() {
        this.map = new Map();
    }
    /**
     * If getter throws an exception, no value is added.
     */
    get(key, getter) {
        let { map } = this;
        let obj = map.get(key);
        if (obj === undefined) {
            obj = getter();
            obj.registerDisposer(() => {
                map.delete(key);
            });
            map.set(key, obj);
        }
        else {
            obj.addRef();
        }
        return obj;
    }
}
class StringMemoize extends Memoize {
    get(x, getter) {
        if (typeof x !== 'string') {
            x = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_1__["stableStringify"])(x);
        }
        return super.get(x, getter);
    }
    getUncounted(x, getter) {
        return this.get(x, () => new neuroglancer_util_disposable__WEBPACK_IMPORTED_MODULE_0__["RefCountedValue"](getter())).value;
    }
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/util/npy.ts":
/*!************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/util/npy.ts ***!
  \************************************************************************************************/
/*! exports provided: NumpyArray, parseNpy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumpyArray", function() { return NumpyArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseNpy", function() { return parseNpy; });
/* harmony import */ var neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/util/data_type */ "../../../../../../neuroglancer/src/neuroglancer/util/data_type.ts");
/* harmony import */ var neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/endian */ "../../../../../../neuroglancer/src/neuroglancer/util/endian.ts");
/* harmony import */ var neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neuroglancer/util/json */ "../../../../../../neuroglancer/src/neuroglancer/util/json.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



const supportedDataTypes = new Map();
supportedDataTypes.set('|u1', {
    arrayConstructor: Uint8Array,
    fixEndianness: () => { },
    javascriptElementsPerArrayElement: 1,
    elementBytes: 1,
    dataType: neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_0__["DataType"].UINT8,
});
supportedDataTypes.set('|i1', {
    arrayConstructor: Uint8Array,
    fixEndianness: () => { },
    javascriptElementsPerArrayElement: 1,
    elementBytes: 1,
    dataType: neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_0__["DataType"].UINT8,
});
for (let [endiannessChar, endianness] of [
    ['<', neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_1__["Endianness"].LITTLE], ['>', neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_1__["Endianness"].BIG]
]) {
    // For now, treat both signed and unsigned integer types as unsigned.
    for (let typeChar of ['u', 'i']) {
        supportedDataTypes.set(`${endiannessChar}${typeChar}2`, {
            arrayConstructor: Uint16Array,
            elementBytes: 2,
            fixEndianness: array => {
                Object(neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_1__["convertEndian16"])(array, endianness);
            },
            javascriptElementsPerArrayElement: 1,
            dataType: neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_0__["DataType"].UINT16,
        });
        supportedDataTypes.set(`${endiannessChar}${typeChar}4`, {
            arrayConstructor: Uint32Array,
            elementBytes: 4,
            fixEndianness: array => {
                Object(neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_1__["convertEndian32"])(array, endianness);
            },
            javascriptElementsPerArrayElement: 1,
            dataType: neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_0__["DataType"].UINT32,
        });
        supportedDataTypes.set(`${endiannessChar}${typeChar}8`, {
            arrayConstructor: Uint32Array,
            elementBytes: 8,
            // We still maintain the low 32-bit value first.
            fixEndianness: array => {
                Object(neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_1__["convertEndian32"])(array, endianness);
            },
            javascriptElementsPerArrayElement: 2,
            dataType: neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_0__["DataType"].UINT64,
        });
    }
    supportedDataTypes.set(`${endiannessChar}f4`, {
        arrayConstructor: Float32Array,
        elementBytes: 4,
        fixEndianness: array => {
            Object(neuroglancer_util_endian__WEBPACK_IMPORTED_MODULE_1__["convertEndian32"])(array, endianness);
        },
        javascriptElementsPerArrayElement: 1,
        dataType: neuroglancer_util_data_type__WEBPACK_IMPORTED_MODULE_0__["DataType"].FLOAT32,
    });
}
class NumpyArray {
    constructor(data, shape, dataType, fortranOrder) {
        this.data = data;
        this.shape = shape;
        this.dataType = dataType;
        this.fortranOrder = fortranOrder;
    }
}
function parseNpy(x) {
    // Verify 6-byte magic sequence: 147, 78, 85, 77, 80, 89
    if (x[0] !== 147 || x[1] !== 78 || x[2] !== 85 || x[3] !== 77 || x[4] !== 80 || x[5] !== 89) {
        throw new Error('Data does not match npy format.');
    }
    const majorVersion = x[6], minorVersion = x[7];
    if (majorVersion !== 1 || minorVersion !== 0) {
        throw new Error(`Unsupported npy version ${majorVersion}.${minorVersion}`);
    }
    const dv = new DataView(x.buffer, x.byteOffset, x.byteLength);
    const headerLength = dv.getUint16(8, /*littleEndian=*/ true);
    const header = new TextDecoder('utf-8').decode(x.subarray(10, headerLength + 10));
    let headerObject;
    const dataOffset = headerLength + 10;
    try {
        headerObject = Object(neuroglancer_util_json__WEBPACK_IMPORTED_MODULE_2__["pythonLiteralParse"])(header);
    }
    catch (e) {
        throw new Error(`Failed to parse npy header: ${e}`);
    }
    const dtype = headerObject['descr'];
    let shape = headerObject['shape'];
    let numElements = 1;
    if (!Array.isArray(shape)) {
        throw new Error('Invalid shape ${JSON.stringify(shape)}');
    }
    for (let dim of shape) {
        if (typeof dim !== 'number') {
            throw new Error('Invalid shape ${JSON.stringify(shape)}');
        }
        numElements *= dim;
    }
    const supportedDataType = supportedDataTypes.get(dtype);
    if (supportedDataType === undefined) {
        throw new Error(`Unsupported numpy data type ${JSON.stringify(dtype)}`);
    }
    let { arrayConstructor, javascriptElementsPerArrayElement } = supportedDataType;
    const javascriptElements = javascriptElementsPerArrayElement * numElements;
    const totalDataBytes = arrayConstructor.BYTES_PER_ELEMENT * javascriptElements;
    if (totalDataBytes + dataOffset !== x.byteLength) {
        throw new Error('Expected length does not match length of data');
    }
    const data = new arrayConstructor(x.buffer, x.byteOffset + dataOffset, javascriptElements);
    supportedDataType.fixEndianness(data);
    return new NumpyArray(data, shape, supportedDataType, headerObject['fortran_order'] === true);
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/util/object_id.ts":
/*!******************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/util/object_id.ts ***!
  \******************************************************************************************************/
/*! exports provided: getObjectId */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getObjectId", function() { return getObjectId; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const OBJECT_ID_SYMBOL = Symbol('objectId');
let nextObjectId = 0;
/**
 * Returns a string that uniquely identifies a particular primitive value or object instance.
 */
function getObjectId(x) {
    if (x instanceof Object) {
        let id = x[OBJECT_ID_SYMBOL];
        if (id === undefined) {
            id = x[OBJECT_ID_SYMBOL] = nextObjectId++;
        }
        return `o${id}`;
    }
    else {
        return '' + JSON.stringify(x);
    }
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/util/pairing_heap.0.ts":
/*!***********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/util/pairing_heap.0.ts ***!
  \***********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Implementation; });
// DO NOT EDIT.  Generated from templates/neuroglancer/util/pairing_heap.template.ts.
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Pairing heap.
 *
 * The root node is the minimum element according to comparator.
 *
 * @final
 */
class Implementation {
    /**
     * @param compare Returns true iff a < b.
     */
    constructor(compare) {
        this.compare = compare;
    }
    meld(a, b) {
        if (b === null) {
            return a;
        }
        if (a === null) {
            return b;
        }
        let { compare } = this;
        if (compare(b, a)) {
            let temp = a;
            a = b;
            b = temp;
        }
        var aChild = a.child0;
        b.next0 = aChild;
        b.prev0 = a;
        if (aChild !== null) {
            aChild.prev0 = b;
        }
        a.child0 = b;
        return a;
    }
    combineChildren(node) {
        var cur = node.child0;
        if (cur === null) {
            return null;
        }
        // While in this function, we will use the nextProperty to create a
        // singly-linked list of pairwise-merged nodes that still need to be
        // merged together.
        let head = null;
        while (true) {
            let curNext = cur.next0;
            let next, m;
            if (curNext === null) {
                next = null;
                m = cur;
            }
            else {
                next = curNext.next0;
                m = this.meld(cur, curNext);
            }
            m.next0 = head;
            head = m;
            if (next === null) {
                break;
            }
            cur = next;
        }
        var root = head;
        head = head.next0;
        while (true) {
            if (head === null) {
                break;
            }
            let next = head.next0;
            root = this.meld(root, head);
            head = next;
        }
        root.prev0 = null;
        root.next0 = null;
        return root;
    }
    removeMin(root) {
        var newRoot = this.combineChildren(root);
        root.next0 = null;
        root.prev0 = null;
        root.child0 = null;
        return newRoot;
    }
    remove(root, node) {
        if (root === node) {
            return this.removeMin(root);
        }
        var prev = node.prev0;
        var next = node.next0;
        if (prev.child0 === node) {
            prev.child0 = next;
        }
        else {
            prev.next0 = next;
        }
        if (next !== null) {
            next.prev0 = prev;
        }
        let newRoot = this.meld(root, this.combineChildren(node));
        node.next0 = null;
        node.prev0 = null;
        node.child0 = null;
        return newRoot;
    }
    /**
     * Returns a new iterator over the entries in the heap.
     */
    *entries(root) {
        if (root !== null) {
            let child = root.child0;
            yield root;
            while (child !== null) {
                let next = child.next0;
                yield* this.entries(child);
                child = next;
            }
        }
    }
    /**
     * Returns a new iterator over the entries in the heap.  The entries
     * will be removed as they are iterated.
     */
    *removedEntries(root) {
        if (root !== null) {
            let child = root.child0;
            root.child0 = null;
            root.next0 = null;
            root.prev0 = null;
            yield root;
            while (child !== null) {
                let next = child.next0;
                child.child0 = null;
                child.next0 = null;
                child.prev0 = null;
                yield* this.entries(child);
                child = next;
            }
        }
    }
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/util/pairing_heap.1.ts":
/*!***********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/util/pairing_heap.1.ts ***!
  \***********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Implementation; });
// DO NOT EDIT.  Generated from templates/neuroglancer/util/pairing_heap.template.ts.
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Pairing heap.
 *
 * The root node is the minimum element according to comparator.
 *
 * @final
 */
class Implementation {
    /**
     * @param compare Returns true iff a < b.
     */
    constructor(compare) {
        this.compare = compare;
    }
    meld(a, b) {
        if (b === null) {
            return a;
        }
        if (a === null) {
            return b;
        }
        let { compare } = this;
        if (compare(b, a)) {
            let temp = a;
            a = b;
            b = temp;
        }
        var aChild = a.child1;
        b.next1 = aChild;
        b.prev1 = a;
        if (aChild !== null) {
            aChild.prev1 = b;
        }
        a.child1 = b;
        return a;
    }
    combineChildren(node) {
        var cur = node.child1;
        if (cur === null) {
            return null;
        }
        // While in this function, we will use the nextProperty to create a
        // singly-linked list of pairwise-merged nodes that still need to be
        // merged together.
        let head = null;
        while (true) {
            let curNext = cur.next1;
            let next, m;
            if (curNext === null) {
                next = null;
                m = cur;
            }
            else {
                next = curNext.next1;
                m = this.meld(cur, curNext);
            }
            m.next1 = head;
            head = m;
            if (next === null) {
                break;
            }
            cur = next;
        }
        var root = head;
        head = head.next1;
        while (true) {
            if (head === null) {
                break;
            }
            let next = head.next1;
            root = this.meld(root, head);
            head = next;
        }
        root.prev1 = null;
        root.next1 = null;
        return root;
    }
    removeMin(root) {
        var newRoot = this.combineChildren(root);
        root.next1 = null;
        root.prev1 = null;
        root.child1 = null;
        return newRoot;
    }
    remove(root, node) {
        if (root === node) {
            return this.removeMin(root);
        }
        var prev = node.prev1;
        var next = node.next1;
        if (prev.child1 === node) {
            prev.child1 = next;
        }
        else {
            prev.next1 = next;
        }
        if (next !== null) {
            next.prev1 = prev;
        }
        let newRoot = this.meld(root, this.combineChildren(node));
        node.next1 = null;
        node.prev1 = null;
        node.child1 = null;
        return newRoot;
    }
    /**
     * Returns a new iterator over the entries in the heap.
     */
    *entries(root) {
        if (root !== null) {
            let child = root.child1;
            yield root;
            while (child !== null) {
                let next = child.next1;
                yield* this.entries(child);
                child = next;
            }
        }
    }
    /**
     * Returns a new iterator over the entries in the heap.  The entries
     * will be removed as they are iterated.
     */
    *removedEntries(root) {
        if (root !== null) {
            let child = root.child1;
            root.child1 = null;
            root.next1 = null;
            root.prev1 = null;
            yield root;
            while (child !== null) {
                let next = child.next1;
                child.child1 = null;
                child.next1 = null;
                child.prev1 = null;
                yield* this.entries(child);
                child = next;
            }
        }
    }
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/util/random.ts":
/*!***************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/util/random.ts ***!
  \***************************************************************************************************/
/*! exports provided: getRandomHexString, getRandomValues, getRandomUint32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRandomHexString", function() { return getRandomHexString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRandomValues", function() { return getRandomValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRandomUint32", function() { return getRandomUint32; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function getRandomHexString(numBits = 128) {
    const numValues = Math.ceil(numBits / 32);
    const data = new Uint32Array(numValues);
    crypto.getRandomValues(data);
    let s = '';
    for (let i = 0; i < numValues; ++i) {
        s += ('00000000' + data[i].toString(16)).slice(-8);
    }
    return s;
}
/**
 * Calls crypto.getRandomValues as many times as needed to fill array.
 */
function getRandomValues(array) {
    let byteArray = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);
    const blockSize = 65536;
    for (let i = 0, length = byteArray.length; i < length; i += blockSize) {
        crypto.getRandomValues(byteArray.subarray(i, Math.min(length, i + blockSize)));
    }
    return array;
}
function getRandomUint32() {
    const data = new Uint32Array(1);
    crypto.getRandomValues(data);
    return data[0];
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/util/signal.ts":
/*!***************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/util/signal.ts ***!
  \***************************************************************************************************/
/*! exports provided: Signal, NullarySignal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Signal", function() { return Signal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NullarySignal", function() { return NullarySignal; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @file Simple signal dispatch mechanism.
 */
/**
 * This class provides a simple signal dispatch mechanism.  Handlers can be added, and then the
 * `dispatch` method calls all of them.
 *
 * If specified, Callable should be an interface containing only a callable signature returning
 * void.  Due to limitations in TypeScript, any interface containing a callable signature will be
 * accepted by the compiler, but the resultant signature of `dispatch` will not be correct.
 */
class Signal {
    constructor() {
        this.handlers = new Set();
        /**
         * Count of number of times this signal has been dispatched.  This is incremented each time
         * `dispatch` is called prior to invoking the handlers.
         */
        this.count = 0;
        const obj = this;
        this.dispatch = function () {
            ++obj.count;
            obj.handlers.forEach(handler => {
                handler.apply(this, arguments);
            });
        };
    }
    /**
     * Add a handler function.  If `dispatch` is currently be called, then the new handler will be
     * called before `dispatch` returns.
     *
     * @param handler The handler function to add.
     *
     * @return A function that unregisters the handler.
     */
    add(handler) {
        this.handlers.add(handler);
        return () => {
            return this.remove(handler);
        };
    }
    /**
     * Remove a handler function.  If `dispatch` is currently be called and the new handler has not
     * yet been called, then it will not be called.
     *
     * @param handler Handler to remove.
     * @return `true` if the handler was present, `false` otherwise.
     */
    remove(handler) {
        return this.handlers.delete(handler);
    }
    /**
     * Disposes of resources.  No methods, including `dispatch`, may be invoked afterwards.
     */
    dispose() {
        this.handlers = undefined;
    }
}
/**
 * Simple specialization of Signal for the common case of a nullary handler signature.
 */
class NullarySignal extends Signal {
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/util/uint64.ts":
/*!***************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/util/uint64.ts ***!
  \***************************************************************************************************/
/*! exports provided: Uint64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint64", function() { return Uint64; });
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const randomTempBuffer = new Uint32Array(2);
const trueBase = 0x100000000;
let stringConversionData = [];
for (let base = 2; base <= 36; ++base) {
    let lowDigits = Math.floor(32 / Math.log2(base));
    let lowBase = Math.pow(base, lowDigits);
    let patternString = `^[0-${String.fromCharCode('0'.charCodeAt(0) + Math.min(9, base - 1))}`;
    if (base > 10) {
        patternString += `a-${String.fromCharCode('a'.charCodeAt(0) + base - 11)}`;
        patternString += `A-${String.fromCharCode('A'.charCodeAt(0) + base - 11)}`;
    }
    let maxDigits = Math.ceil(64 / Math.log2(base));
    patternString += `]{1,${maxDigits}}$`;
    let pattern = new RegExp(patternString);
    stringConversionData[base] = { lowDigits, lowBase, pattern };
}
/**
 * Returns the high 32 bits of the result of the 32-bit integer multiply `a` and `b`.
 *
 * The low 32-bits can be obtained using the built-in `Math.imul` function.
 */
function uint32MultiplyHigh(a, b) {
    a >>>= 0;
    b >>>= 0;
    const a00 = a & 0xFFFF, a16 = a >>> 16;
    const b00 = b & 0xFFFF, b16 = b >>> 16;
    let c00 = a00 * b00;
    let c16 = (c00 >>> 16) + (a16 * b00);
    let c32 = c16 >>> 16;
    c16 = (c16 & 0xFFFF) + (a00 * b16);
    c32 += c16 >>> 16;
    let c48 = c32 >>> 16;
    c32 = (c32 & 0xFFFF) + (a16 * b16);
    c48 += c32 >>> 16;
    return (((c48 & 0xFFFF) << 16) | (c32 & 0xFFFF)) >>> 0;
}
class Uint64 {
    constructor(low = 0, high = 0) {
        this.low = low;
        this.high = high;
    }
    clone() {
        return new Uint64(this.low, this.high);
    }
    assign(x) {
        this.low = x.low;
        this.high = x.high;
    }
    toString(base = 10) {
        let vLow = this.low, vHigh = this.high;
        if (vHigh === 0) {
            return vLow.toString(base);
        }
        vHigh *= trueBase;
        let { lowBase, lowDigits } = stringConversionData[base];
        let vHighExtra = vHigh % lowBase;
        vHigh = Math.floor(vHigh / lowBase);
        vLow += vHighExtra;
        vHigh += Math.floor(vLow / lowBase);
        vLow = vLow % lowBase;
        let vLowStr = vLow.toString(base);
        return vHigh.toString(base) + '0'.repeat(lowDigits - vLowStr.length) + vLowStr;
    }
    /**
     * Returns true if a is strictly less than b.
     */
    static less(a, b) {
        return a.high < b.high || (a.high === b.high && a.low < b.low);
    }
    /**
     * Returns a negative number if a is strictly less than b, 0 if a is equal to b, or a positive
     * number if a is strictly greater than b.
     */
    static compare(a, b) {
        return (a.high - b.high) || (a.low - b.low);
    }
    static equal(a, b) {
        return a.low === b.low && a.high === b.high;
    }
    static min(a, b) {
        return Uint64.less(a, b) ? a : b;
    }
    static max(a, b) {
        return Uint64.less(a, b) ? b : a;
    }
    static random() {
        crypto.getRandomValues(randomTempBuffer);
        return new Uint64(randomTempBuffer[0], randomTempBuffer[1]);
    }
    tryParseString(s, base = 10) {
        const { lowDigits, lowBase, pattern } = stringConversionData[base];
        if (!pattern.test(s)) {
            return false;
        }
        if (s.length <= lowDigits) {
            this.low = parseInt(s, base);
            this.high = 0;
            return true;
        }
        const splitPoint = s.length - lowDigits;
        const lowPrime = parseInt(s.substr(splitPoint), base);
        const highPrime = parseInt(s.substr(0, splitPoint), base);
        let high, low;
        if (lowBase === trueBase) {
            high = highPrime;
            low = lowPrime;
        }
        else {
            const highRemainder = Math.imul(highPrime, lowBase) >>> 0;
            high = uint32MultiplyHigh(highPrime, lowBase) +
                (Math.imul(Math.floor(highPrime / trueBase), lowBase) >>> 0);
            low = lowPrime + highRemainder;
            if (low >= trueBase) {
                ++high;
                low -= trueBase;
            }
        }
        if ((low >>> 0) !== low || ((high >>> 0) !== high)) {
            return false;
        }
        this.low = low;
        this.high = high;
        return true;
    }
    parseString(s, base = 10) {
        if (!this.tryParseString(s, base)) {
            throw new Error(`Failed to parse string as uint64 value: ${JSON.stringify(s)}.`);
        }
        return this;
    }
    static parseString(s, base = 10) {
        let x = new Uint64();
        return x.parseString(s, base);
    }
    valid() {
        let { low, high } = this;
        return ((low >>> 0) === low) && ((high >>> 0) === high);
    }
    toJSON() {
        return this.toString();
    }
    static lshift(out, input, bits) {
        const { low, high } = input;
        if (bits === 0) {
            out.low = low;
            out.high = high;
        }
        else if (bits < 32) {
            out.low = low << bits;
            out.high = (high << bits) | (low >>> (32 - bits));
        }
        else {
            out.low = 0;
            out.high = low << (bits - 32);
        }
        return out;
    }
    static rshift(out, input, bits) {
        const { low, high } = input;
        if (bits === 0) {
            out.low = low;
            out.high = high;
        }
        else if (bits < 32) {
            out.low = (low >>> bits) | (high << (32 - bits));
            out.high = high >>> bits;
        }
        else {
            out.low = high >>> (bits - 32);
            out.high = 0;
        }
        return out;
    }
    static or(out, a, b) {
        out.low = a.low | b.low;
        out.high = a.high | b.high;
        return out;
    }
    static xor(out, a, b) {
        out.low = a.low ^ b.low;
        out.high = a.high ^ b.high;
        return out;
    }
    static and(out, a, b) {
        out.low = a.low & b.low;
        out.high = a.high & b.high;
        return out;
    }
    static add(out, a, b) {
        let lowSum = a.low + b.low;
        let highSum = a.high + b.high;
        const low = lowSum >>> 0;
        if (low !== lowSum)
            highSum += 1;
        out.low = low;
        out.high = highSum >>> 0;
        return out;
    }
    static addUint32(out, a, b) {
        let lowSum = a.low + b;
        let highSum = a.high;
        const low = lowSum >>> 0;
        if (low !== lowSum)
            highSum += 1;
        out.low = low;
        out.high = highSum >>> 0;
        return out;
    }
    static decrement(out, input) {
        let { low, high } = input;
        if (low === 0) {
            high -= 1;
        }
        out.low = (low - 1) >>> 0;
        out.high = high >>> 0;
        return out;
    }
    static increment(out, input) {
        let { low, high } = input;
        if (low === 0xFFFFFFFF)
            high += 1;
        out.low = (low + 1) >>> 0;
        out.high = high >>> 0;
        return out;
    }
    static subtract(out, a, b) {
        let lowSum = a.low - b.low;
        let highSum = a.high - b.high;
        const low = lowSum >>> 0;
        if (low !== lowSum)
            highSum -= 1;
        out.low = low;
        out.high = highSum >>> 0;
        return out;
    }
    static multiplyUint32(out, a, b) {
        const { low, high } = a;
        out.low = Math.imul(low, b) >>> 0;
        out.high = (Math.imul(high, b) + uint32MultiplyHigh(low, b)) >>> 0;
        return out;
    }
    static lowMask(out, bits) {
        if (bits <= 32) {
            out.high = 0;
            out.low = 0xffffffff >>> (32 - bits);
        }
        else {
            out.high = 0xffffffff >>> (bits - 32);
            out.low = 0xffffffff;
        }
        return out;
    }
}
Uint64.ZERO = new Uint64(0, 0);
Uint64.ONE = new Uint64(1, 0);


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/util/zorder.ts":
/*!***************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/util/zorder.ts ***!
  \***************************************************************************************************/
/*! exports provided: getOctreeChildIndex, decodeZIndexCompressed, encodeZIndexCompressed, zorder3LessThan */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOctreeChildIndex", function() { return getOctreeChildIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeZIndexCompressed", function() { return decodeZIndexCompressed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encodeZIndexCompressed", function() { return encodeZIndexCompressed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zorder3LessThan", function() { return zorder3LessThan; });
/**
 * @license
 * Copyright 2019 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function getOctreeChildIndex(x, y, z) {
    return (x & 1) | ((y << 1) & 2) | ((z << 2) & 4);
}
/**
 * Decodes a "compressed" 3-d morton index.
 *
 * Decoded bit `i` of `x`, `y`, and `z` is at bit `i + min(i, yBits) + min(i, zBits)`, `i + min(i +
 * 1, xBits) + min(i, zBits)`, and `i + min(i + 1, xBits) + min(i + 1, zBits)` of `zindex`,
 * respectively, for `i` in `[0, xBits)`, `[0, yBits)`, `[0, zBits)`, respectively.
 */
function decodeZIndexCompressed(zindex, xBits, yBits, zBits) {
    const maxCoordBits = Math.max(xBits, yBits, zBits);
    let inputBit = 0;
    let inputValue = zindex.low;
    let x = 0, y = 0, z = 0;
    for (let coordBit = 0; coordBit < maxCoordBits; ++coordBit) {
        if (coordBit < xBits) {
            const bit = (inputValue >>> inputBit) & 1;
            x |= (bit << coordBit);
            if (inputBit === 31) {
                inputBit = 0;
                inputValue = zindex.high;
            }
            else {
                ++inputBit;
            }
        }
        if (coordBit < yBits) {
            const bit = (inputValue >>> inputBit) & 1;
            y |= (bit << coordBit);
            if (inputBit === 31) {
                inputBit = 0;
                inputValue = zindex.high;
            }
            else {
                ++inputBit;
            }
        }
        if (coordBit < zBits) {
            const bit = (inputValue >>> inputBit) & 1;
            z |= (bit << coordBit);
            if (inputBit === 31) {
                inputBit = 0;
                inputValue = zindex.high;
            }
            else {
                ++inputBit;
            }
        }
    }
    return Uint32Array.of(x, y, z);
}
function encodeZIndexCompressed(zindex, xBits, yBits, zBits, x, y, z) {
    const maxBits = Math.max(xBits, yBits, zBits);
    let outputBit = 0;
    let outputNum = 0;
    let isHigh = false;
    function writeBit(b) {
        outputNum |= (b & 1) << outputBit;
        if (++outputBit === 32) {
            zindex.low = outputNum;
            outputNum = 0;
            outputBit = 0;
            isHigh = true;
        }
    }
    for (let bit = 0; bit < maxBits; ++bit) {
        if (bit < xBits) {
            writeBit((x >> bit) & 1);
        }
        if (bit < yBits) {
            writeBit((y >> bit) & 1);
        }
        if (bit < zBits) {
            writeBit((z >> bit) & 1);
        }
    }
    if (isHigh) {
        zindex.high = outputNum;
    }
    else {
        zindex.high = 0;
        zindex.low = outputNum;
    }
    return zindex;
}
function lessMsb(a, b) {
    return a < b && a < (a ^ b);
}
/**
 * Returns `true` if `(x0, y0, z0)` occurs before `(x1, y1, z1)` in Z-curve order.
 */
function zorder3LessThan(x0, y0, z0, x1, y1, z1) {
    let mostSignificant0 = z0, mostSignificant1 = z1;
    if (lessMsb(mostSignificant0 ^ mostSignificant1, y0 ^ y1)) {
        mostSignificant0 = y0;
        mostSignificant1 = y1;
    }
    if (lessMsb(mostSignificant0 ^ mostSignificant1, x0 ^ x1)) {
        mostSignificant0 = x0;
        mostSignificant1 = x1;
    }
    return mostSignificant0 < mostSignificant1;
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/visibility_priority/backend.ts":
/*!*******************************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/visibility_priority/backend.ts ***!
  \*******************************************************************************************************************/
/*! exports provided: withSharedVisibility, getPriorityTier, getBasePriority */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "withSharedVisibility", function() { return withSharedVisibility; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPriorityTier", function() { return getPriorityTier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getBasePriority", function() { return getBasePriority; });
/* harmony import */ var neuroglancer_shared_watchable_value__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/shared_watchable_value */ "../../../../../../neuroglancer/src/neuroglancer/shared_watchable_value.ts");
/* harmony import */ var neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/chunk_manager/base */ "../../../../../../neuroglancer/src/neuroglancer/chunk_manager/base.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Mixin for adding a visibility shared property to a ChunkRequester.  Calls
 * `this.chunkManager.scheduleUpdateChunkPriorities()` when visibility changes.
 */
function withSharedVisibility(Base) {
    return class extends Base {
        constructor(...args) {
            super(...args);
            const rpc = args[0];
            const options = args[1];
            this.visibility = rpc.get(options['visibility']);
            this.registerDisposer(this.visibility.changed.add(() => this.chunkManager.scheduleUpdateChunkPriorities()));
        }
    };
}
/**
 * Computes the ChunkPriorityTier for the given `visibility` value.
 *
 * A value of `Number.POSITIVE_INFINITY` means `VISIBLE`.  Any other value means `PREFETCH`.
 */
function getPriorityTier(visibility) {
    return visibility === Number.POSITIVE_INFINITY ? neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__["ChunkPriorityTier"].VISIBLE :
        neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__["ChunkPriorityTier"].PREFETCH;
}
/**
 * Computes the base priority for the given `visibility` value.  If the value is
 * `Number.POSTIVE_INFINITY`, corresponding to actual visibility, the base priority is 0.
 * Otherwise, the value is interpreted as the prefetch priority (higher means higher priority), and
 * the base priority is equal to the product of this value and `PREFETCH_PRIORITY_MULTIPLIER`.
 */
function getBasePriority(visibility) {
    return (visibility === Number.POSITIVE_INFINITY ? 0 : visibility * neuroglancer_chunk_manager_base__WEBPACK_IMPORTED_MODULE_1__["PREFETCH_PRIORITY_MULTIPLIER"]);
}


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts":
/*!**************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/worker_rpc.ts ***!
  \**************************************************************************************************/
/*! exports provided: registerRPC, RPCError, registerPromiseRPC, RPC, SharedObject, initializeSharedObjectCounterpart, SharedObjectCounterpart, registerSharedObjectOwner, registerSharedObject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerRPC", function() { return registerRPC; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RPCError", function() { return RPCError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerPromiseRPC", function() { return registerPromiseRPC; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RPC", function() { return RPC; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharedObject", function() { return SharedObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initializeSharedObjectCounterpart", function() { return initializeSharedObjectCounterpart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharedObjectCounterpart", function() { return SharedObjectCounterpart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerSharedObjectOwner", function() { return registerSharedObjectOwner; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerSharedObject", function() { return registerSharedObject; });
/* harmony import */ var neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/util/cancellation */ "../../../../../../neuroglancer/src/neuroglancer/util/cancellation.ts");
/* harmony import */ var neuroglancer_util_disposable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! neuroglancer/util/disposable */ "../../../../../../neuroglancer/src/neuroglancer/util/disposable.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const IS_WORKER = !(typeof Window !== 'undefined' && self instanceof Window);
const DEBUG = false;
const DEBUG_MESSAGES = false;
const PROMISE_RESPONSE_ID = 'rpc.promise.response';
const PROMISE_CANCEL_ID = 'rpc.promise.cancel';
var handlers = new Map();
function registerRPC(key, handler) {
    handlers.set(key, handler);
}
class RPCError extends Error {
    constructor(name, message) {
        super(message);
        this.name = name;
        this.message = message;
    }
}
function registerPromiseRPC(key, handler) {
    registerRPC(key, function (x) {
        let id = x['id'];
        const cancellationToken = new neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_0__["CancellationTokenSource"]();
        let promise = handler.call(this, x, cancellationToken);
        this.set(id, { promise, cancellationToken });
        promise.then(({ value, transfers }) => {
            this.delete(id);
            this.invoke(PROMISE_RESPONSE_ID, { 'id': id, 'value': value }, transfers);
        }, error => {
            this.delete(id);
            this.invoke(PROMISE_RESPONSE_ID, { 'id': id, 'error': error.message, 'errorName': error.name });
        });
    });
}
registerRPC(PROMISE_CANCEL_ID, function (x) {
    let id = x['id'];
    const request = this.get(id);
    if (request !== undefined) {
        let { cancellationToken } = request;
        cancellationToken.cancel();
    }
});
registerRPC(PROMISE_RESPONSE_ID, function (x) {
    let id = x['id'];
    let { resolve, reject } = this.get(id);
    this.delete(id);
    if (x.hasOwnProperty('value')) {
        resolve(x['value']);
    }
    else {
        const errorName = x['errorName'];
        if (errorName === neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_0__["CANCELED"].name) {
            reject(neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_0__["CANCELED"]);
        }
        else {
            reject(new RPCError(x['errorName'], x['error']));
        }
    }
});
const INITIAL_RPC_ID = IS_WORKER ? -1 : 0;
class RPC {
    constructor(target) {
        this.target = target;
        this.objects = new Map();
        this.nextId = INITIAL_RPC_ID;
        target.onmessage = (e) => {
            let data = e.data;
            if (DEBUG_MESSAGES) {
                console.log('Received message', data);
            }
            handlers.get(data.functionName).call(this, data);
        };
    }
    get numObjects() {
        return this.objects.size;
    }
    set(id, value) {
        this.objects.set(id, value);
    }
    delete(id) {
        this.objects.delete(id);
    }
    get(id) {
        return this.objects.get(id);
    }
    getRef(x) {
        let rpcId = x['id'];
        let obj = this.get(rpcId);
        obj.referencedGeneration = x['gen'];
        obj.addRef();
        return obj;
    }
    invoke(name, x, transfers) {
        x.functionName = name;
        if (DEBUG_MESSAGES) {
            console.trace('Sending message', x);
        }
        this.target.postMessage(x, transfers);
    }
    promiseInvoke(name, x, cancellationToken = neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_0__["uncancelableToken"], transfers) {
        return Object(neuroglancer_util_cancellation__WEBPACK_IMPORTED_MODULE_0__["makeCancelablePromise"])(cancellationToken, (resolve, reject, token) => {
            const id = x['id'] = this.newId();
            this.set(id, { resolve, reject });
            this.invoke(name, x, transfers);
            token.add(() => {
                this.invoke(PROMISE_CANCEL_ID, { 'id': id });
            });
        });
    }
    newId() {
        return IS_WORKER ? this.nextId-- : this.nextId++;
    }
}
class SharedObject extends neuroglancer_util_disposable__WEBPACK_IMPORTED_MODULE_1__["RefCounted"] {
    constructor() {
        super(...arguments);
        this.rpc = null;
        this.rpcId = null;
    }
    initializeSharedObject(rpc, rpcId = rpc.newId()) {
        this.rpc = rpc;
        this.rpcId = rpcId;
        this.isOwner = false;
        rpc.set(rpcId, this);
    }
    initializeCounterpart(rpc, options = {}) {
        this.initializeSharedObject(rpc);
        this.unreferencedGeneration = 0;
        this.referencedGeneration = 0;
        this.isOwner = true;
        options['id'] = this.rpcId;
        options['type'] = this.RPC_TYPE_ID;
        rpc.invoke('SharedObject.new', options);
    }
    dispose() {
        super.dispose();
    }
    /**
     * Precondition: this.isOwner === true.
     */
    addCounterpartRef() {
        return { 'id': this.rpcId, 'gen': ++this.referencedGeneration };
    }
    refCountReachedZero() {
        if (this.isOwner === true) {
            if (this.referencedGeneration === this.unreferencedGeneration) {
                this.ownerDispose();
            }
        }
        else if (this.isOwner === false) {
            this.rpc.invoke('SharedObject.refCountReachedZero', { 'id': this.rpcId, 'gen': this.referencedGeneration });
        }
        else {
            super.refCountReachedZero();
        }
    }
    /**
     * Precondition: this.isOwner === true.
     */
    ownerDispose() {
        if (DEBUG) {
            console.log(`[${IS_WORKER}] #rpc object = ${this.rpc.numObjects}`);
        }
        let { rpc, rpcId } = this;
        super.refCountReachedZero();
        rpc.delete(rpcId);
        rpc.invoke('SharedObject.dispose', { 'id': rpcId });
    }
    /**
     * Precondition: this.isOwner === true.
     *
     * This should be called when the counterpart's refCount is decremented and reaches zero.
     */
    counterpartRefCountReachedZero(generation) {
        this.unreferencedGeneration = generation;
        if (this.refCount === 0 && generation === this.referencedGeneration) {
            this.ownerDispose();
        }
    }
}
function initializeSharedObjectCounterpart(obj, rpc, options = {}) {
    if (rpc != null) {
        obj.initializeSharedObject(rpc, options['id']);
    }
}
/**
 * Base class for defining a SharedObject type that will never be owned.
 */
class SharedObjectCounterpart extends SharedObject {
    constructor(rpc, options = {}) {
        super();
        initializeSharedObjectCounterpart(this, rpc, options);
    }
}
registerRPC('SharedObject.dispose', function (x) {
    let obj = this.get(x['id']);
    if (obj.refCount !== 0) {
        throw new Error(`Attempted to dispose object with non-zero reference count.`);
    }
    if (DEBUG) {
        console.log(`[${IS_WORKER}] #rpc objects: ${this.numObjects}`);
    }
    obj.disposed();
    this.delete(obj.rpcId);
    obj.rpcId = null;
    obj.rpc = null;
});
registerRPC('SharedObject.refCountReachedZero', function (x) {
    let obj = this.get(x['id']);
    let generation = x['gen'];
    obj.counterpartRefCountReachedZero(generation);
});
const sharedObjectConstructors = new Map();
/**
 * Register a class as a SharedObject owner type under the specified identifier.
 *
 * This is intended to be used as a decorator.
 */
function registerSharedObjectOwner(identifier) {
    return (constructorFunction) => {
        constructorFunction.prototype.RPC_TYPE_ID = identifier;
    };
}
/**
 * Register a class as a SharedObject counterpart type under the specified identifier.
 *
 * This is intended to be used as a decorator.
 *
 * Also register the type as a SharedObject owner, which is useful if this type is also used as a
 * SharedObject owner.
 */
function registerSharedObject(identifier) {
    return (constructorFunction) => {
        if (identifier !== undefined) {
            constructorFunction.prototype.RPC_TYPE_ID = identifier;
        }
        else {
            identifier = constructorFunction.prototype.RPC_TYPE_ID;
            if (identifier === undefined) {
                throw new Error('RPC_TYPE_ID should have already been defined');
            }
        }
        sharedObjectConstructors.set(identifier, constructorFunction);
    };
}
registerRPC('SharedObject.new', function (x) {
    let rpc = this;
    let typeName = x['type'];
    let constructorFunction = sharedObjectConstructors.get(typeName);
    let obj = new constructorFunction(rpc, x);
    // Counterpart objects start with a reference count of zero.
    --obj.refCount;
});


/***/ }),

/***/ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc_context.ts":
/*!**********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/src/neuroglancer/worker_rpc_context.ts ***!
  \**********************************************************************************************************/
/*! exports provided: rpc */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rpc", function() { return rpc; });
/* harmony import */ var neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neuroglancer/worker_rpc */ "../../../../../../neuroglancer/src/neuroglancer/worker_rpc.ts");
/**
 * @license
 * Copyright 2016 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var rpc = new neuroglancer_worker_rpc__WEBPACK_IMPORTED_MODULE_0__["RPC"](self);
self.rpc = rpc;


/***/ }),

/***/ "../../../../../../neuroglancer/third_party/draco/draco_decoder.wasm":
/*!********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/third_party/draco/draco_decoder.wasm ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "draco_decoder.wasm";

/***/ }),

/***/ "../../../../../../neuroglancer/third_party/draco/draco_loader.js":
/*!*****************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/third_party/draco/draco_loader.js ***!
  \*****************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var draco_wasm_wrapper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! draco_wasm_wrapper.js */ "../../../../../../neuroglancer/third_party/draco/draco_wasm_wrapper.js");
/* harmony import */ var draco_wasm_wrapper_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(draco_wasm_wrapper_js__WEBPACK_IMPORTED_MODULE_0__);



__webpack_require__(/*! draco_decoder.wasm */ "../../../../../../neuroglancer/third_party/draco/draco_decoder.wasm");

function loadWebAssemblyDecoder() {
  return new Promise((resolve, reject) => {
    const DracoLoader = {};
    DracoLoader.dracoDecoderType = {};
    DracoLoader.dracoDecoderType['onModuleLoaded'] = () => {
      resolve(DracoLoader);
    };

    DracoLoader.dracoDecoderType['wasmBinaryFile'] = 'draco_decoder.wasm';

    const xhr = new XMLHttpRequest();
    xhr.open('GET', 'draco_decoder.wasm', true);
    xhr.responseType = 'arraybuffer';

    xhr.onload = function() {
      // For WebAssembly the object passed into DracoModule() must contain a
      // property with the name of wasmBinary and the value must be an
      // ArrayBuffer containing the contents of the .wasm file.
      DracoLoader.dracoDecoderType['wasmBinary'] = xhr.response;
      try {
        DracoLoader.decoderModule = draco_wasm_wrapper_js__WEBPACK_IMPORTED_MODULE_0___default()(DracoLoader.dracoDecoderType);
      } catch (err) {
        reject(new Error('Draco webassembly decoder corrupted'));
      }
    };

    xhr.onerror = () => {
      reject(new Error('Request to load draco webassembly decoder failed'));
    };

    xhr.send(null);
  });
}

const dracoModulePromise = loadWebAssemblyDecoder();

/* harmony default export */ __webpack_exports__["default"] = (dracoModulePromise);

/***/ }),

/***/ "../../../../../../neuroglancer/third_party/draco/draco_wasm_wrapper.js":
/*!***********************************************************************************************************!*\
  !*** /Users/roseva1/Desktop/Dashbaord/BossDB/Neuvue/neuroglancer/third_party/draco/draco_wasm_wrapper.js ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(d,k,f){d!=Array.prototype&&d!=Object.prototype&&(d[k]=f.value)};$jscomp.getGlobal=function(d){return"undefined"!=typeof window&&window===d?d:"undefined"!=typeof global&&null!=global?global:d};$jscomp.global=$jscomp.getGlobal(this);
$jscomp.polyfill=function(d,k,f,v){if(k){f=$jscomp.global;d=d.split(".");for(v=0;v<d.length-1;v++){var h=d[v];h in f||(f[h]={});f=f[h]}d=d[d.length-1];v=f[d];k=k(v);k!=v&&null!=k&&$jscomp.defineProperty(f,d,{configurable:!0,writable:!0,value:k})}};$jscomp.polyfill("Math.imul",function(d){return d?d:function(d,f){d=Number(d);f=Number(f);var k=d&65535,h=f&65535;return k*h+((d>>>16&65535)*h+k*(f>>>16&65535)<<16>>>0)|0}},"es6","es3");
$jscomp.polyfill("Math.clz32",function(d){return d?d:function(d){d=Number(d)>>>0;if(0===d)return 32;var f=0;0===(d&4294901760)&&(d<<=16,f+=16);0===(d&4278190080)&&(d<<=8,f+=8);0===(d&4026531840)&&(d<<=4,f+=4);0===(d&3221225472)&&(d<<=2,f+=2);0===(d&2147483648)&&f++;return f}},"es6","es3");$jscomp.polyfill("Math.trunc",function(d){return d?d:function(d){d=Number(d);if(isNaN(d)||Infinity===d||-Infinity===d||0===d)return d;var f=Math.floor(Math.abs(d));return 0>d?-f:f}},"es6","es3");
$jscomp.SYMBOL_PREFIX="jscomp_symbol_";$jscomp.initSymbol=function(){$jscomp.initSymbol=function(){};$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol)};$jscomp.Symbol=function(){var d=0;return function(k){return $jscomp.SYMBOL_PREFIX+(k||"")+d++}}();
$jscomp.initSymbolIterator=function(){$jscomp.initSymbol();var d=$jscomp.global.Symbol.iterator;d||(d=$jscomp.global.Symbol.iterator=$jscomp.global.Symbol("iterator"));"function"!=typeof Array.prototype[d]&&$jscomp.defineProperty(Array.prototype,d,{configurable:!0,writable:!0,value:function(){return $jscomp.arrayIterator(this)}});$jscomp.initSymbolIterator=function(){}};$jscomp.arrayIterator=function(d){var k=0;return $jscomp.iteratorPrototype(function(){return k<d.length?{done:!1,value:d[k++]}:{done:!0}})};
$jscomp.iteratorPrototype=function(d){$jscomp.initSymbolIterator();d={next:d};d[$jscomp.global.Symbol.iterator]=function(){return this};return d};$jscomp.makeIterator=function(d){$jscomp.initSymbolIterator();var k=d[Symbol.iterator];return k?k.call(d):$jscomp.arrayIterator(d)};$jscomp.FORCE_POLYFILL_PROMISE=!1;
$jscomp.polyfill("Promise",function(d){function k(){this.batch_=null}function f(d){return d instanceof h?d:new h(function(q,f){q(d)})}if(d&&!$jscomp.FORCE_POLYFILL_PROMISE)return d;k.prototype.asyncExecute=function(d){null==this.batch_&&(this.batch_=[],this.asyncExecuteBatch_());this.batch_.push(d);return this};k.prototype.asyncExecuteBatch_=function(){var d=this;this.asyncExecuteFunction(function(){d.executeBatch_()})};var v=$jscomp.global.setTimeout;k.prototype.asyncExecuteFunction=function(d){v(d,
0)};k.prototype.executeBatch_=function(){for(;this.batch_&&this.batch_.length;){var d=this.batch_;this.batch_=[];for(var B=0;B<d.length;++B){var f=d[B];delete d[B];try{f()}catch(w){this.asyncThrow_(w)}}}this.batch_=null};k.prototype.asyncThrow_=function(d){this.asyncExecuteFunction(function(){throw d;})};var h=function(d){this.state_=0;this.result_=void 0;this.onSettledCallbacks_=[];var q=this.createResolveAndReject_();try{d(q.resolve,q.reject)}catch(X){q.reject(X)}};h.prototype.createResolveAndReject_=
function(){function d(d){return function(q){h||(h=!0,d.call(f,q))}}var f=this,h=!1;return{resolve:d(this.resolveTo_),reject:d(this.reject_)}};h.prototype.resolveTo_=function(d){if(d===this)this.reject_(new TypeError("A Promise cannot resolve to itself"));else if(d instanceof h)this.settleSameAsPromise_(d);else{a:switch(typeof d){case "object":var f=null!=d;break a;case "function":f=!0;break a;default:f=!1}f?this.resolveToNonPromiseObj_(d):this.fulfill_(d)}};h.prototype.resolveToNonPromiseObj_=function(d){var f=
void 0;try{f=d.then}catch(X){this.reject_(X);return}"function"==typeof f?this.settleSameAsThenable_(f,d):this.fulfill_(d)};h.prototype.reject_=function(d){this.settle_(2,d)};h.prototype.fulfill_=function(d){this.settle_(1,d)};h.prototype.settle_=function(d,f){if(0!=this.state_)throw Error("Cannot settle("+d+", "+f|"): Promise already settled in state"+this.state_);this.state_=d;this.result_=f;this.executeOnSettledCallbacks_()};h.prototype.executeOnSettledCallbacks_=function(){if(null!=this.onSettledCallbacks_){for(var d=
this.onSettledCallbacks_,f=0;f<d.length;++f)d[f].call(),d[f]=null;this.onSettledCallbacks_=null}};var ha=new k;h.prototype.settleSameAsPromise_=function(d){var f=this.createResolveAndReject_();d.callWhenSettled_(f.resolve,f.reject)};h.prototype.settleSameAsThenable_=function(d,f){var h=this.createResolveAndReject_();try{d.call(f,h.resolve,h.reject)}catch(w){h.reject(w)}};h.prototype.then=function(d,f){function k(d,f){return"function"==typeof d?function(f){try{w(d(f))}catch(O){q(O)}}:f}var w,q,B=new h(function(d,
f){w=d;q=f});this.callWhenSettled_(k(d,w),k(f,q));return B};h.prototype.catch=function(d){return this.then(void 0,d)};h.prototype.callWhenSettled_=function(d,f){function h(){switch(k.state_){case 1:d(k.result_);break;case 2:f(k.result_);break;default:throw Error("Unexpected state: "+k.state_);}}var k=this;null==this.onSettledCallbacks_?ha.asyncExecute(h):this.onSettledCallbacks_.push(function(){ha.asyncExecute(h)})};h.resolve=f;h.reject=function(d){return new h(function(f,h){h(d)})};h.race=function(d){return new h(function(h,
k){for(var w=$jscomp.makeIterator(d),q=w.next();!q.done;q=w.next())f(q.value).callWhenSettled_(h,k)})};h.all=function(d){var k=$jscomp.makeIterator(d),q=k.next();return q.done?f([]):new h(function(d,h){function w(f){return function(h){v[f]=h;B--;0==B&&d(v)}}var v=[],B=0;do v.push(void 0),B++,f(q.value).callWhenSettled_(w(v.length-1),h),q=k.next();while(!q.done)})};return h},"es6","es3");
var DracoDecoderModule=function(d){function k(a,b){b||(b=16);return Math.ceil(a/b)*b}function f(a,b){a||O("Assertion failed: "+b)}function v(a,b){if(0===b||!a)return"";for(var c=0,e,d=0;;){e=V[a+d>>0];c|=e;if(0==e&&!b)break;d++;if(b&&d==b)break}b||(b=d);e="";if(128>c){for(;0<b;)c=String.fromCharCode.apply(String,V.subarray(a,a+Math.min(b,1024))),e=e?e+c:c,a+=1024,b-=1024;return e}return h(V,a)}function h(a,b){for(var c=b;a[c];)++c;if(16<c-b&&a.subarray&&Ia)return Ia.decode(a.subarray(b,c));for(c=
"";;){var e=a[b++];if(!e)return c;if(e&128){var d=a[b++]&63;if(192==(e&224))c+=String.fromCharCode((e&31)<<6|d);else{var f=a[b++]&63;if(224==(e&240))e=(e&15)<<12|d<<6|f;else{var g=a[b++]&63;if(240==(e&248))e=(e&7)<<18|d<<12|f<<6|g;else{var h=a[b++]&63;if(248==(e&252))e=(e&3)<<24|d<<18|f<<12|g<<6|h;else{var k=a[b++]&63;e=(e&1)<<30|d<<24|f<<18|g<<12|h<<6|k}}}65536>e?c+=String.fromCharCode(e):(e-=65536,c+=String.fromCharCode(55296|e>>10,56320|e&1023))}}else c+=String.fromCharCode(e)}}function ha(a,b){0<
a%b&&(a+=b-a%b);return a}function q(){a.HEAP8=ia=new Int8Array(D);a.HEAP16=Ja=new Int16Array(D);a.HEAP32=E=new Int32Array(D);a.HEAPU8=V=new Uint8Array(D);a.HEAPU16=new Uint16Array(D);a.HEAPU32=new Uint32Array(D);a.HEAPF32=new Float32Array(D);a.HEAPF64=new Float64Array(D)}function B(e){for(;0<e.length;){var b=e.shift();if("function"==typeof b)b();else{var c=b.func;"number"===typeof c?void 0===b.arg?a.dynCall_v(c):a.dynCall_vi(c,b.arg):c(void 0===b.arg?null:b.arg)}}}function X(a){return String.prototype.startsWith?
a.startsWith("data:application/octet-stream;base64,"):0===a.indexOf("data:application/octet-stream;base64,")}function w(){return!!w.uncaught_exception}function la(){var e=y.last;if(!e)return(sa(0),0)|0;var b=y.infos[e],c=b.type;if(!c)return(sa(0),e)|0;var p=Array.prototype.slice.call(arguments);a.___cxa_is_pointer_type(c);la.buffer||(la.buffer=Ka(4));E[la.buffer>>2]=e;e=la.buffer;for(var d=0;d<p.length;d++)if(p[d]&&a.___cxa_can_catch(p[d],c,e))return e=E[e>>2],b.adjusted=e,(sa(p[d]),e)|0;e=E[e>>2];
return(sa(c),e)|0}function Y(e,b){u.varargs=b;try{var c=u.get(),p=u.get(),d=u.get();e=0;Y.buffers||(Y.buffers=[null,[],[]],Y.printChar=function(b,c){var e=Y.buffers[b];f(e);0===c||10===c?((1===b?a.print:a.printErr)(h(e,0)),e.length=0):e.push(c)});for(b=0;b<d;b++){for(var g=E[p+8*b>>2],k=E[p+(8*b+4)>>2],l=0;l<k;l++)Y.printChar(c,V[g+l]);e+=k}return e}catch(ya){return"undefined"!==typeof FS&&ya instanceof FS.ErrnoError||O(ya),-ya.errno}}function ma(e,b){ma.seen||(ma.seen={});e in ma.seen||(a.dynCall_v(b),
ma.seen[e]=1)}function na(a){this.name="ExitStatus";this.message="Program terminated with exit("+a+")";this.status=a}function wa(e){function b(){if(!a.calledRun&&(a.calledRun=!0,!oa)){La||(La=!0,B(Ma));B(Na);if(a.onRuntimeInitialized)a.onRuntimeInitialized();if(a.postRun)for("function"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;)Oa.unshift(a.postRun.shift());B(Oa)}}if(!(0<da)){if(a.preRun)for("function"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)Pa.unshift(a.preRun.shift());
B(Pa);0<da||a.calledRun||(a.setStatus?(a.setStatus("Running..."),setTimeout(function(){setTimeout(function(){a.setStatus("")},1);b()},1)):b())}}function O(e){if(a.onAbort)a.onAbort(e);void 0!==e?(a.print(e),a.printErr(e),e=JSON.stringify(e)):e="";oa=!0;throw"abort("+e+"). Build with -s ASSERTIONS=1 for more info.";}function m(){}function t(a){return(a||m).__cache__}function T(a,b){var c=t(b),e=c[a];if(e)return e;e=Object.create((b||m).prototype);e.ptr=a;return c[a]=e}function ea(a){if("string"===
typeof a){for(var b=0,c=0;c<a.length;++c){var e=a.charCodeAt(c);55296<=e&&57343>=e&&(e=65536+((e&1023)<<10)|a.charCodeAt(++c)&1023);127>=e?++b:b=2047>=e?b+2:65535>=e?b+3:2097151>=e?b+4:67108863>=e?b+5:b+6}b=Array(b+1);c=0;e=b.length;if(0<e){e=c+e-1;for(var d=0;d<a.length;++d){var f=a.charCodeAt(d);55296<=f&&57343>=f&&(f=65536+((f&1023)<<10)|a.charCodeAt(++d)&1023);if(127>=f){if(c>=e)break;b[c++]=f}else{if(2047>=f){if(c+1>=e)break;b[c++]=192|f>>6}else{if(65535>=f){if(c+2>=e)break;b[c++]=224|f>>12}else{if(2097151>=
f){if(c+3>=e)break;b[c++]=240|f>>18}else{if(67108863>=f){if(c+4>=e)break;b[c++]=248|f>>24}else{if(c+5>=e)break;b[c++]=252|f>>30;b[c++]=128|f>>24&63}b[c++]=128|f>>18&63}b[c++]=128|f>>12&63}b[c++]=128|f>>6&63}b[c++]=128|f&63}}b[c]=0}a=l.alloc(b,ia);l.copy(b,ia,a)}return a}function z(){throw"cannot construct a Status, no constructor in IDL";}function F(){this.ptr=Wa();t(F)[this.ptr]=this}function G(){this.ptr=Xa();t(G)[this.ptr]=this}function H(){this.ptr=Ya();t(H)[this.ptr]=this}function I(){this.ptr=
Za();t(I)[this.ptr]=this}function J(){this.ptr=$a();t(J)[this.ptr]=this}function n(){this.ptr=ab();t(n)[this.ptr]=this}function P(){this.ptr=bb();t(P)[this.ptr]=this}function x(){this.ptr=cb();t(x)[this.ptr]=this}function K(){this.ptr=db();t(K)[this.ptr]=this}function r(){this.ptr=eb();t(r)[this.ptr]=this}function L(){this.ptr=fb();t(L)[this.ptr]=this}function M(){this.ptr=gb();t(M)[this.ptr]=this}function U(){this.ptr=hb();t(U)[this.ptr]=this}function Q(){this.ptr=ib();t(Q)[this.ptr]=this}function g(){this.ptr=
jb();t(g)[this.ptr]=this}function C(){this.ptr=kb();t(C)[this.ptr]=this}function W(){throw"cannot construct a VoidPtr, no constructor in IDL";}function N(){this.ptr=lb();t(N)[this.ptr]=this}function R(){this.ptr=mb();t(R)[this.ptr]=this}d=d||{};var a="undefined"!==typeof d?d:{},Qa=!1,Ra=!1;a.onRuntimeInitialized=function(){Qa=!0;if(Ra&&"function"===typeof a.onModuleLoaded)a.onModuleLoaded(a)};a.onModuleParsed=function(){Ra=!0;if(Qa&&"function"===typeof a.onModuleLoaded)a.onModuleLoaded(a)};a.isVersionSupported=
function(a){if("string"!==typeof a)return!1;a=a.split(".");return 2>a.length||3<a.length?!1:1==a[0]&&0<=a[1]&&3>=a[1]?!0:0!=a[0]||10<a[1]?!1:!0};var pa={},Z;for(Z in a)a.hasOwnProperty(Z)&&(pa[Z]=a[Z]);a.arguments=[];a.thisProgram="./this.program";a.quit=function(a,b){throw b;};a.preRun=[];a.postRun=[];var ja=!1,fa=!1,qa=!1,za=!1;if(a.ENVIRONMENT)if("WEB"===a.ENVIRONMENT)ja=!0;else if("WORKER"===a.ENVIRONMENT)fa=!0;else if("NODE"===a.ENVIRONMENT)qa=!0;else if("SHELL"===a.ENVIRONMENT)za=!0;else throw Error("Module['ENVIRONMENT'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.");
else ja="object"===typeof window,fa="function"===typeof importScripts,qa="object"===typeof process&&"function"==="function"&&!ja&&!fa,za=!ja&&!qa&&!fa;if(qa){var Aa,Ba;a.read=function(a,b){Aa||(Aa=__webpack_require__(/*! fs */ "./node_modules/node-libs-browser/mock/empty.js"));Ba||(Ba=__webpack_require__(/*! path */ "./node_modules/path-browserify/index.js"));a=Ba.normalize(a);a=Aa.readFileSync(a);return b?a:a.toString()};a.readBinary=function(e){e=a.read(e,!0);e.buffer||(e=new Uint8Array(e));f(e.buffer);return e};1<process.argv.length&&(a.thisProgram=process.argv[1].replace(/\\/g,"/"));a.arguments=process.argv.slice(2);
process.on("uncaughtException",function(a){if(!(a instanceof na))throw a;});process.on("unhandledRejection",function(a,b){process.exit(1)});a.inspect=function(){return"[Emscripten Module object]"}}else if(za)"undefined"!=typeof read&&(a.read=function(a){return read(a)}),a.readBinary=function(a){if("function"===typeof readbuffer)return new Uint8Array(readbuffer(a));a=read(a,"binary");f("object"===typeof a);return a},"undefined"!=typeof scriptArgs?a.arguments=scriptArgs:"undefined"!=typeof arguments&&
(a.arguments=arguments),"function"===typeof quit&&(a.quit=function(a,b){quit(a)});else if(ja||fa)a.read=function(a){var b=new XMLHttpRequest;b.open("GET",a,!1);b.send(null);return b.responseText},fa&&(a.readBinary=function(a){var b=new XMLHttpRequest;b.open("GET",a,!1);b.responseType="arraybuffer";b.send(null);return new Uint8Array(b.response)}),a.readAsync=function(a,b,c){var e=new XMLHttpRequest;e.open("GET",a,!0);e.responseType="arraybuffer";e.onload=function(){200==e.status||0==e.status&&e.response?
b(e.response):c()};e.onerror=c;e.send(null)},a.setWindowTitle=function(a){document.title=a};a.print="undefined"!==typeof console?console.log.bind(console):"undefined"!==typeof print?print:null;a.printErr="undefined"!==typeof printErr?printErr:"undefined"!==typeof console&&console.warn.bind(console)||a.print;a.print=a.print;a.printErr=a.printErr;for(Z in pa)pa.hasOwnProperty(Z)&&(a[Z]=pa[Z]);pa=void 0;var oa=0,Ia="undefined"!==typeof TextDecoder?new TextDecoder("utf8"):void 0;"undefined"!==typeof TextDecoder&&
new TextDecoder("utf-16le");var ia,V,Ja,E,aa,Ca,ta,ua,Da,ka;var Ea=aa=Ca=ta=ua=Da=ka=0;var Sa=!1;a.reallocBuffer||(a.reallocBuffer=function(a){try{if(ArrayBuffer.transfer)var b=ArrayBuffer.transfer(D,a);else{var c=ia;b=new ArrayBuffer(a);(new Int8Array(b)).set(c)}}catch(p){return!1}return nb(b)?b:!1});try{var Ta=Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype,"byteLength").get);Ta(new ArrayBuffer(4))}catch(e){Ta=function(a){return a.byteLength}}var Fa=a.TOTAL_STACK||
5242880,A=a.TOTAL_MEMORY||16777216;A<Fa&&a.printErr("TOTAL_MEMORY should be larger than TOTAL_STACK, was "+A+"! (TOTAL_STACK="+Fa+")");if(a.buffer)var D=a.buffer;else"object"===typeof WebAssembly&&"function"===typeof WebAssembly.Memory?(a.wasmMemory=new WebAssembly.Memory({initial:A/65536}),D=a.wasmMemory.buffer):D=new ArrayBuffer(A),a.buffer=D;q();E[0]=1668509029;Ja[1]=25459;if(115!==V[2]||99!==V[3])throw"Runtime error: expected the system to be little-endian!";var Pa=[],Ma=[],Na=[],ob=[],Oa=[],
La=!1,pb=Math.floor,da=0,Ga=null,ra=null;a.preloadedImages={};a.preloadedAudios={};(function(){function e(){try{if(a.wasmBinary)return new Uint8Array(a.wasmBinary);if(a.readBinary)return a.readBinary(f);throw"on the web, we need the wasm binary to be preloaded and set on Module['wasmBinary']. emcc.py will do that for you when generating HTML (but not JS)";}catch(Va){O(Va)}}function b(){return a.wasmBinary||!ja&&!fa||"function"!==typeof fetch?new Promise(function(a,b){a(e())}):fetch(f,{credentials:"same-origin"}).then(function(a){if(!a.ok)throw"failed to load wasm binary file at '"+
f+"'";return a.arrayBuffer()}).catch(function(){return e()})}function c(c,e,d){function p(b,c){k=b.exports;k.memory&&(b=k.memory,c=a.buffer,b.byteLength<c.byteLength&&a.printErr("the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here"),c=new Int8Array(c),(new Int8Array(b)).set(c),a.buffer=D=b,q());a.asm=k;a.usingWasm=!0;da--;a.monitorRunDependencies&&a.monitorRunDependencies(da);0==da&&(null!==Ga&&(clearInterval(Ga),Ga=null),ra&&(b=ra,ra=null,b()))}
function g(a){p(a.instance,a.module)}function S(c){b().then(function(a){return WebAssembly.instantiate(a,h)}).then(c).catch(function(b){a.printErr("failed to asynchronously prepare wasm: "+b);O(b)})}if("object"!==typeof WebAssembly)return a.printErr("no native wasm support detected"),!1;if(!(a.wasmMemory instanceof WebAssembly.Memory))return a.printErr("no native wasm Memory in use"),!1;e.memory=a.wasmMemory;h.global={NaN:NaN,Infinity:Infinity};h["global.Math"]=Math;h.env=e;da++;a.monitorRunDependencies&&
a.monitorRunDependencies(da);if(a.instantiateWasm)try{return a.instantiateWasm(h,p)}catch(qb){return a.printErr("Module.instantiateWasm callback failed with error: "+qb),!1}a.wasmBinary||"function"!==typeof WebAssembly.instantiateStreaming||X(f)||"function"!==typeof fetch?S(g):WebAssembly.instantiateStreaming(fetch(f,{credentials:"same-origin"}),h).then(g).catch(function(b){a.printErr("wasm streaming compile failed: "+b);a.printErr("falling back to ArrayBuffer instantiation");S(g)});return{}}var d=
"draco_decoder.wast",f="draco_decoder.wasm",g="draco_decoder.temp.asm.js";"function"===typeof a.locateFile&&(X(d)||(d=a.locateFile(d)),X(f)||(f=a.locateFile(f)),X(g)||(g=a.locateFile(g)));var h={global:null,env:null,asm2wasm:{"f64-rem":function(a,b){return a%b},"debugger":function(){debugger}},parent:a},k=null;a.asmPreload=a.asm;var l=a.reallocBuffer;a.reallocBuffer=function(b){if("asmjs"===m)var c=l(b);else a:{b=ha(b,a.usingWasm?65536:16777216);var e=a.buffer.byteLength;if(a.usingWasm)try{c=-1!==
a.wasmMemory.grow((b-e)/65536)?a.buffer=a.wasmMemory.buffer:null;break a}catch(sd){c=null;break a}c=void 0}return c};var m="";a.asm=function(b,e,d){if(!e.table){var p=a.wasmTableSize;void 0===p&&(p=1024);var f=a.wasmMaxTableSize;e.table="object"===typeof WebAssembly&&"function"===typeof WebAssembly.Table?void 0!==f?new WebAssembly.Table({initial:p,maximum:f,element:"anyfunc"}):new WebAssembly.Table({initial:p,element:"anyfunc"}):Array(p);a.wasmTable=e.table}e.memoryBase||(e.memoryBase=a.STATIC_BASE);
e.tableBase||(e.tableBase=0);(b=c(b,e,d))||O("no binaryen method succeeded. consider enabling more options, like interpreting, if you want that: https://github.com/kripken/emscripten/wiki/WebAssembly#binaryen-methods");return b}})();Ea=1024;aa=Ea+19408;Ma.push();a.STATIC_BASE=Ea;a.STATIC_BUMP=19408;var rb=aa;aa+=16;var y={last:0,caught:[],infos:{},deAdjust:function(a){if(!a||y.infos[a])return a;for(var b in y.infos)if(y.infos[b].adjusted===a)return b;return a},addRef:function(a){a&&y.infos[a].refcount++},
decRef:function(e){if(e){var b=y.infos[e];f(0<b.refcount);b.refcount--;0!==b.refcount||b.rethrown||(b.destructor&&a.dynCall_vi(b.destructor,e),delete y.infos[e],___cxa_free_exception(e))}},clearRef:function(a){a&&(y.infos[a].refcount=0)}},u={varargs:0,get:function(a){u.varargs+=4;return E[u.varargs-4>>2]},getStr:function(){return v(u.get())},get64:function(){var a=u.get(),b=u.get();0<=a?f(0===b):f(-1===b);return a},getZero:function(){f(0===u.get())}},va={},Ha=1;ka=function(a){f(!Sa);var b=aa;aa=aa+
a+15&-16;return b}(4);Ca=ta=k(aa);ua=Ca+Fa;Da=k(ua);E[ka>>2]=Da;Sa=!0;a.wasmTableSize=492;a.wasmMaxTableSize=492;a.asmGlobalArg={};a.asmLibraryArg={abort:O,assert:f,enlargeMemory:function(){var e=a.usingWasm?65536:16777216,b=2147483648-e;if(E[ka>>2]>b)return!1;var c=A;for(A=Math.max(A,16777216);A<E[ka>>2];)A=536870912>=A?ha(2*A,e):Math.min(ha((3*A+2147483648)/4,e),b);e=a.reallocBuffer(A);if(!e||e.byteLength!=A)return A=c,!1;a.buffer=D=e;q();return!0},getTotalMemory:function(){return A},abortOnCannotGrowMemory:function(){O("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value "+
A+", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ")},invoke_ii:function(e,b){try{return a.dynCall_ii(e,b)}catch(c){if("number"!==typeof c&&"longjmp"!==c)throw c;a.setThrew(1,0)}},invoke_iii:function(e,b,c){try{return a.dynCall_iii(e,b,c)}catch(p){if("number"!==typeof p&&"longjmp"!==p)throw p;a.setThrew(1,0)}},invoke_iiii:function(e,b,c,d){try{return a.dynCall_iiii(e,
b,c,d)}catch(S){if("number"!==typeof S&&"longjmp"!==S)throw S;a.setThrew(1,0)}},invoke_iiiiiii:function(e,b,c,d,f,g,h){try{return a.dynCall_iiiiiii(e,b,c,d,f,g,h)}catch(ca){if("number"!==typeof ca&&"longjmp"!==ca)throw ca;a.setThrew(1,0)}},invoke_v:function(e){try{a.dynCall_v(e)}catch(b){if("number"!==typeof b&&"longjmp"!==b)throw b;a.setThrew(1,0)}},invoke_vi:function(e,b){try{a.dynCall_vi(e,b)}catch(c){if("number"!==typeof c&&"longjmp"!==c)throw c;a.setThrew(1,0)}},invoke_vii:function(e,b,c){try{a.dynCall_vii(e,
b,c)}catch(p){if("number"!==typeof p&&"longjmp"!==p)throw p;a.setThrew(1,0)}},invoke_viii:function(e,b,c,d){try{a.dynCall_viii(e,b,c,d)}catch(S){if("number"!==typeof S&&"longjmp"!==S)throw S;a.setThrew(1,0)}},invoke_viiii:function(e,b,c,d,f){try{a.dynCall_viiii(e,b,c,d,f)}catch(xa){if("number"!==typeof xa&&"longjmp"!==xa)throw xa;a.setThrew(1,0)}},invoke_viiiii:function(e,b,c,d,f,g){try{a.dynCall_viiiii(e,b,c,d,f,g)}catch(ba){if("number"!==typeof ba&&"longjmp"!==ba)throw ba;a.setThrew(1,0)}},invoke_viiiiii:function(e,
b,c,d,f,g,h){try{a.dynCall_viiiiii(e,b,c,d,f,g,h)}catch(ca){if("number"!==typeof ca&&"longjmp"!==ca)throw ca;a.setThrew(1,0)}},__ZSt18uncaught_exceptionv:w,___cxa_allocate_exception:function(a){return Ka(a)},___cxa_begin_catch:function(a){var b=y.infos[a];b&&!b.caught&&(b.caught=!0,w.uncaught_exception--);b&&(b.rethrown=!1);y.caught.push(a);y.addRef(y.deAdjust(a));return a},___cxa_find_matching_catch:la,___cxa_pure_virtual:function(){oa=!0;throw"Pure virtual function called!";},___cxa_throw:function(a,
b,c){y.infos[a]={ptr:a,adjusted:a,type:b,destructor:c,refcount:0,caught:!1,rethrown:!1};y.last=a;"uncaught_exception"in w?w.uncaught_exception++:w.uncaught_exception=1;throw a+" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";},___gxx_personality_v0:function(){},___resumeException:function(a){y.last||(y.last=a);throw a+" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
},___setErrNo:function(d){a.___errno_location&&(E[a.___errno_location()>>2]=d);return d},___syscall140:function(a,b){u.varargs=b;try{var c=u.getStreamFromFD();u.get();var d=u.get(),e=u.get(),f=u.get();FS.llseek(c,d,f);E[e>>2]=c.position;c.getdents&&0===d&&0===f&&(c.getdents=null);return 0}catch(ba){return"undefined"!==typeof FS&&ba instanceof FS.ErrnoError||O(ba),-ba.errno}},___syscall146:Y,___syscall54:function(a,b){u.varargs=b;return 0},___syscall6:function(a,b){u.varargs=b;try{var c=u.getStreamFromFD();
FS.close(c);return 0}catch(p){return"undefined"!==typeof FS&&p instanceof FS.ErrnoError||O(p),-p.errno}},_abort:function(){a.abort()},_emscripten_memcpy_big:function(a,b,c){V.set(V.subarray(b,b+c),a);return a},_llvm_floor_f64:pb,_llvm_trap:function(){O("trap!")},_pthread_getspecific:function(a){return va[a]||0},_pthread_key_create:function(a,b){if(0==a)return 22;E[a>>2]=Ha;va[Ha]=0;Ha++;return 0},_pthread_once:ma,_pthread_setspecific:function(a,b){if(!(a in va))return 22;va[a]=b;return 0},flush_NO_FILESYSTEM:function(){var d=
a._fflush;d&&d(0);if(d=Y.printChar){var b=Y.buffers;b[1].length&&d(1,10);b[2].length&&d(2,10)}},DYNAMICTOP_PTR:ka,tempDoublePtr:rb,ABORT:oa,STACKTOP:ta,STACK_MAX:ua};var Ua=a.asm(a.asmGlobalArg,a.asmLibraryArg,D);a.asm=Ua;a.___cxa_can_catch=function(){return a.asm.___cxa_can_catch.apply(null,arguments)};a.___cxa_is_pointer_type=function(){return a.asm.___cxa_is_pointer_type.apply(null,arguments)};var $a=a._emscripten_bind_AttributeOctahedronTransform_AttributeOctahedronTransform_0=function(){return a.asm._emscripten_bind_AttributeOctahedronTransform_AttributeOctahedronTransform_0.apply(null,
arguments)},sb=a._emscripten_bind_AttributeOctahedronTransform_InitFromAttribute_1=function(){return a.asm._emscripten_bind_AttributeOctahedronTransform_InitFromAttribute_1.apply(null,arguments)},tb=a._emscripten_bind_AttributeOctahedronTransform___destroy___0=function(){return a.asm._emscripten_bind_AttributeOctahedronTransform___destroy___0.apply(null,arguments)},ub=a._emscripten_bind_AttributeOctahedronTransform_quantization_bits_0=function(){return a.asm._emscripten_bind_AttributeOctahedronTransform_quantization_bits_0.apply(null,
arguments)},cb=a._emscripten_bind_AttributeQuantizationTransform_AttributeQuantizationTransform_0=function(){return a.asm._emscripten_bind_AttributeQuantizationTransform_AttributeQuantizationTransform_0.apply(null,arguments)},vb=a._emscripten_bind_AttributeQuantizationTransform_InitFromAttribute_1=function(){return a.asm._emscripten_bind_AttributeQuantizationTransform_InitFromAttribute_1.apply(null,arguments)},wb=a._emscripten_bind_AttributeQuantizationTransform___destroy___0=function(){return a.asm._emscripten_bind_AttributeQuantizationTransform___destroy___0.apply(null,
arguments)},xb=a._emscripten_bind_AttributeQuantizationTransform_min_value_1=function(){return a.asm._emscripten_bind_AttributeQuantizationTransform_min_value_1.apply(null,arguments)},yb=a._emscripten_bind_AttributeQuantizationTransform_quantization_bits_0=function(){return a.asm._emscripten_bind_AttributeQuantizationTransform_quantization_bits_0.apply(null,arguments)},zb=a._emscripten_bind_AttributeQuantizationTransform_range_0=function(){return a.asm._emscripten_bind_AttributeQuantizationTransform_range_0.apply(null,
arguments)},bb=a._emscripten_bind_AttributeTransformData_AttributeTransformData_0=function(){return a.asm._emscripten_bind_AttributeTransformData_AttributeTransformData_0.apply(null,arguments)},Ab=a._emscripten_bind_AttributeTransformData___destroy___0=function(){return a.asm._emscripten_bind_AttributeTransformData___destroy___0.apply(null,arguments)},Bb=a._emscripten_bind_AttributeTransformData_transform_type_0=function(){return a.asm._emscripten_bind_AttributeTransformData_transform_type_0.apply(null,
arguments)},ib=a._emscripten_bind_DecoderBuffer_DecoderBuffer_0=function(){return a.asm._emscripten_bind_DecoderBuffer_DecoderBuffer_0.apply(null,arguments)},Cb=a._emscripten_bind_DecoderBuffer_Init_2=function(){return a.asm._emscripten_bind_DecoderBuffer_Init_2.apply(null,arguments)},Db=a._emscripten_bind_DecoderBuffer___destroy___0=function(){return a.asm._emscripten_bind_DecoderBuffer___destroy___0.apply(null,arguments)},Eb=a._emscripten_bind_Decoder_DecodeBufferToMesh_2=function(){return a.asm._emscripten_bind_Decoder_DecodeBufferToMesh_2.apply(null,
arguments)},Fb=a._emscripten_bind_Decoder_DecodeBufferToPointCloud_2=function(){return a.asm._emscripten_bind_Decoder_DecodeBufferToPointCloud_2.apply(null,arguments)},jb=a._emscripten_bind_Decoder_Decoder_0=function(){return a.asm._emscripten_bind_Decoder_Decoder_0.apply(null,arguments)},Gb=a._emscripten_bind_Decoder_GetAttributeByUniqueId_2=function(){return a.asm._emscripten_bind_Decoder_GetAttributeByUniqueId_2.apply(null,arguments)},Hb=a._emscripten_bind_Decoder_GetAttributeFloatForAllPoints_3=
function(){return a.asm._emscripten_bind_Decoder_GetAttributeFloatForAllPoints_3.apply(null,arguments)},Ib=a._emscripten_bind_Decoder_GetAttributeFloat_3=function(){return a.asm._emscripten_bind_Decoder_GetAttributeFloat_3.apply(null,arguments)},Jb=a._emscripten_bind_Decoder_GetAttributeIdByMetadataEntry_3=function(){return a.asm._emscripten_bind_Decoder_GetAttributeIdByMetadataEntry_3.apply(null,arguments)},Kb=a._emscripten_bind_Decoder_GetAttributeIdByName_2=function(){return a.asm._emscripten_bind_Decoder_GetAttributeIdByName_2.apply(null,
arguments)},Lb=a._emscripten_bind_Decoder_GetAttributeId_2=function(){return a.asm._emscripten_bind_Decoder_GetAttributeId_2.apply(null,arguments)},Mb=a._emscripten_bind_Decoder_GetAttributeInt16ForAllPoints_3=function(){return a.asm._emscripten_bind_Decoder_GetAttributeInt16ForAllPoints_3.apply(null,arguments)},Nb=a._emscripten_bind_Decoder_GetAttributeInt32ForAllPoints_3=function(){return a.asm._emscripten_bind_Decoder_GetAttributeInt32ForAllPoints_3.apply(null,arguments)},Ob=a._emscripten_bind_Decoder_GetAttributeInt8ForAllPoints_3=
function(){return a.asm._emscripten_bind_Decoder_GetAttributeInt8ForAllPoints_3.apply(null,arguments)},Pb=a._emscripten_bind_Decoder_GetAttributeIntForAllPoints_3=function(){return a.asm._emscripten_bind_Decoder_GetAttributeIntForAllPoints_3.apply(null,arguments)},Qb=a._emscripten_bind_Decoder_GetAttributeMetadata_2=function(){return a.asm._emscripten_bind_Decoder_GetAttributeMetadata_2.apply(null,arguments)},Rb=a._emscripten_bind_Decoder_GetAttributeUInt16ForAllPoints_3=function(){return a.asm._emscripten_bind_Decoder_GetAttributeUInt16ForAllPoints_3.apply(null,
arguments)},Sb=a._emscripten_bind_Decoder_GetAttributeUInt32ForAllPoints_3=function(){return a.asm._emscripten_bind_Decoder_GetAttributeUInt32ForAllPoints_3.apply(null,arguments)},Tb=a._emscripten_bind_Decoder_GetAttributeUInt8ForAllPoints_3=function(){return a.asm._emscripten_bind_Decoder_GetAttributeUInt8ForAllPoints_3.apply(null,arguments)},Ub=a._emscripten_bind_Decoder_GetAttribute_2=function(){return a.asm._emscripten_bind_Decoder_GetAttribute_2.apply(null,arguments)},Vb=a._emscripten_bind_Decoder_GetEncodedGeometryType_1=
function(){return a.asm._emscripten_bind_Decoder_GetEncodedGeometryType_1.apply(null,arguments)},Wb=a._emscripten_bind_Decoder_GetFaceFromMesh_3=function(){return a.asm._emscripten_bind_Decoder_GetFaceFromMesh_3.apply(null,arguments)},Xb=a._emscripten_bind_Decoder_GetMetadata_1=function(){return a.asm._emscripten_bind_Decoder_GetMetadata_1.apply(null,arguments)},Yb=a._emscripten_bind_Decoder_GetTriangleStripsFromMesh_2=function(){return a.asm._emscripten_bind_Decoder_GetTriangleStripsFromMesh_2.apply(null,
arguments)},Zb=a._emscripten_bind_Decoder_SkipAttributeTransform_1=function(){return a.asm._emscripten_bind_Decoder_SkipAttributeTransform_1.apply(null,arguments)},$b=a._emscripten_bind_Decoder___destroy___0=function(){return a.asm._emscripten_bind_Decoder___destroy___0.apply(null,arguments)},gb=a._emscripten_bind_DracoFloat32Array_DracoFloat32Array_0=function(){return a.asm._emscripten_bind_DracoFloat32Array_DracoFloat32Array_0.apply(null,arguments)},ac=a._emscripten_bind_DracoFloat32Array_GetValue_1=
function(){return a.asm._emscripten_bind_DracoFloat32Array_GetValue_1.apply(null,arguments)},bc=a._emscripten_bind_DracoFloat32Array___destroy___0=function(){return a.asm._emscripten_bind_DracoFloat32Array___destroy___0.apply(null,arguments)},cc=a._emscripten_bind_DracoFloat32Array_size_0=function(){return a.asm._emscripten_bind_DracoFloat32Array_size_0.apply(null,arguments)},fb=a._emscripten_bind_DracoInt16Array_DracoInt16Array_0=function(){return a.asm._emscripten_bind_DracoInt16Array_DracoInt16Array_0.apply(null,
arguments)},dc=a._emscripten_bind_DracoInt16Array_GetValue_1=function(){return a.asm._emscripten_bind_DracoInt16Array_GetValue_1.apply(null,arguments)},ec=a._emscripten_bind_DracoInt16Array___destroy___0=function(){return a.asm._emscripten_bind_DracoInt16Array___destroy___0.apply(null,arguments)},fc=a._emscripten_bind_DracoInt16Array_size_0=function(){return a.asm._emscripten_bind_DracoInt16Array_size_0.apply(null,arguments)},lb=a._emscripten_bind_DracoInt32Array_DracoInt32Array_0=function(){return a.asm._emscripten_bind_DracoInt32Array_DracoInt32Array_0.apply(null,
arguments)},gc=a._emscripten_bind_DracoInt32Array_GetValue_1=function(){return a.asm._emscripten_bind_DracoInt32Array_GetValue_1.apply(null,arguments)},hc=a._emscripten_bind_DracoInt32Array___destroy___0=function(){return a.asm._emscripten_bind_DracoInt32Array___destroy___0.apply(null,arguments)},ic=a._emscripten_bind_DracoInt32Array_size_0=function(){return a.asm._emscripten_bind_DracoInt32Array_size_0.apply(null,arguments)},db=a._emscripten_bind_DracoInt8Array_DracoInt8Array_0=function(){return a.asm._emscripten_bind_DracoInt8Array_DracoInt8Array_0.apply(null,
arguments)},jc=a._emscripten_bind_DracoInt8Array_GetValue_1=function(){return a.asm._emscripten_bind_DracoInt8Array_GetValue_1.apply(null,arguments)},kc=a._emscripten_bind_DracoInt8Array___destroy___0=function(){return a.asm._emscripten_bind_DracoInt8Array___destroy___0.apply(null,arguments)},lc=a._emscripten_bind_DracoInt8Array_size_0=function(){return a.asm._emscripten_bind_DracoInt8Array_size_0.apply(null,arguments)},Wa=a._emscripten_bind_DracoUInt16Array_DracoUInt16Array_0=function(){return a.asm._emscripten_bind_DracoUInt16Array_DracoUInt16Array_0.apply(null,
arguments)},mc=a._emscripten_bind_DracoUInt16Array_GetValue_1=function(){return a.asm._emscripten_bind_DracoUInt16Array_GetValue_1.apply(null,arguments)},nc=a._emscripten_bind_DracoUInt16Array___destroy___0=function(){return a.asm._emscripten_bind_DracoUInt16Array___destroy___0.apply(null,arguments)},oc=a._emscripten_bind_DracoUInt16Array_size_0=function(){return a.asm._emscripten_bind_DracoUInt16Array_size_0.apply(null,arguments)},Za=a._emscripten_bind_DracoUInt32Array_DracoUInt32Array_0=function(){return a.asm._emscripten_bind_DracoUInt32Array_DracoUInt32Array_0.apply(null,
arguments)},pc=a._emscripten_bind_DracoUInt32Array_GetValue_1=function(){return a.asm._emscripten_bind_DracoUInt32Array_GetValue_1.apply(null,arguments)},qc=a._emscripten_bind_DracoUInt32Array___destroy___0=function(){return a.asm._emscripten_bind_DracoUInt32Array___destroy___0.apply(null,arguments)},rc=a._emscripten_bind_DracoUInt32Array_size_0=function(){return a.asm._emscripten_bind_DracoUInt32Array_size_0.apply(null,arguments)},Ya=a._emscripten_bind_DracoUInt8Array_DracoUInt8Array_0=function(){return a.asm._emscripten_bind_DracoUInt8Array_DracoUInt8Array_0.apply(null,
arguments)},sc=a._emscripten_bind_DracoUInt8Array_GetValue_1=function(){return a.asm._emscripten_bind_DracoUInt8Array_GetValue_1.apply(null,arguments)},tc=a._emscripten_bind_DracoUInt8Array___destroy___0=function(){return a.asm._emscripten_bind_DracoUInt8Array___destroy___0.apply(null,arguments)},uc=a._emscripten_bind_DracoUInt8Array_size_0=function(){return a.asm._emscripten_bind_DracoUInt8Array_size_0.apply(null,arguments)},hb=a._emscripten_bind_GeometryAttribute_GeometryAttribute_0=function(){return a.asm._emscripten_bind_GeometryAttribute_GeometryAttribute_0.apply(null,
arguments)},vc=a._emscripten_bind_GeometryAttribute___destroy___0=function(){return a.asm._emscripten_bind_GeometryAttribute___destroy___0.apply(null,arguments)},kb=a._emscripten_bind_Mesh_Mesh_0=function(){return a.asm._emscripten_bind_Mesh_Mesh_0.apply(null,arguments)},wc=a._emscripten_bind_Mesh___destroy___0=function(){return a.asm._emscripten_bind_Mesh___destroy___0.apply(null,arguments)},xc=a._emscripten_bind_Mesh_num_attributes_0=function(){return a.asm._emscripten_bind_Mesh_num_attributes_0.apply(null,
arguments)},yc=a._emscripten_bind_Mesh_num_faces_0=function(){return a.asm._emscripten_bind_Mesh_num_faces_0.apply(null,arguments)},zc=a._emscripten_bind_Mesh_num_points_0=function(){return a.asm._emscripten_bind_Mesh_num_points_0.apply(null,arguments)},Ac=a._emscripten_bind_MetadataQuerier_GetDoubleEntry_2=function(){return a.asm._emscripten_bind_MetadataQuerier_GetDoubleEntry_2.apply(null,arguments)},Bc=a._emscripten_bind_MetadataQuerier_GetEntryName_2=function(){return a.asm._emscripten_bind_MetadataQuerier_GetEntryName_2.apply(null,
arguments)},Cc=a._emscripten_bind_MetadataQuerier_GetIntEntry_2=function(){return a.asm._emscripten_bind_MetadataQuerier_GetIntEntry_2.apply(null,arguments)},Dc=a._emscripten_bind_MetadataQuerier_GetStringEntry_2=function(){return a.asm._emscripten_bind_MetadataQuerier_GetStringEntry_2.apply(null,arguments)},Ec=a._emscripten_bind_MetadataQuerier_HasEntry_2=function(){return a.asm._emscripten_bind_MetadataQuerier_HasEntry_2.apply(null,arguments)},eb=a._emscripten_bind_MetadataQuerier_MetadataQuerier_0=
function(){return a.asm._emscripten_bind_MetadataQuerier_MetadataQuerier_0.apply(null,arguments)},Fc=a._emscripten_bind_MetadataQuerier_NumEntries_1=function(){return a.asm._emscripten_bind_MetadataQuerier_NumEntries_1.apply(null,arguments)},Gc=a._emscripten_bind_MetadataQuerier___destroy___0=function(){return a.asm._emscripten_bind_MetadataQuerier___destroy___0.apply(null,arguments)},mb=a._emscripten_bind_Metadata_Metadata_0=function(){return a.asm._emscripten_bind_Metadata_Metadata_0.apply(null,
arguments)},Hc=a._emscripten_bind_Metadata___destroy___0=function(){return a.asm._emscripten_bind_Metadata___destroy___0.apply(null,arguments)},Ic=a._emscripten_bind_PointAttribute_GetAttributeTransformData_0=function(){return a.asm._emscripten_bind_PointAttribute_GetAttributeTransformData_0.apply(null,arguments)},ab=a._emscripten_bind_PointAttribute_PointAttribute_0=function(){return a.asm._emscripten_bind_PointAttribute_PointAttribute_0.apply(null,arguments)},Jc=a._emscripten_bind_PointAttribute___destroy___0=
function(){return a.asm._emscripten_bind_PointAttribute___destroy___0.apply(null,arguments)},Kc=a._emscripten_bind_PointAttribute_attribute_type_0=function(){return a.asm._emscripten_bind_PointAttribute_attribute_type_0.apply(null,arguments)},Lc=a._emscripten_bind_PointAttribute_byte_offset_0=function(){return a.asm._emscripten_bind_PointAttribute_byte_offset_0.apply(null,arguments)},Mc=a._emscripten_bind_PointAttribute_byte_stride_0=function(){return a.asm._emscripten_bind_PointAttribute_byte_stride_0.apply(null,
arguments)},Nc=a._emscripten_bind_PointAttribute_data_type_0=function(){return a.asm._emscripten_bind_PointAttribute_data_type_0.apply(null,arguments)},Oc=a._emscripten_bind_PointAttribute_normalized_0=function(){return a.asm._emscripten_bind_PointAttribute_normalized_0.apply(null,arguments)},Pc=a._emscripten_bind_PointAttribute_num_components_0=function(){return a.asm._emscripten_bind_PointAttribute_num_components_0.apply(null,arguments)},Qc=a._emscripten_bind_PointAttribute_size_0=function(){return a.asm._emscripten_bind_PointAttribute_size_0.apply(null,
arguments)},Rc=a._emscripten_bind_PointAttribute_unique_id_0=function(){return a.asm._emscripten_bind_PointAttribute_unique_id_0.apply(null,arguments)},Xa=a._emscripten_bind_PointCloud_PointCloud_0=function(){return a.asm._emscripten_bind_PointCloud_PointCloud_0.apply(null,arguments)},Sc=a._emscripten_bind_PointCloud___destroy___0=function(){return a.asm._emscripten_bind_PointCloud___destroy___0.apply(null,arguments)},Tc=a._emscripten_bind_PointCloud_num_attributes_0=function(){return a.asm._emscripten_bind_PointCloud_num_attributes_0.apply(null,
arguments)},Uc=a._emscripten_bind_PointCloud_num_points_0=function(){return a.asm._emscripten_bind_PointCloud_num_points_0.apply(null,arguments)},Vc=a._emscripten_bind_Status___destroy___0=function(){return a.asm._emscripten_bind_Status___destroy___0.apply(null,arguments)},Wc=a._emscripten_bind_Status_code_0=function(){return a.asm._emscripten_bind_Status_code_0.apply(null,arguments)},Xc=a._emscripten_bind_Status_error_msg_0=function(){return a.asm._emscripten_bind_Status_error_msg_0.apply(null,arguments)},
Yc=a._emscripten_bind_Status_ok_0=function(){return a.asm._emscripten_bind_Status_ok_0.apply(null,arguments)},Zc=a._emscripten_bind_VoidPtr___destroy___0=function(){return a.asm._emscripten_bind_VoidPtr___destroy___0.apply(null,arguments)},$c=a._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_INVALID_TRANSFORM=function(){return a.asm._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_INVALID_TRANSFORM.apply(null,arguments)},ad=a._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_NO_TRANSFORM=
function(){return a.asm._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_NO_TRANSFORM.apply(null,arguments)},bd=a._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_OCTAHEDRON_TRANSFORM=function(){return a.asm._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_OCTAHEDRON_TRANSFORM.apply(null,arguments)},cd=a._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_QUANTIZATION_TRANSFORM=function(){return a.asm._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_QUANTIZATION_TRANSFORM.apply(null,
arguments)},dd=a._emscripten_enum_draco_EncodedGeometryType_INVALID_GEOMETRY_TYPE=function(){return a.asm._emscripten_enum_draco_EncodedGeometryType_INVALID_GEOMETRY_TYPE.apply(null,arguments)},ed=a._emscripten_enum_draco_EncodedGeometryType_POINT_CLOUD=function(){return a.asm._emscripten_enum_draco_EncodedGeometryType_POINT_CLOUD.apply(null,arguments)},fd=a._emscripten_enum_draco_EncodedGeometryType_TRIANGULAR_MESH=function(){return a.asm._emscripten_enum_draco_EncodedGeometryType_TRIANGULAR_MESH.apply(null,
arguments)},gd=a._emscripten_enum_draco_GeometryAttribute_Type_COLOR=function(){return a.asm._emscripten_enum_draco_GeometryAttribute_Type_COLOR.apply(null,arguments)},hd=a._emscripten_enum_draco_GeometryAttribute_Type_GENERIC=function(){return a.asm._emscripten_enum_draco_GeometryAttribute_Type_GENERIC.apply(null,arguments)},id=a._emscripten_enum_draco_GeometryAttribute_Type_INVALID=function(){return a.asm._emscripten_enum_draco_GeometryAttribute_Type_INVALID.apply(null,arguments)},jd=a._emscripten_enum_draco_GeometryAttribute_Type_NORMAL=
function(){return a.asm._emscripten_enum_draco_GeometryAttribute_Type_NORMAL.apply(null,arguments)},kd=a._emscripten_enum_draco_GeometryAttribute_Type_POSITION=function(){return a.asm._emscripten_enum_draco_GeometryAttribute_Type_POSITION.apply(null,arguments)},ld=a._emscripten_enum_draco_GeometryAttribute_Type_TEX_COORD=function(){return a.asm._emscripten_enum_draco_GeometryAttribute_Type_TEX_COORD.apply(null,arguments)},md=a._emscripten_enum_draco_StatusCode_ERROR=function(){return a.asm._emscripten_enum_draco_StatusCode_ERROR.apply(null,
arguments)},nd=a._emscripten_enum_draco_StatusCode_INVALID_PARAMETER=function(){return a.asm._emscripten_enum_draco_StatusCode_INVALID_PARAMETER.apply(null,arguments)},od=a._emscripten_enum_draco_StatusCode_IO_ERROR=function(){return a.asm._emscripten_enum_draco_StatusCode_IO_ERROR.apply(null,arguments)},pd=a._emscripten_enum_draco_StatusCode_OK=function(){return a.asm._emscripten_enum_draco_StatusCode_OK.apply(null,arguments)},qd=a._emscripten_enum_draco_StatusCode_UNKNOWN_VERSION=function(){return a.asm._emscripten_enum_draco_StatusCode_UNKNOWN_VERSION.apply(null,
arguments)},rd=a._emscripten_enum_draco_StatusCode_UNSUPPORTED_VERSION=function(){return a.asm._emscripten_enum_draco_StatusCode_UNSUPPORTED_VERSION.apply(null,arguments)},nb=a._emscripten_replace_memory=function(){return a.asm._emscripten_replace_memory.apply(null,arguments)};a._free=function(){return a.asm._free.apply(null,arguments)};a._llvm_bswap_i32=function(){return a.asm._llvm_bswap_i32.apply(null,arguments)};var Ka=a._malloc=function(){return a.asm._malloc.apply(null,arguments)};a._memcpy=
function(){return a.asm._memcpy.apply(null,arguments)};a._memmove=function(){return a.asm._memmove.apply(null,arguments)};a._memset=function(){return a.asm._memset.apply(null,arguments)};a._sbrk=function(){return a.asm._sbrk.apply(null,arguments)};a.establishStackSpace=function(){return a.asm.establishStackSpace.apply(null,arguments)};a.getTempRet0=function(){return a.asm.getTempRet0.apply(null,arguments)};a.runPostSets=function(){return a.asm.runPostSets.apply(null,arguments)};var sa=a.setTempRet0=
function(){return a.asm.setTempRet0.apply(null,arguments)};a.setThrew=function(){return a.asm.setThrew.apply(null,arguments)};a.stackAlloc=function(){return a.asm.stackAlloc.apply(null,arguments)};a.stackRestore=function(){return a.asm.stackRestore.apply(null,arguments)};a.stackSave=function(){return a.asm.stackSave.apply(null,arguments)};a.dynCall_ii=function(){return a.asm.dynCall_ii.apply(null,arguments)};a.dynCall_iii=function(){return a.asm.dynCall_iii.apply(null,arguments)};a.dynCall_iiii=function(){return a.asm.dynCall_iiii.apply(null,
arguments)};a.dynCall_iiiiiii=function(){return a.asm.dynCall_iiiiiii.apply(null,arguments)};a.dynCall_v=function(){return a.asm.dynCall_v.apply(null,arguments)};a.dynCall_vi=function(){return a.asm.dynCall_vi.apply(null,arguments)};a.dynCall_vii=function(){return a.asm.dynCall_vii.apply(null,arguments)};a.dynCall_viii=function(){return a.asm.dynCall_viii.apply(null,arguments)};a.dynCall_viiii=function(){return a.asm.dynCall_viiii.apply(null,arguments)};a.dynCall_viiiii=function(){return a.asm.dynCall_viiiii.apply(null,
arguments)};a.dynCall_viiiiii=function(){return a.asm.dynCall_viiiiii.apply(null,arguments)};a.asm=Ua;a.then=function(d){if(a.calledRun)d(a);else{var b=a.onRuntimeInitialized;a.onRuntimeInitialized=function(){b&&b();d(a)}}return a};na.prototype=Error();na.prototype.constructor=na;ra=function b(){a.calledRun||wa();a.calledRun||(ra=b)};a.run=wa;a.exit=function(b,c){if(!c||!a.noExitRuntime||0!==b){if(!a.noExitRuntime&&(oa=!0,ta=void 0,B(ob),a.onExit))a.onExit(b);qa&&process.exit(b);a.quit(b,new na(b))}};
a.abort=O;if(a.preInit)for("function"==typeof a.preInit&&(a.preInit=[a.preInit]);0<a.preInit.length;)a.preInit.pop()();a.noExitRuntime=!0;wa();m.prototype=Object.create(m.prototype);m.prototype.constructor=m;m.prototype.__class__=m;m.__cache__={};a.WrapperObject=m;a.getCache=t;a.wrapPointer=T;a.castObject=function(a,c){return T(a.ptr,c)};a.NULL=T(0);a.destroy=function(a){if(!a.__destroy__)throw"Error: Cannot destroy object. (Did you create it yourself?)";a.__destroy__();delete t(a.__class__)[a.ptr]};
a.compare=function(a,c){return a.ptr===c.ptr};a.getPointer=function(a){return a.ptr};a.getClass=function(a){return a.__class__};var l={buffer:0,size:0,pos:0,temps:[],needed:0,prepare:function(){if(l.needed){for(var b=0;b<l.temps.length;b++)a._free(l.temps[b]);l.temps.length=0;a._free(l.buffer);l.buffer=0;l.size+=l.needed;l.needed=0}l.buffer||(l.size+=128,l.buffer=a._malloc(l.size),f(l.buffer));l.pos=0},alloc:function(b,c){f(l.buffer);b=b.length*c.BYTES_PER_ELEMENT;b=b+7&-8;l.pos+b>=l.size?(f(0<b),
l.needed+=b,c=a._malloc(b),l.temps.push(c)):(c=l.buffer+l.pos,l.pos+=b);return c},copy:function(a,c,d){switch(c.BYTES_PER_ELEMENT){case 2:d>>=1;break;case 4:d>>=2;break;case 8:d>>=3}for(var b=0;b<a.length;b++)c[d+b]=a[b]}};z.prototype=Object.create(m.prototype);z.prototype.constructor=z;z.prototype.__class__=z;z.__cache__={};a.Status=z;z.prototype.code=z.prototype.code=function(){return Wc(this.ptr)};z.prototype.ok=z.prototype.ok=function(){return!!Yc(this.ptr)};z.prototype.error_msg=z.prototype.error_msg=
function(){return v(Xc(this.ptr))};z.prototype.__destroy__=z.prototype.__destroy__=function(){Vc(this.ptr)};F.prototype=Object.create(m.prototype);F.prototype.constructor=F;F.prototype.__class__=F;F.__cache__={};a.DracoUInt16Array=F;F.prototype.GetValue=F.prototype.GetValue=function(a){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);return mc(b,a)};F.prototype.size=F.prototype.size=function(){return oc(this.ptr)};F.prototype.__destroy__=F.prototype.__destroy__=function(){nc(this.ptr)};G.prototype=
Object.create(m.prototype);G.prototype.constructor=G;G.prototype.__class__=G;G.__cache__={};a.PointCloud=G;G.prototype.num_attributes=G.prototype.num_attributes=function(){return Tc(this.ptr)};G.prototype.num_points=G.prototype.num_points=function(){return Uc(this.ptr)};G.prototype.__destroy__=G.prototype.__destroy__=function(){Sc(this.ptr)};H.prototype=Object.create(m.prototype);H.prototype.constructor=H;H.prototype.__class__=H;H.__cache__={};a.DracoUInt8Array=H;H.prototype.GetValue=H.prototype.GetValue=
function(a){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);return sc(b,a)};H.prototype.size=H.prototype.size=function(){return uc(this.ptr)};H.prototype.__destroy__=H.prototype.__destroy__=function(){tc(this.ptr)};I.prototype=Object.create(m.prototype);I.prototype.constructor=I;I.prototype.__class__=I;I.__cache__={};a.DracoUInt32Array=I;I.prototype.GetValue=I.prototype.GetValue=function(a){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);return pc(b,a)};I.prototype.size=I.prototype.size=function(){return rc(this.ptr)};
I.prototype.__destroy__=I.prototype.__destroy__=function(){qc(this.ptr)};J.prototype=Object.create(m.prototype);J.prototype.constructor=J;J.prototype.__class__=J;J.__cache__={};a.AttributeOctahedronTransform=J;J.prototype.InitFromAttribute=J.prototype.InitFromAttribute=function(a){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);return!!sb(b,a)};J.prototype.quantization_bits=J.prototype.quantization_bits=function(){return ub(this.ptr)};J.prototype.__destroy__=J.prototype.__destroy__=function(){tb(this.ptr)};
n.prototype=Object.create(m.prototype);n.prototype.constructor=n;n.prototype.__class__=n;n.__cache__={};a.PointAttribute=n;n.prototype.size=n.prototype.size=function(){return Qc(this.ptr)};n.prototype.GetAttributeTransformData=n.prototype.GetAttributeTransformData=function(){return T(Ic(this.ptr),P)};n.prototype.attribute_type=n.prototype.attribute_type=function(){return Kc(this.ptr)};n.prototype.data_type=n.prototype.data_type=function(){return Nc(this.ptr)};n.prototype.num_components=n.prototype.num_components=
function(){return Pc(this.ptr)};n.prototype.normalized=n.prototype.normalized=function(){return!!Oc(this.ptr)};n.prototype.byte_stride=n.prototype.byte_stride=function(){return Mc(this.ptr)};n.prototype.byte_offset=n.prototype.byte_offset=function(){return Lc(this.ptr)};n.prototype.unique_id=n.prototype.unique_id=function(){return Rc(this.ptr)};n.prototype.__destroy__=n.prototype.__destroy__=function(){Jc(this.ptr)};P.prototype=Object.create(m.prototype);P.prototype.constructor=P;P.prototype.__class__=
P;P.__cache__={};a.AttributeTransformData=P;P.prototype.transform_type=P.prototype.transform_type=function(){return Bb(this.ptr)};P.prototype.__destroy__=P.prototype.__destroy__=function(){Ab(this.ptr)};x.prototype=Object.create(m.prototype);x.prototype.constructor=x;x.prototype.__class__=x;x.__cache__={};a.AttributeQuantizationTransform=x;x.prototype.InitFromAttribute=x.prototype.InitFromAttribute=function(a){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);return!!vb(b,a)};x.prototype.quantization_bits=
x.prototype.quantization_bits=function(){return yb(this.ptr)};x.prototype.min_value=x.prototype.min_value=function(a){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);return xb(b,a)};x.prototype.range=x.prototype.range=function(){return zb(this.ptr)};x.prototype.__destroy__=x.prototype.__destroy__=function(){wb(this.ptr)};K.prototype=Object.create(m.prototype);K.prototype.constructor=K;K.prototype.__class__=K;K.__cache__={};a.DracoInt8Array=K;K.prototype.GetValue=K.prototype.GetValue=function(a){var b=
this.ptr;a&&"object"===typeof a&&(a=a.ptr);return jc(b,a)};K.prototype.size=K.prototype.size=function(){return lc(this.ptr)};K.prototype.__destroy__=K.prototype.__destroy__=function(){kc(this.ptr)};r.prototype=Object.create(m.prototype);r.prototype.constructor=r;r.prototype.__class__=r;r.__cache__={};a.MetadataQuerier=r;r.prototype.HasEntry=r.prototype.HasEntry=function(a,c){var b=this.ptr;l.prepare();a&&"object"===typeof a&&(a=a.ptr);c=c&&"object"===typeof c?c.ptr:ea(c);return!!Ec(b,a,c)};r.prototype.GetIntEntry=
r.prototype.GetIntEntry=function(a,c){var b=this.ptr;l.prepare();a&&"object"===typeof a&&(a=a.ptr);c=c&&"object"===typeof c?c.ptr:ea(c);return Cc(b,a,c)};r.prototype.GetDoubleEntry=r.prototype.GetDoubleEntry=function(a,c){var b=this.ptr;l.prepare();a&&"object"===typeof a&&(a=a.ptr);c=c&&"object"===typeof c?c.ptr:ea(c);return Ac(b,a,c)};r.prototype.GetStringEntry=r.prototype.GetStringEntry=function(a,c){var b=this.ptr;l.prepare();a&&"object"===typeof a&&(a=a.ptr);c=c&&"object"===typeof c?c.ptr:ea(c);
return v(Dc(b,a,c))};r.prototype.NumEntries=r.prototype.NumEntries=function(a){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);return Fc(b,a)};r.prototype.GetEntryName=r.prototype.GetEntryName=function(a,c){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);c&&"object"===typeof c&&(c=c.ptr);return v(Bc(b,a,c))};r.prototype.__destroy__=r.prototype.__destroy__=function(){Gc(this.ptr)};L.prototype=Object.create(m.prototype);L.prototype.constructor=L;L.prototype.__class__=L;L.__cache__={};a.DracoInt16Array=
L;L.prototype.GetValue=L.prototype.GetValue=function(a){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);return dc(b,a)};L.prototype.size=L.prototype.size=function(){return fc(this.ptr)};L.prototype.__destroy__=L.prototype.__destroy__=function(){ec(this.ptr)};M.prototype=Object.create(m.prototype);M.prototype.constructor=M;M.prototype.__class__=M;M.__cache__={};a.DracoFloat32Array=M;M.prototype.GetValue=M.prototype.GetValue=function(a){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);return ac(b,
a)};M.prototype.size=M.prototype.size=function(){return cc(this.ptr)};M.prototype.__destroy__=M.prototype.__destroy__=function(){bc(this.ptr)};U.prototype=Object.create(m.prototype);U.prototype.constructor=U;U.prototype.__class__=U;U.__cache__={};a.GeometryAttribute=U;U.prototype.__destroy__=U.prototype.__destroy__=function(){vc(this.ptr)};Q.prototype=Object.create(m.prototype);Q.prototype.constructor=Q;Q.prototype.__class__=Q;Q.__cache__={};a.DecoderBuffer=Q;Q.prototype.Init=Q.prototype.Init=function(a,
c){var b=this.ptr;l.prepare();if("object"==typeof a&&"object"===typeof a){var d=l.alloc(a,ia);l.copy(a,ia,d);a=d}c&&"object"===typeof c&&(c=c.ptr);Cb(b,a,c)};Q.prototype.__destroy__=Q.prototype.__destroy__=function(){Db(this.ptr)};g.prototype=Object.create(m.prototype);g.prototype.constructor=g;g.prototype.__class__=g;g.__cache__={};a.Decoder=g;g.prototype.GetEncodedGeometryType=g.prototype.GetEncodedGeometryType=function(a){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);return Vb(b,a)};g.prototype.DecodeBufferToPointCloud=
g.prototype.DecodeBufferToPointCloud=function(a,c){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);c&&"object"===typeof c&&(c=c.ptr);return T(Fb(b,a,c),z)};g.prototype.DecodeBufferToMesh=g.prototype.DecodeBufferToMesh=function(a,c){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);c&&"object"===typeof c&&(c=c.ptr);return T(Eb(b,a,c),z)};g.prototype.GetAttributeId=g.prototype.GetAttributeId=function(a,c){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);c&&"object"===typeof c&&(c=c.ptr);return Lb(b,
a,c)};g.prototype.GetAttributeIdByName=g.prototype.GetAttributeIdByName=function(a,c){var b=this.ptr;l.prepare();a&&"object"===typeof a&&(a=a.ptr);c=c&&"object"===typeof c?c.ptr:ea(c);return Kb(b,a,c)};g.prototype.GetAttributeIdByMetadataEntry=g.prototype.GetAttributeIdByMetadataEntry=function(a,c,d){var b=this.ptr;l.prepare();a&&"object"===typeof a&&(a=a.ptr);c=c&&"object"===typeof c?c.ptr:ea(c);d=d&&"object"===typeof d?d.ptr:ea(d);return Jb(b,a,c,d)};g.prototype.GetAttribute=g.prototype.GetAttribute=
function(a,c){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);c&&"object"===typeof c&&(c=c.ptr);return T(Ub(b,a,c),n)};g.prototype.GetAttributeByUniqueId=g.prototype.GetAttributeByUniqueId=function(a,c){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);c&&"object"===typeof c&&(c=c.ptr);return T(Gb(b,a,c),n)};g.prototype.GetMetadata=g.prototype.GetMetadata=function(a){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);return T(Xb(b,a),R)};g.prototype.GetAttributeMetadata=g.prototype.GetAttributeMetadata=
function(a,c){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);c&&"object"===typeof c&&(c=c.ptr);return T(Qb(b,a,c),R)};g.prototype.GetFaceFromMesh=g.prototype.GetFaceFromMesh=function(a,c,d){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);c&&"object"===typeof c&&(c=c.ptr);d&&"object"===typeof d&&(d=d.ptr);return!!Wb(b,a,c,d)};g.prototype.GetTriangleStripsFromMesh=g.prototype.GetTriangleStripsFromMesh=function(a,c){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);c&&"object"===typeof c&&(c=c.ptr);
return Yb(b,a,c)};g.prototype.GetAttributeFloat=g.prototype.GetAttributeFloat=function(a,c,d){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);c&&"object"===typeof c&&(c=c.ptr);d&&"object"===typeof d&&(d=d.ptr);return!!Ib(b,a,c,d)};g.prototype.GetAttributeFloatForAllPoints=g.prototype.GetAttributeFloatForAllPoints=function(a,c,d){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);c&&"object"===typeof c&&(c=c.ptr);d&&"object"===typeof d&&(d=d.ptr);return!!Hb(b,a,c,d)};g.prototype.GetAttributeIntForAllPoints=
g.prototype.GetAttributeIntForAllPoints=function(a,c,d){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);c&&"object"===typeof c&&(c=c.ptr);d&&"object"===typeof d&&(d=d.ptr);return!!Pb(b,a,c,d)};g.prototype.GetAttributeInt8ForAllPoints=g.prototype.GetAttributeInt8ForAllPoints=function(a,c,d){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);c&&"object"===typeof c&&(c=c.ptr);d&&"object"===typeof d&&(d=d.ptr);return!!Ob(b,a,c,d)};g.prototype.GetAttributeUInt8ForAllPoints=g.prototype.GetAttributeUInt8ForAllPoints=
function(a,c,d){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);c&&"object"===typeof c&&(c=c.ptr);d&&"object"===typeof d&&(d=d.ptr);return!!Tb(b,a,c,d)};g.prototype.GetAttributeInt16ForAllPoints=g.prototype.GetAttributeInt16ForAllPoints=function(a,c,d){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);c&&"object"===typeof c&&(c=c.ptr);d&&"object"===typeof d&&(d=d.ptr);return!!Mb(b,a,c,d)};g.prototype.GetAttributeUInt16ForAllPoints=g.prototype.GetAttributeUInt16ForAllPoints=function(a,c,d){var b=this.ptr;
a&&"object"===typeof a&&(a=a.ptr);c&&"object"===typeof c&&(c=c.ptr);d&&"object"===typeof d&&(d=d.ptr);return!!Rb(b,a,c,d)};g.prototype.GetAttributeInt32ForAllPoints=g.prototype.GetAttributeInt32ForAllPoints=function(a,c,d){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);c&&"object"===typeof c&&(c=c.ptr);d&&"object"===typeof d&&(d=d.ptr);return!!Nb(b,a,c,d)};g.prototype.GetAttributeUInt32ForAllPoints=g.prototype.GetAttributeUInt32ForAllPoints=function(a,c,d){var b=this.ptr;a&&"object"===typeof a&&
(a=a.ptr);c&&"object"===typeof c&&(c=c.ptr);d&&"object"===typeof d&&(d=d.ptr);return!!Sb(b,a,c,d)};g.prototype.SkipAttributeTransform=g.prototype.SkipAttributeTransform=function(a){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);Zb(b,a)};g.prototype.__destroy__=g.prototype.__destroy__=function(){$b(this.ptr)};C.prototype=Object.create(m.prototype);C.prototype.constructor=C;C.prototype.__class__=C;C.__cache__={};a.Mesh=C;C.prototype.num_faces=C.prototype.num_faces=function(){return yc(this.ptr)};
C.prototype.num_attributes=C.prototype.num_attributes=function(){return xc(this.ptr)};C.prototype.num_points=C.prototype.num_points=function(){return zc(this.ptr)};C.prototype.__destroy__=C.prototype.__destroy__=function(){wc(this.ptr)};W.prototype=Object.create(m.prototype);W.prototype.constructor=W;W.prototype.__class__=W;W.__cache__={};a.VoidPtr=W;W.prototype.__destroy__=W.prototype.__destroy__=function(){Zc(this.ptr)};N.prototype=Object.create(m.prototype);N.prototype.constructor=N;N.prototype.__class__=
N;N.__cache__={};a.DracoInt32Array=N;N.prototype.GetValue=N.prototype.GetValue=function(a){var b=this.ptr;a&&"object"===typeof a&&(a=a.ptr);return gc(b,a)};N.prototype.size=N.prototype.size=function(){return ic(this.ptr)};N.prototype.__destroy__=N.prototype.__destroy__=function(){hc(this.ptr)};R.prototype=Object.create(m.prototype);R.prototype.constructor=R;R.prototype.__class__=R;R.__cache__={};a.Metadata=R;R.prototype.__destroy__=R.prototype.__destroy__=function(){Hc(this.ptr)};(function(){function b(){a.OK=
pd();a.ERROR=md();a.IO_ERROR=od();a.INVALID_PARAMETER=nd();a.UNSUPPORTED_VERSION=rd();a.UNKNOWN_VERSION=qd();a.INVALID_GEOMETRY_TYPE=dd();a.POINT_CLOUD=ed();a.TRIANGULAR_MESH=fd();a.ATTRIBUTE_INVALID_TRANSFORM=$c();a.ATTRIBUTE_NO_TRANSFORM=ad();a.ATTRIBUTE_QUANTIZATION_TRANSFORM=cd();a.ATTRIBUTE_OCTAHEDRON_TRANSFORM=bd();a.INVALID=id();a.POSITION=kd();a.NORMAL=jd();a.COLOR=gd();a.TEX_COORD=ld();a.GENERIC=hd()}a.calledRun?b():Na.unshift(b)})();if("function"===typeof a.onModuleParsed)a.onModuleParsed();
return d}; true?module.exports=DracoDecoderModule:undefined;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../neuvue-app/neuvue_project/workspace/static/ts/wrapper/node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../../neuvue-app/neuvue_project/workspace/static/ts/wrapper/node_modules/process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/node-libs-browser/mock/empty.js":
/*!******************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/empty.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./node_modules/path-browserify/index.js":
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ 0:

  !*** multi neuroglancer/worker_rpc_context neuroglancer/chunk_manager/backend neuroglancer/sliceview/backend neuroglancer/perspective_view/backend neuroglancer/annotation/backend neuroglancer/datasource/brainmaps/backend neuroglancer/datasource/boss/backend neuroglancer/datasource/dvid/backend neuroglancer/datasource/render/backend neuroglancer/datasource/precomputed/backend neuroglancer/datasource/graphene/backend neuroglancer/datasource/nifti/backend neuroglancer/datasource/n5/backend neuroglancer/datasource/computed/backend neuroglancer/datasource/computed/example/backend neuroglancer/datasource/computed/tensorflow/backend neuroglancer/datasource/vtk/backend neuroglancer/datasource/csv/backend ***!

/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! neuroglancer/worker_rpc_context */"../../../../../../neuroglancer/src/neuroglancer/worker_rpc_context.ts");
__webpack_require__(/*! neuroglancer/chunk_manager/backend */"../../../../../../neuroglancer/src/neuroglancer/chunk_manager/backend.ts");
__webpack_require__(/*! neuroglancer/sliceview/backend */"../../../../../../neuroglancer/src/neuroglancer/sliceview/backend.ts");
__webpack_require__(/*! neuroglancer/perspective_view/backend */"../../../../../../neuroglancer/src/neuroglancer/perspective_view/backend.ts");
__webpack_require__(/*! neuroglancer/annotation/backend */"../../../../../../neuroglancer/src/neuroglancer/annotation/backend.ts");
__webpack_require__(/*! neuroglancer/datasource/brainmaps/backend */"../../../../../../neuroglancer/src/neuroglancer/datasource/brainmaps/backend.ts");
__webpack_require__(/*! neuroglancer/datasource/boss/backend */"../../../../../../neuroglancer/src/neuroglancer/datasource/boss/backend.ts");
__webpack_require__(/*! neuroglancer/datasource/dvid/backend */"../../../../../../neuroglancer/src/neuroglancer/datasource/dvid/backend.ts");
__webpack_require__(/*! neuroglancer/datasource/render/backend */"../../../../../../neuroglancer/src/neuroglancer/datasource/render/backend.ts");
__webpack_require__(/*! neuroglancer/datasource/precomputed/backend */"../../../../../../neuroglancer/src/neuroglancer/datasource/precomputed/backend.ts");
__webpack_require__(/*! neuroglancer/datasource/graphene/backend */"../../../../../../neuroglancer/src/neuroglancer/datasource/graphene/backend.ts");
__webpack_require__(/*! neuroglancer/datasource/nifti/backend */"../../../../../../neuroglancer/src/neuroglancer/datasource/nifti/backend.ts");
__webpack_require__(/*! neuroglancer/datasource/n5/backend */"../../../../../../neuroglancer/src/neuroglancer/datasource/n5/backend.ts");
__webpack_require__(/*! neuroglancer/datasource/computed/backend */"../../../../../../neuroglancer/src/neuroglancer/datasource/computed/backend.ts");
__webpack_require__(/*! neuroglancer/datasource/computed/example/backend */"../../../../../../neuroglancer/src/neuroglancer/datasource/computed/example/backend.ts");
__webpack_require__(/*! neuroglancer/datasource/computed/tensorflow/backend */"../../../../../../neuroglancer/src/neuroglancer/datasource/computed/tensorflow/backend.ts");
__webpack_require__(/*! neuroglancer/datasource/vtk/backend */"../../../../../../neuroglancer/src/neuroglancer/datasource/vtk/backend.ts");
module.exports = __webpack_require__(/*! neuroglancer/datasource/csv/backend */"../../../../../../neuroglancer/src/neuroglancer/datasource/csv/backend.ts");


/***/ })

/******/ });
//# sourceMappingURL=chunk_worker.bundle.js.map