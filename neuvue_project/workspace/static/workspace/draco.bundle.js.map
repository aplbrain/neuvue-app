{"version":3,"sources":["webpack:////Users/normar1/projects/microns/neuroglancer/src/neuroglancer/mesh/draco/neuroglancer_draco.wasm","webpack:////Users/normar1/projects/microns/neuroglancer/src/neuroglancer/mesh/draco/index.ts"],"names":[],"mappings":";;;;;;;;;AAAA,wCAAwC,oG;;;;;;;;;;;;ACAxC;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;GAcG;AAG6D;AAIhE,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,MAAM,CAAC,EAAC,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC;AACpD,IAAI,KAAiB,CAAC;AACtB,SAAS,eAAe;IACtB,KAAK,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AACxC,CAAC;AACD,eAAe,EAAE,CAAC;AAClB,IAAI,MAAM,GAAG,IAAI,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAC5C,IAAI,YAAY,GAAG,KAAK,EAAE,cAAc,GAAG,IAAI,CAAC;AAChD,MAAM,CAAC,cAAc,IAAI,CAAC,CAAC,GAAG,YAAY,CAAC;AAC3C,SAAS,KAAK;IACZ,MAAM,OAAO,CAAC;AAChB,CAAC;AACD,SAAS,OAAO,CAAC,CAAS,EAAE,QAAgB;IAC1C,IAAI,CAAC,GAAG,QAAQ,GAAG,CAAC,EAAE;QACpB,CAAC,IAAI,QAAQ,GAAG,CAAC,GAAG,QAAQ;KAC7B;IACD,OAAO,CAAC;AACV,CAAC;AACD,SAAS,yBAAyB,CAAC,IAAY;IAC7C,IAAI,aAAa,GAAG,KAAK,CAAC;IAC1B,IAAI,GAAG,OAAO,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IACpC,IAAI,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC;IAC/B,IAAI;QACF,IAAI,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,KAAK,CAAC,CAAC;QACnD,IAAI,MAAM,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;YACvB,OAAO,IAAI,CAAC;SACb;aAAM;YACL,OAAO,KAAK,CAAC;SACd;KACF;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,KAAK,CAAC;KACd;AACH,CAAC;AAED,IAAI,YAAY,GAA2C,SAAS,CAAC;AACrE,IAAI,aAAa,GAAG,CAAC,CAAC;AAEtB,MAAM,OAAO,GAAG;IACd,GAAG,EAAE;QACH,MAAM,EAAE,MAAM;QACd,KAAK,EAAE,IAAI,WAAW,CAAC,KAAK,CAAC,EAAC,SAAS,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,SAAS,EAAE,SAAS,EAAC,CAAC;QACpF,aAAa,EAAE,IAAI;QACnB,YAAY,EAAE,CAAC;QACf,wCAAwC,EAAE,UACtC,QAAgB,EAAE,WAAmB,EAAE,cAAsB,EAC7D,sBAA8B,EAAE,sBAA8B;YAChE,MAAM,UAAU,GAAG,QAAQ,GAAG,CAAC,CAAC;YAChC,MAAM,OAAO,GAAG,IAAI,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC,KAAK,EAAE,CAAC;YACnF,MAAM,eAAe,GACjB,IAAI,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,sBAAsB,EAAE,CAAC,GAAG,WAAW,CAAC,CAAC,KAAK,EAAE,CAAC;YACpF,MAAM,eAAe,GACjB,IAAI,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,sBAAsB,EAAE,aAAa,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;YACtF,MAAM,IAAI,GAA2B;gBACnC,OAAO;gBACP,eAAe;gBACf,eAAe;aAChB,CAAC;YACF,YAAY,GAAG,IAAI,CAAC;QACtB,CAAC;QACD,sBAAsB,EAAE,UAAS,CAAS,EAAE,CAAS,EAAE,CAAS;YAC9D,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACzC,CAAC;QACD,yBAAyB,EAAE;YACzB,OAAO,KAAK,CAAC,MAAM,CAAC;QACtB,CAAC;QACD,cAAc,EAAE,cAAc;QAC9B,MAAM,EAAE,KAAK;QACb,KAAK,EAAE,KAAK;QACZ,uBAAuB,EAAE,KAAK;QAC9B,mBAAmB,EAAE,KAAK;QAC1B,UAAU,EAAE,KAAK;QACjB,WAAW,EAAE,KAAK;QAClB,uBAAuB,EAAE,UAAS,aAAqB;YACrD,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC;YAC3B,IAAI,aAAa,GAAG,KAAK,CAAC;YAC1B,IAAI,KAAK,GAAG,UAAU,GAAG,aAAa,CAAC;YACvC,IAAI,aAAa,GAAG,KAAK,EAAE;gBACzB,OAAO,KAAK;aACb;YACD,IAAI,gBAAgB,GAAG,QAAQ,CAAC;YAChC,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;YAClD,OAAO,OAAO,GAAG,aAAa,EAAE;gBAC9B,IAAI,OAAO,IAAI,SAAS,EAAE;oBACxB,OAAO,GAAG,OAAO,CAAC,CAAC,GAAG,OAAO,EAAE,aAAa,CAAC;iBAC9C;qBAAM;oBACL,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,OAAO,GAAG,UAAU,CAAC,GAAG,CAAC,EAAE,aAAa,CAAC,EAAE,KAAK,CAAC;iBAClF;aACF;YACD,IAAI,WAAW,GAAG,yBAAyB,CAAC,OAAO,CAAC,CAAC;YACrD,IAAI,CAAC,WAAW,EAAE;gBAChB,OAAO,KAAK;aACb;YACD,eAAe,EAAE,CAAC;YAClB,OAAO,IAAI;QACb,CAAC;KACF;CACF,CAAC;AAEF,MAAM,kBAAkB,GAAG,KAAK,CAAC,yEAAY,CAAC;KACd,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;KACxC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;AAEtF,SAAS,sBAAsB,CAClC,MAAkB,EAAE,sBAA8B,EAClD,SAAkB;IACpB,OAAO,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;QACjC,MAAM,MAAM,GAAG,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAC7D,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC1B,aAAa,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClC,MAAM,IAAI,GAAG,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,0BAA0B,CACtD,MAAM,EAAE,MAAM,CAAC,UAAU,EAAE,SAAS,EAAE,sBAAsB,CAAC,CAAC;QAClE,IAAI,IAAI,KAAK,CAAC,EAAE;YACd,MAAM,CAAC,GAAG,YAAY,CAAC;YACvB,YAAY,GAAG,SAAS,CAAC;YACzB,IAAI,CAAC,YAAY,KAAK;gBAAE,MAAM,CAAC,CAAC;YAChC,OAAO,CAAE,CAAC;SACX;QACD,MAAM,IAAI,KAAK,CAAC,gCAAgC,IAAI,EAAE,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;AACL,CAAC","file":"draco.bundle.js","sourcesContent":["module.exports = \"data:application/wasm;base64,bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArICJuZXVyb2dsYW5jZXJfZHJhY28ud2FzbSI7\"","/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {RawPartitionedMeshData} from 'neuroglancer/mesh/backend';\nimport dracoWasmUrl from 'url-loader!./neuroglancer_draco.wasm';\n\ndeclare const WebAssembly: any;\n\nconst memory = new WebAssembly.Memory({initial: 1});\nlet heap8: Uint8Array;\nfunction updateHeapViews() {\n  heap8 = new Uint8Array(memory.buffer);\n}\nupdateHeapViews();\nvar heap32 = new Uint32Array(memory.buffer);\nvar DYNAMIC_BASE = 38592, DYNAMICTOP_PTR = 5568;\nheap32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;\nfunction abort() {\n  throw 'abort';\n}\nfunction alignUp(x: number, multiple: number) {\n  if (x % multiple > 0) {\n    x += multiple - x % multiple\n  }\n  return x\n}\nfunction emscripten_realloc_buffer(size: number) {\n  var PAGE_MULTIPLE = 65536;\n  size = alignUp(size, PAGE_MULTIPLE);\n  var oldSize = heap8.byteLength;\n  try {\n    var result = memory.grow((size - oldSize) / 65536);\n    if (result !== (-1 | 0)) {\n      return true;\n    } else {\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n}\n\nlet decodeResult: RawPartitionedMeshData|Error|undefined = undefined;\nlet numPartitions = 0;\n\nconst imports = {\n  env: {\n    memory: memory,\n    table: new WebAssembly.Table({'initial': 368, 'maximum': 368, 'element': 'anyfunc'}),\n    __memory_base: 1024,\n    __table_base: 0,\n    _neuroglancer_draco_receive_decoded_mesh: function(\n        numFaces: number, numVertices: number, indicesPointer: number,\n        vertexPositionsPointer: number, subchunkOffsetsPointer: number) {\n      const numIndices = numFaces * 3;\n      const indices = new Uint32Array(memory.buffer, indicesPointer, numIndices).slice();\n      const vertexPositions =\n          new Uint32Array(memory.buffer, vertexPositionsPointer, 3 * numVertices).slice();\n      const subChunkOffsets =\n          new Uint32Array(memory.buffer, subchunkOffsetsPointer, numPartitions + 1).slice();\n      const mesh: RawPartitionedMeshData = {\n        indices,\n        vertexPositions,\n        subChunkOffsets,\n      };\n      decodeResult = mesh;\n    },\n    _emscripten_memcpy_big: function(d: number, s: number, n: number) {\n      heap8.set(heap8.subarray(s, s + n), d);\n    },\n    _emscripten_get_heap_size: function() {\n      return heap8.length;\n    },\n    DYNAMICTOP_PTR: DYNAMICTOP_PTR,\n    _abort: abort,\n    abort: abort,\n    abortOnCannotGrowMemory: abort,\n    ___cxa_pure_virtual: abort,\n    _llvm_trap: abort,\n    ___setErrNo: abort,\n    _emscripten_resize_heap: function(requestedSize: number) {\n      var oldSize = heap8.length;\n      var PAGE_MULTIPLE = 65536;\n      var LIMIT = 2147483648 - PAGE_MULTIPLE;\n      if (requestedSize > LIMIT) {\n        return false\n      }\n      var MIN_TOTAL_MEMORY = 16777216;\n      var newSize = Math.max(oldSize, MIN_TOTAL_MEMORY);\n      while (newSize < requestedSize) {\n        if (newSize <= 536870912) {\n          newSize = alignUp(2 * newSize, PAGE_MULTIPLE)\n        } else {\n          newSize = Math.min(alignUp((3 * newSize + 2147483648) / 4, PAGE_MULTIPLE), LIMIT)\n        }\n      }\n      var replacement = emscripten_realloc_buffer(newSize);\n      if (!replacement) {\n        return false\n      }\n      updateHeapViews();\n      return true\n    },\n  },\n};\n\nconst dracoModulePromise = fetch(dracoWasmUrl)\n                               .then(response => response.arrayBuffer())\n                               .then(wasmCode => WebAssembly.instantiate(wasmCode, imports));\n\nexport function decodeDracoPartitioned(\n    buffer: Uint8Array, vertexQuantizationBits: number,\n    partition: boolean): Promise<RawPartitionedMeshData> {\n  return dracoModulePromise.then(m => {\n    const offset = m.instance.exports._malloc(buffer.byteLength);\n    heap8.set(buffer, offset);\n    numPartitions = partition ? 8 : 1;\n    const code = m.instance.exports._neuroglancer_draco_decode(\n        offset, buffer.byteLength, partition, vertexQuantizationBits);\n    if (code === 0) {\n      const r = decodeResult;\n      decodeResult = undefined;\n      if (r instanceof Error) throw r;\n      return r!;\n    }\n    throw new Error(`Failed to decode draco mesh: ${code}`);\n  });\n}\n"],"sourceRoot":""}